<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-20T09:58:11.228Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUU刷题日记20221020</title>
    <link href="http://example.com/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221020/"/>
    <id>http://example.com/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221020/</id>
    <published>2022-10-19T16:00:00.000Z</published>
    <updated>2022-10-20T09:58:11.228Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>RSA1</h1><p>给定dp、dq类型<br>dp ≡ d mod (p-1)<br>dq ≡ d mod (q-1)<br>m ≡ c^d^ mod n<br>m = c^d^ + k * n<br>m = c^d^ +k * p * q<br>对上式两端同时对p、q分别取余，得：（中国剩余定理）<br>m1 ≡ c^d^ mod p<br>m2 ≡ c^d^ mod q<br>同理，可得到<br>c^d^ = m1 +k * p<br>代入到 m2 ≡ c^d^ mod q 中：<br>m2 ≡ (m1 + k * p)mod q ，两端减去m1得<br>m2 - m1 ≡ k * p mod q ，两端乘p的逆元得<br>(m2 - m1)p^-1^ ≡ k mod q<br>将k代入到 c^d^ = m1 +k * p 中得：<br>c^d^ = m1 + ((m2 - m1)p^-1^ mod q) * p<br>m=c^d^ mod n<br>得到<br>m ≡ (((m2 - m1) * p^-1^ mod q) * p + m1) mod n<br>接下来就是求解m1，m2<br>m1 ≡ c^dp+k*(p-1)^ mod p<br>m2 ≡ c^dq+k*(q-1)^ mod q<br>根据==费马小定理==<br>若p是素数，则a^(p-1)^ ≡ 1 mod p<br>因此 m1 ≡ c^dp^ mod p，m2 ≡ c^dq^ mod q<br>最终可求得m</p><h2 id="exp">exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line">m1=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">m2=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">n=p*q</span><br><span class="line">p0=gmpy2.invert(p,q)</span><br><span class="line">m=(((m2-m1)*p0 % q)* p +m1)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#noxCTF&#123;W31c0m3_70_Ch1n470wn&#125;</span></span><br></pre></td></tr></table></figure><h1>RSAROLL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSA roll！roll！roll！</span><br><span class="line">Only number and a-z</span><br><span class="line">（don&#x27;t use editor</span><br><span class="line">which MS provide）</span><br></pre></td></tr></table></figure><p>给了一个data.txt文件，打开盲猜一下第一行是n，e，后面是c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">phi =(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">c=[<span class="number">704796792</span>,<span class="number">752211152</span>,<span class="number">274704164</span>,<span class="number">18414022</span>,<span class="number">368270835</span>,<span class="number">483295235</span>,<span class="number">263072905</span>,<span class="number">459788476</span>,<span class="number">483295235</span>,<span class="number">459788476</span>,<span class="number">663551792</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">428313374</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">425392137</span>,<span class="number">704796792</span>,<span class="number">458265677</span>,<span class="number">341524652</span>,<span class="number">483295235</span>,<span class="number">534149509</span>,<span class="number">425392137</span>,<span class="number">428313374</span>,<span class="number">425392137</span>,<span class="number">341524652</span>,<span class="number">458265677</span>,<span class="number">263072905</span>,<span class="number">483295235</span>,<span class="number">828509797</span>,<span class="number">341524652</span>,<span class="number">425392137</span>,<span class="number">475206804</span>,<span class="number">428313374</span>,<span class="number">483295235</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">306220148</span>,</span><br><span class="line">]</span><br><span class="line">m=[]</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(c)):</span><br><span class="line">    m.append(<span class="built_in">pow</span>(c[i],d,n))</span><br><span class="line">    flag+=long_to_bytes(m[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;13212je2ue28fy71w8u87y31r78eu1e2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;RSA1&lt;/h1&gt;
&lt;p&gt;给定dp、dq类型&lt;br&gt;
dp ≡ d mod (p-1)&lt;br&gt;
dq ≡ d mod (q-1)&lt;br&gt;
m ≡ c^d^ mod n&lt;br&gt;
m = c^d^ + k * n&lt;br&gt;
m = c^d^ +k * </summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="diary" scheme="http://example.com/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2022BUUCTF新生赛-RSA</title>
    <link href="http://example.com/2022/10/16/2022BUUCTF%E6%96%B0%E7%94%9F%E8%B5%9B-RSA/"/>
    <id>http://example.com/2022/10/16/2022BUUCTF%E6%96%B0%E7%94%9F%E8%B5%9B-RSA/</id>
    <published>2022-10-15T16:00:00.000Z</published>
    <updated>2022-10-16T12:37:14.514Z</updated>
    
    <content type="html"><![CDATA[<h1>题目源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#c = 295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342</span></span><br><span class="line"><span class="comment">#hint = 381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077</span></span><br><span class="line"><span class="comment">#n = 1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317</span></span><br></pre></td></tr></table></figure><h1>题目分析</h1><p>发现n和phin都不常规，没入手点，发现hint，hint=pow(d,e,n)，有趣，用d做明文，尝试推理一下：<br>d = pow(hint,d,n)<br>d = pow((d ** e % n),d,n)<br>d = (d ** e % n) ** d % n<br>d = d ** (e*d) % n<br>d = pow(d ** e,d,n)<br>把d ** e再次看做密文，可得<br>d ** e = pow(d,e,n)<br>因为hint = pow(d,e,n)<br>可得hint = d ** e<br>d ** e * e ** e-&gt;(ed) ** e-&gt;(ed) ** e == 1 mod phin<br>因此根据e和hint即可求得phin<br>从而得到phin和n的最大公约数p<br>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="number">295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342</span></span><br><span class="line">hint = <span class="number">381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077</span></span><br><span class="line">n = <span class="number">1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317</span></span><br><span class="line">p=math.gcd((hint*<span class="built_in">pow</span>(e,e) -<span class="number">1</span>),n)</span><br><span class="line">q=n//(p**<span class="number">2</span>)</span><br><span class="line">phi=p*(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;43075d24-77a7-4f57-ae89-54fe4f96db69&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;题目源码&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2021ByteCTF-easyxor</title>
    <link href="http://example.com/2022/10/16/2021ByteCTF-easyxor/"/>
    <id>http://example.com/2022/10/16/2021ByteCTF-easyxor/</id>
    <published>2022-10-15T16:00:00.000Z</published>
    <updated>2022-10-20T06:12:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>题目源码如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m, key</span>):</span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, k, iv, mode=<span class="string">&#x27;CBC&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(m) % <span class="number">8</span> == <span class="number">0</span></span><br><span class="line">    num = <span class="built_in">len</span>(m) // <span class="number">8</span></span><br><span class="line">    groups = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        groups.append(bytes_to_long(m[i * <span class="number">8</span>: (i + <span class="number">1</span>) * <span class="number">8</span>]))</span><br><span class="line">    last = iv</span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;CBC&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">            cur = eve ^ last</span><br><span class="line">            cur_c = convert(cur, k)</span><br><span class="line">            cipher.append(cur_c)</span><br><span class="line">            last = cur_c</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;OFB&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">            cur_c = convert(last, k)</span><br><span class="line">            cipher.append(cur_c ^ eve)</span><br><span class="line">            last = cur_c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Not supported now!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(eve)[<span class="number">2</span>:].strip(<span class="string">&#x27;L&#x27;</span>).rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> eve <span class="keyword">in</span> cipher])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        flag += <span class="string">&#x27;$&#x27;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(flag)</span><br><span class="line">    num = length // <span class="number">8</span></span><br><span class="line">    keys = [randint(-<span class="number">32</span>, <span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    IV = getrandbits(<span class="number">64</span>)</span><br><span class="line">    front = flag[:length // <span class="number">2</span>]</span><br><span class="line">    back = flag[length // <span class="number">2</span>:]</span><br><span class="line">    cipher1 = encrypt(front, keys, IV, mode=<span class="string">&#x27;OFB&#x27;</span>)</span><br><span class="line">    cipher2 = encrypt(back, keys, IV)</span><br><span class="line">    <span class="built_in">print</span> cipher1 + cipher2</span><br><span class="line"><span class="comment">#89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912</span></span><br></pre></td></tr></table></figure><h1>题目分析</h1><p>将flag分为两段，前半段采用OFB加密，后半段采用CBC加密</p><h2 id="OFB解密">OFB解密</h2><p>将前半段flag又进行切分，将其8位分为一组，存到group数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要加密代码</span></span><br><span class="line"><span class="keyword">elif</span> mode == <span class="string">&#x27;OFB&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">        cur_c = convert(last, k)</span><br><span class="line">        cipher.append(cur_c ^ eve)</span><br><span class="line">        last = cur_c</span><br></pre></td></tr></table></figure><p>针对一个随机生成的64位的last，与keys进行convert加密，再与group中的数进行异或。<br>keys是四个-32～32的数，可爆破。<br>对于OFB解密十分简单，因为我们已知第一组明文，恰好是8位的’ByteCTF{'，由于分组密码的性质，所以后面的也就迎刃而解，通过group[ 0]^cipher[ 0] 即可得到cur_c，从而求得下一次的cur_c，以此类推。</p><h3 id="expOFB">expOFB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#OFB解密</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m, key</span>):</span><br><span class="line">    c_list = [</span><br><span class="line">        <span class="number">0x37386180AF9AE39E</span>,</span><br><span class="line">        <span class="number">0xAF754E29895EE11A</span>,</span><br><span class="line">        <span class="number">0x85E1A429A2B7030C</span>,</span><br><span class="line">        <span class="number">0x964C5A89F6D3AE8C</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">s</span>):</span><br><span class="line">    c=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">32</span>&lt;=i&lt;=<span class="number">127</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c=<span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c = <span class="string">&quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;</span></span><br><span class="line">c=c[:<span class="built_in">len</span>(c)//<span class="number">2</span>]</span><br><span class="line">cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">16</span>):</span><br><span class="line">    cipher.append(<span class="built_in">int</span>(c[i*<span class="number">16</span>:(i+<span class="number">1</span>)*<span class="number">16</span>],<span class="number">16</span>))</span><br><span class="line">flag = <span class="string">b&#x27;ByteCTF&#123;&#x27;</span></span><br><span class="line">m0 = bytes_to_long(flag)</span><br><span class="line">m_m = m0 ^ cipher[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">                keys=[a,b,c,d]</span><br><span class="line">                m_m1=convert(m_m,keys)</span><br><span class="line">                m1=long_to_bytes((m_m1^cipher[<span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">if</span> check(m1):</span><br><span class="line">                    m_m2 = convert(m_m1, keys)</span><br><span class="line">                    m2 = long_to_bytes((m_m2 ^ cipher[<span class="number">2</span>]))</span><br><span class="line">                    <span class="keyword">if</span> check(m2):</span><br><span class="line">                        flag+=m1</span><br><span class="line">                        flag+=m2</span><br><span class="line">                        <span class="built_in">print</span>(flag)</span><br><span class="line">                        <span class="built_in">print</span>(a,b,c,d)</span><br><span class="line"><span class="comment">#b&#x27;ByteCTF&#123;5831a241s-f30980&#x27;</span></span><br><span class="line"><span class="comment">#keys：-12 26 -3 -31</span></span><br></pre></td></tr></table></figure><h2 id="CBC解密">CBC解密</h2><p>针对后半部分，我们需要逆向解出convert函数，因此就是对shift函数中的加密运算进行解密。<br>之前上网搜的wp都一笔带过，没解释unshift逆函数怎么写的。“难道有什么定理？？”<br>这里简单写一下我的理解。</p><h3 id="分析shift">分析shift</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br></pre></td></tr></table></figure><h4 id="推理过程">推理过程</h4><p>这里我们举例k&gt;0时的情况。（k&lt;0同理）<br>m和c都是64位,k是-32～32的10进制数。<br>1、m &lt;&lt; k相当于在m后补k位0，得到的新数我们称为a，a=m &lt;&lt; k。<br>2、令b = a &amp; c，由于a是64+k位，c是64位，所以b是64位，并且b的后k位都是0。<br>3、令x = m ^ b，x则是shift加密之后的值，x也是64位，并且x的后k位是与m的后k位相同的，与0异或得本身。<br>我们走完了一遍shift加密，得到的结论是，密文的位数同样是64，并且密文的后k位与明文相同。</p><h3 id="分析unshift">分析unshift</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unshift</span>(<span class="params">m, k, c, bits=<span class="number">64</span></span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // (-k)):</span><br><span class="line">            tmp = m ^ tmp &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // k):</span><br><span class="line">            tmp = m ^ tmp &lt;&lt; k &amp; c</span><br><span class="line">    <span class="keyword">assert</span> shift(tmp, k, c) == m</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><h4 id="推理过程-2">推理过程</h4><p>同样我们举例k&gt;0的情况。<br>之前我们得到的密文x，相当于tmp。<br>1、a’=tmp &lt;&lt; k，tmp后k位为0，tmp后2k～k位等于m的后k位。<br>2、b’=a’ &amp; c，b’后k位为0，后2k～k位为m&amp;c。<br>3、y=x ^ b’，y的后k位，等于x的后k位，也就是m的后k位。<br>4、y的后2k～k位，在shift加密当中，a &amp; c的后2k～k位等于m的后k位&amp;c，记作m1 &amp; c。<br>shift中的x，也就是m ^ b，m ^(m1 &amp; c)，在unshift最后的一步操作中，y= m ^(m1 &amp; c) ^ b’。<br>这时我们只考虑y的后2k～k位，y=m ^(m1 &amp; c)^(m1 &amp; c) = m<br>所以这时y的2k～k位也等于m了。</p><h4 id="总结">总结</h4><p>因此，我们发现每经过unshift一次，就有k位被还原，何时才能被完全还原？即循环bits//k次。<br>此推理正确，可以在unshift函数运行时输出每次的tmp观察即可。<br>ps：自我感觉这种位运算应该是属于一种性质或者定理，网上大佬们都是说“简单写个逆”。。。</p><h3 id="expCBC">expCBC</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unconvert</span>(<span class="params">m, key</span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        m = unshift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshift</span>(<span class="params">m, k, c, bits=<span class="number">64</span></span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // (-k)):</span><br><span class="line">            tmp = m ^ tmp &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // k):</span><br><span class="line"></span><br><span class="line">            tmp = m ^ tmp &lt;&lt; k &amp; c</span><br><span class="line">    <span class="keyword">assert</span> shift(tmp, k, c) == m</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">keys=[-<span class="number">12</span>,<span class="number">26</span>,-<span class="number">3</span>,-<span class="number">31</span>]</span><br><span class="line">c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">flag=<span class="string">b&#x27;ByteCTF&#123;&#x27;</span></span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">iv=<span class="number">16476971533267772345</span></span><br><span class="line">c = <span class="string">&quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;</span></span><br><span class="line">c=c[<span class="built_in">len</span>(c)//<span class="number">2</span>:]</span><br><span class="line">cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">16</span>):</span><br><span class="line">    cipher.append(<span class="built_in">int</span>(c[i*<span class="number">16</span>:(i+<span class="number">1</span>)*<span class="number">16</span>],<span class="number">16</span>))</span><br><span class="line">group=[]</span><br><span class="line"></span><br><span class="line">curc1=unconvert(cipher[<span class="number">0</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc1^iv))</span><br><span class="line"></span><br><span class="line">curc2=unconvert(cipher[<span class="number">1</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc2^cipher[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">curc3=unconvert(cipher[<span class="number">2</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc3^cipher[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">group[<span class="number">0</span>]+=group[<span class="number">1</span>]</span><br><span class="line">group[<span class="number">0</span>]+=group[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(group[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#b&#x27;q535af-2156547475u2t&#125;$$$&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;题目源码如下&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>梦开始的地方</title>
    <link href="http://example.com/2022/10/15/%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>http://example.com/2022/10/15/%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2022-10-15T07:59:58.000Z</published>
    <updated>2022-10-16T05:22:27.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac下利用Hexo和github-pages搭建个人博客">Mac下利用Hexo和github pages搭建个人博客</h2><h3 id="环境配置">环境配置</h3><h4 id="1-Node-js安装">1.Node.js安装</h4><p>下载地址：<a href="https://nodejs.org/en/">Node.js</a></p><h4 id="2-淘宝镜像安装">2.淘宝镜像安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打开终端terminal</span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure><h4 id="3-安装Hexo">3.安装Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用命令去安装Hexo</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">//安装成功后查看版本</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="初始化Hexo-Blog">初始化Hexo Blog</h3><h4 id="1-初始化Hexo">1.初始化Hexo</h4><p>新建一个文件夹并进入，例如blog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//初始化hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="2-本地启动Hexo">2.本地启动Hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器打开网站，即可看到本地博客</p><h3 id="创建博客文章">创建博客文章</h3><h4 id="1-创建文章">1.创建文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><p>在blog文件夹中的_post里即可看到新建的md文件</p><h4 id="2-清理缓存项目">2.清理缓存项目</h4><p>在新建博客或修改博客时，需要进行该操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h4 id="3-重新生成博客">3.重新生成博客</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="4-启动博客">4.启动博客</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac下利用Hexo和github-pages搭建个人博客&quot;&gt;Mac下利用Hexo和github pages搭建个人博客&lt;/h2&gt;
&lt;h3 id=&quot;环境配置&quot;&gt;环境配置&lt;/h3&gt;
&lt;h4 id=&quot;1-Node-js安装&quot;&gt;1.Node.js安装&lt;/h4&gt;
&lt;p&gt;下</summary>
      
    
    
    
    <category term="建站" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客搭建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/15/hello-world/"/>
    <id>http://example.com/2022/10/15/hello-world/</id>
    <published>2022-10-15T07:57:23.442Z</published>
    <updated>2022-10-15T07:57:23.442Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
