<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://sch01ar.github.io/atom.xml" rel="self"/>
  
  <link href="https://sch01ar.github.io/"/>
  <updated>2022-11-28T12:57:02.360Z</updated>
  <id>https://sch01ar.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>背包加密算法</title>
    <link href="https://sch01ar.github.io/2022/11/29/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95/"/>
    <id>https://sch01ar.github.io/2022/11/29/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95/</id>
    <published>2022-11-28T16:00:00.000Z</published>
    <updated>2022-11-28T12:57:02.360Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="前言"> 前言</span></h1><p>在一次CTF比赛中遇到了，写了10个for嵌套硬爆出来了，复现的时候发现是背包加密。<br><img src="/themes/pure/source/images/bag.png" alt></p><h2><span id="merklehellman-公钥加密算法"> Merkle–Hellman 公钥加密算法</span></h2><p>整体加密流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]<span class="comment">#明文对应的2进制数</span></span><br><span class="line">a = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">120</span>]<span class="comment"># 产生一个超递增序列，称作私钥</span></span><br><span class="line"><span class="comment">#对私钥a进行加密，产生公钥b。</span></span><br><span class="line">m = <span class="number">251</span><span class="comment">#选取一个模数</span></span><br><span class="line">w = <span class="number">300</span><span class="comment">#选取一个乘数</span></span><br><span class="line">b = [w * x % m <span class="keyword">for</span> x <span class="keyword">in</span> a]<span class="comment">#产生公钥</span></span><br><span class="line">S = numpy.dot(x,b)<span class="comment">#加密结果</span></span><br></pre></td></tr></table></figure><p>可以发现，加密十分容易，但解密十分困难，这也是非对称加密的特点。</p><h3><span id="加密"> 加密</span></h3><h4><span id="生成私钥"> 生成私钥</span></h4><p>超递增序列，也就是a中每一位元素需要大于其之前所有元素的和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a =[randint(<span class="number">20</span>, <span class="number">50</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits - <span class="number">1</span>):</span><br><span class="line">    a.append(randint(<span class="number">2</span> * a[-<span class="number">1</span>], <span class="number">3</span> * a[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h4><span id="生成公钥"> 生成公钥</span></h4><p>模数m要求：<code>m &gt; sum(a)</code><br>乘数w要求：<code>gcd(w,m) == 1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m = randint(<span class="number">2</span> * a[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">3</span> * a[-<span class="number">1</span>])</span><br><span class="line">    w = randint(<span class="number">2</span> * a[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">3</span> * a[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> gcd(w, m) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">b = [w * x % m <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><p>b和m作为公钥。<br>加密：<code>S = numpy.dot(x,b)</code></p><h3><span id="解密"> 解密</span></h3><p>拿到公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>m</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M=(m_1,m_2,\ldots,m_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，构造如下矩阵</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>m</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>m</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>m</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>S</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{array}{cccc}2 &amp; 0 &amp; \ldots &amp; 0 &amp; m_1\\0 &amp; 2 &amp; \ldots &amp; 0 &amp; m_2\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\0 &amp; 0 &amp; \ldots &amp; 2 &amp; m_n\\1 &amp; 1 &amp; \ldots &amp; 1 &amp; S\\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.550045em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-1.8999850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-2.4949950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.090005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6850150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.280025em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.3100249999999996em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-5.550045em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.550045em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-1.8999850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-2.4949950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.090005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6850150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.280025em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.3100249999999996em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-5.550045em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>这个矩阵的所有行向量的线性组合构成了一个格，接下来将通过明文的特点和格上的特殊解法来进行解密。</p><h4><span id="lll"> LLL</span></h4><p>对于明文<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X=(x_1,x_2,\ldots,x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>这一组数来说，构造一个向量</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo>−</mo><msub><mi>v</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>2</mn><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a=\sum_{i=1}^nx_iv_i-v_{n+1}=(2x_1-1,2x_2-1,\ldots,2x_n-1,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></span></p><p>显然，a向量在格L上。因为X中的所有x只能取值0或1，因此a向量的长度很小，约为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>，对于很大的格基来说，a向量无疑是格L上的最小向量，因此我们利用LLL算法即可求出a向量。</p><h4><span id="例题"> 例题</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">492226042629702</span></span><br><span class="line">nbits=<span class="number">32</span></span><br><span class="line">M=[<span class="number">19620578458228</span>, <span class="number">39616682530092</span>, <span class="number">3004204909088</span>, <span class="number">6231457508054</span>, <span class="number">3702963666023</span>, <span class="number">48859283851499</span>, <span class="number">4385984544187</span>, <span class="number">11027662187202</span>, <span class="number">18637179189873</span>, <span class="number">29985033726663</span>, <span class="number">20689315151593</span>, <span class="number">20060155940897</span>, <span class="number">46908062454518</span>, <span class="number">8848251127828</span>, <span class="number">28637097081675</span>, <span class="number">35930247189963</span>, <span class="number">20695167327567</span>, <span class="number">36659598017280</span>, <span class="number">10923228050453</span>, <span class="number">29810039803392</span>, <span class="number">4443991557077</span>, <span class="number">31801732862419</span>, <span class="number">23368424737916</span>, <span class="number">15178683835989</span>, <span class="number">34641771567914</span>, <span class="number">44824471397533</span>, <span class="number">31243260877608</span>, <span class="number">27158599500744</span>, <span class="number">2219939459559</span>, <span class="number">20255089091807</span>, <span class="number">24667494760808</span>, <span class="number">46915118179747</span>]</span><br><span class="line">A=Matrix(ZZ,nbits+<span class="number">1</span>,nbits+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    A[i,i]=<span class="number">2</span></span><br><span class="line">    A[i,-<span class="number">1</span>]=M[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits+<span class="number">1</span>):</span><br><span class="line">    A[-<span class="number">1</span>,i]=<span class="number">1</span></span><br><span class="line">A[-<span class="number">1</span>,-<span class="number">1</span>]=<span class="built_in">sum</span></span><br><span class="line">r=A.LLL()</span><br><span class="line"><span class="built_in">print</span>(r[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#(-1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 0)</span></span><br></pre></td></tr></table></figure><p>这里注意一下，第一行向量中是有+1与-1，需要进行取反，即-1代表1，1代表0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;前言&quot;&gt; 前言&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;在一次CTF比赛中遇到了，写了10个for嵌套硬爆出来了，复现的时候发现是背包加密。&lt;br&gt;
&lt;img src=&quot;/themes/pure/source/images/bag.png&quot; alt&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="非对称加密" scheme="https://sch01ar.github.io/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon 2022-㊙️BabySSS</title>
    <link href="https://sch01ar.github.io/2022/11/28/hitcon2022-BabySSS/"/>
    <id>https://sch01ar.github.io/2022/11/28/hitcon2022-BabySSS/</id>
    <published>2022-11-27T16:00:00.000Z</published>
    <updated>2022-11-28T09:46:25.947Z</updated>
    
    <content type="html"><![CDATA[<p>I implemented a toy Shamir’s Secret Sharing for fun. Can you help me check is there any issues with this?</p><h1><span id="shamirs-secret-sharing密钥分享算法"> Shamir’s Secret Sharing密钥分享算法</span></h1><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>…</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">f(x)=a_0 + a_1x + a_2x^2 + …… + a_{k-1} x^{k-1} mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1074389999999998em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span></span></span></span></span></p><h1><span id="题目源码"> 题目源码</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">rand = SystemRandom()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">polyeval</span>(<span class="params">poly, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a * x**i <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(poly)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DEGREE = <span class="number">128</span></span><br><span class="line">SHARES_FOR_YOU = <span class="number">8</span>  <span class="comment"># I am really stingy :)</span></span><br><span class="line"></span><br><span class="line">poly = [rand.getrandbits(<span class="number">64</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(DEGREE + <span class="number">1</span>)]</span><br><span class="line">shares = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(SHARES_FOR_YOU):</span><br><span class="line">    x = rand.getrandbits(<span class="number">16</span>)</span><br><span class="line">    y = polyeval(poly, x)</span><br><span class="line">    shares.append((x, y))</span><br><span class="line"><span class="built_in">print</span>(shares)</span><br><span class="line"></span><br><span class="line">secret = polyeval(poly, <span class="number">0x48763</span>)</span><br><span class="line">key = sha256(<span class="built_in">str</span>(secret).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_CTR)</span><br><span class="line"><span class="built_in">print</span>(cipher.encrypt(flag))</span><br><span class="line"><span class="built_in">print</span>(cipher.nonce)</span><br><span class="line"><span class="comment">#[(41458, 3015894889650529600470920314593280408459518223054415623846810748413393737686521849609926975694824777687791824408686652245102687392987299828716863372946074882798754477101786150262288970710451710086966378817944448615584285684364802621112755627795146504720812935041851556318832824799502759754100408717888912062197676588256634343721633045179136302533777168978134770315363985448879229514802330846792965525004570768212871252658334277172395338054448791891165981203069346039654617938169527772805687564575525262812469960675835101499054296722994451502140787064163668418661661374437567033971648550576296023422536253955229), (3389, 188433716494377932944071544153838579057591833387651830021721770473524507947811754295899393634645349682360212761145039355690817927625249659010181081209481357850193656763556243022791637306094953982811471415645267589939465925098159204147714779617946431727015863707468081949286110249296858079354949234074465541940264775783884708819566758872542606519408358277173683256608326688673226933790117016596834640875497643330432185114931410656582728964222203181026468387428893233826461), (20016, 100434774699078525844435127144579870564983915777345068724291926367405061427748836490810414860997895358378538088786283372231649911113841061354335739776409724471256377867811133591349442950556374825868587940833009529662869081130218551306459690738900795035660420986807973542512081415453215211908130387754214098414826747340962722685373241806099462750595976574593799013733614097923338311883793416643213898201680852118540438376386415411317989072583126108177482838299109479175882214603698768498421016054035672774286507312986602290254323930575001551875601243671354491241420409219), (50683, 444545881882748849210617532697661279371689521082184772844723908765173319859389018743414369945234307906596253496624659734919646710483514374218993496994560985318096082923429834553341897367168830049334302307406087637232329348570485341223211629167329394484624055745054495405880099706580380696671879365741197827080224977821589102425678989782880274304484630899425664722718972847034030888019348402685383311095030884356731112886316823960378572796288532824588478234949384868912708000223119984161992105752059185137674711077940232530298853451166664700609238496874366152042676602089571801873748042888046623717879084695143810047335029), (6445, 101461065764578261241074518788237888467081270902741849861528201922043223477790661159690684156056890167304291810116447916457265705130707166062372766839626095333813681671546097679623755546322833727082145873422243641505450049118758544298328784536759107951763715458884889255549767465897671061295486677353893450789955616926292534325337544782386120469581214993770910137353221116457111551538222138388416162630076391624447865248920466274175229034129561913505977209131490066291917549232913771218316393849495621818397), (1359, 301175604076484656987097022479686300460199620068959954988990822483114048418823291831080744590394713639405681060973359346474547015206086229256524657214311815578895906855833813636970640902962286472992468394831014254279137613828904924898823470285520515090889491445149243620044782726415898188702226878029241518020146726699446397961112596830223444821094650508662477147134721631935528182772284099429814417490160457082241680661), (45286, 244867719210730952183489456726726432791149629831242968845409984537752132549250274779516590253042559196452609852176114909791657154092483479876795482861784431886143414585698773882088948703730268947925790809436449512089696895048994874003651088538416399435467483409931121063976149037130454114161175715871108284419975118570732022104749321213013756795645219060997019373915339235627535694458093194617642834806820772479160496966470147893963746139947337914575231526069667124822677688977724313174612816604463495630041075005651663546036363128325535621487658461744362098985183050127661470315454320073092665472364666768205258769), (5649, 4766101906865350375503575239791521167258753430948472304582908507542293595346756303331383584550516424087839316050412570112796817549423179461056531056102741963677007097061600281918678364910813585444151640384802648969082273001142879806475184857246441212406056540028447374033197873299250076862108042582790928405869475508762352345569281589853917902601519294573327847401601789315980414998055948162169170771240383220643819333682845459742335249254576151835966500230706707674854493184181354958093926469960861)]</span></span><br><span class="line"><span class="comment">#b'G$\xf5\x9e\xa9\xb1e\xb5\x86w\xdfz\xbeP\xecJ\xb8wT&lt;&lt;\x84\xc5v\xb4\x02Z\xa4\xed\x8fB\x00[\xc0\x02\xf9\xc0x\x16\xf9\xa4\x02\xb8\xbb'</span></span><br><span class="line"><span class="comment">#b'\x8f\xa5z\xb4mZ\x97\xe9'</span></span><br></pre></td></tr></table></figure><h1><span id="题目分析"> 题目分析</span></h1><p>题目给了8组x，y的值，可通过CRT模x求出a_0 ，通过模x^2 可求出a_1 ，同理可求出所有系数，恢复出polyeval函数，从而得到正确的secret。</p><h1><span id="exp"> EXP</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">polyeval</span>(<span class="params">poly, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([a * x**i <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(poly)])</span><br><span class="line"></span><br><span class="line">shares = [(<span class="number">41458</span>, <span class="number">3015894889650529600470920314593280408459518223054415623846810748413393737686521849609926975694824777687791824408686652245102687392987299828716863372946074882798754477101786150262288970710451710086966378817944448615584285684364802621112755627795146504720812935041851556318832824799502759754100408717888912062197676588256634343721633045179136302533777168978134770315363985448879229514802330846792965525004570768212871252658334277172395338054448791891165981203069346039654617938169527772805687564575525262812469960675835101499054296722994451502140787064163668418661661374437567033971648550576296023422536253955229</span>), (<span class="number">3389</span>, <span class="number">188433716494377932944071544153838579057591833387651830021721770473524507947811754295899393634645349682360212761145039355690817927625249659010181081209481357850193656763556243022791637306094953982811471415645267589939465925098159204147714779617946431727015863707468081949286110249296858079354949234074465541940264775783884708819566758872542606519408358277173683256608326688673226933790117016596834640875497643330432185114931410656582728964222203181026468387428893233826461</span>), (<span class="number">20016</span>, <span class="number">100434774699078525844435127144579870564983915777345068724291926367405061427748836490810414860997895358378538088786283372231649911113841061354335739776409724471256377867811133591349442950556374825868587940833009529662869081130218551306459690738900795035660420986807973542512081415453215211908130387754214098414826747340962722685373241806099462750595976574593799013733614097923338311883793416643213898201680852118540438376386415411317989072583126108177482838299109479175882214603698768498421016054035672774286507312986602290254323930575001551875601243671354491241420409219</span>), (<span class="number">50683</span>, <span class="number">444545881882748849210617532697661279371689521082184772844723908765173319859389018743414369945234307906596253496624659734919646710483514374218993496994560985318096082923429834553341897367168830049334302307406087637232329348570485341223211629167329394484624055745054495405880099706580380696671879365741197827080224977821589102425678989782880274304484630899425664722718972847034030888019348402685383311095030884356731112886316823960378572796288532824588478234949384868912708000223119984161992105752059185137674711077940232530298853451166664700609238496874366152042676602089571801873748042888046623717879084695143810047335029</span>), (<span class="number">6445</span>, <span class="number">101461065764578261241074518788237888467081270902741849861528201922043223477790661159690684156056890167304291810116447916457265705130707166062372766839626095333813681671546097679623755546322833727082145873422243641505450049118758544298328784536759107951763715458884889255549767465897671061295486677353893450789955616926292534325337544782386120469581214993770910137353221116457111551538222138388416162630076391624447865248920466274175229034129561913505977209131490066291917549232913771218316393849495621818397</span>), (<span class="number">1359</span>, <span class="number">301175604076484656987097022479686300460199620068959954988990822483114048418823291831080744590394713639405681060973359346474547015206086229256524657214311815578895906855833813636970640902962286472992468394831014254279137613828904924898823470285520515090889491445149243620044782726415898188702226878029241518020146726699446397961112596830223444821094650508662477147134721631935528182772284099429814417490160457082241680661</span>), (<span class="number">45286</span>, <span class="number">244867719210730952183489456726726432791149629831242968845409984537752132549250274779516590253042559196452609852176114909791657154092483479876795482861784431886143414585698773882088948703730268947925790809436449512089696895048994874003651088538416399435467483409931121063976149037130454114161175715871108284419975118570732022104749321213013756795645219060997019373915339235627535694458093194617642834806820772479160496966470147893963746139947337914575231526069667124822677688977724313174612816604463495630041075005651663546036363128325535621487658461744362098985183050127661470315454320073092665472364666768205258769</span>), (<span class="number">5649</span>, <span class="number">4766101906865350375503575239791521167258753430948472304582908507542293595346756303331383584550516424087839316050412570112796817549423179461056531056102741963677007097061600281918678364910813585444151640384802648969082273001142879806475184857246441212406056540028447374033197873299250076862108042582790928405869475508762352345569281589853917902601519294573327847401601789315980414998055948162169170771240383220643819333682845459742335249254576151835966500230706707674854493184181354958093926469960861</span>)]</span><br><span class="line">c = <span class="string">b'G$\xf5\x9e\xa9\xb1e\xb5\x86w\xdfz\xbeP\xecJ\xb8wT&lt;&lt;\x84\xc5v\xb4\x02Z\xa4\xed\x8fB\x00[\xc0\x02\xf9\xc0x\x16\xf9\xa4\x02\xb8\xbb'</span></span><br><span class="line">cn = <span class="string">b'\x8f\xa5z\xb4mZ\x97\xe9'</span></span><br><span class="line">poly=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">129</span>):</span><br><span class="line">    x, y = <span class="built_in">zip</span>(*shares)</span><br><span class="line">    tmp=crt(x,y)[<span class="number">0</span>]</span><br><span class="line">    shares = [(x, (y - tmp) // x) <span class="keyword">for</span> x, y <span class="keyword">in</span> shares]</span><br><span class="line">    poly.append(tmp)</span><br><span class="line"></span><br><span class="line">secret = polyeval(poly, <span class="number">0x48763</span>)</span><br><span class="line">key = sha256(<span class="built_in">str</span>(secret).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_CTR,nonce=cn)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(c))</span><br><span class="line"><span class="comment">#hitcon{doing_SSS_in_integers_is_not_good_:(}</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I implemented a toy Shamir’s Secret Sharing for fun. Can you help me check is there any issues with this?&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;shamirs-secre</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Gauss格基约简算法</title>
    <link href="https://sch01ar.github.io/2022/11/24/Gauss%E6%A0%BC%E5%9F%BA%E7%BA%A6%E7%AE%80%E7%AE%97%E6%B3%95/"/>
    <id>https://sch01ar.github.io/2022/11/24/Gauss%E6%A0%BC%E5%9F%BA%E7%BA%A6%E7%AE%80%E7%AE%97%E6%B3%95/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T07:57:32.447Z</updated>
    
    <content type="html"><![CDATA[<p>由Gauss提出的二维格基约化算法</p><h1><span id="算法伪代码"> 算法伪代码</span></h1><p>即对给定的两个基向量进行不断的相互约化，最终求得格上的最小向量<br>Loop<br>(a) If ||v2|| &lt; ||v1||, swap v1, v2<br>(b) Compute m = ⌊ v1∙v2 / v1∙v1 ⌉<br>© If m = 0, return v1, v2<br>(d) v2 = v2 - m*v1<br>Continue Loop</p><h1><span id="代码实现"> 代码实现</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_norm</span>(<span class="params">a</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(a)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res = a[i] * a[i]</span><br><span class="line">        s += res</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gauss_reduction</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        v1_enorm = e_norm(v1)</span><br><span class="line">        v2_enorm = e_norm(v2)</span><br><span class="line">        <span class="keyword">if</span> v1_enorm &gt; v2_enorm:</span><br><span class="line">            v1, v2 = v2, v1</span><br><span class="line">            v1_enorm, v2_enorm = v2_enorm, v1_enorm</span><br><span class="line">        m = np.dot(v1, v2) / v1_enorm</span><br><span class="line">        m = <span class="built_in">int</span>(<span class="built_in">round</span>(m))</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;v1:&quot;</span> + <span class="built_in">str</span>(v1))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;v2:&quot;</span> + <span class="built_in">str</span>(v2))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v2 = v2 - np.dot(m, v1)</span><br><span class="line"><span class="comment">#最后输出的两个向量，v1即为格上最短向量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1><span id="例题"> 例题</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;crypto&#123;?????????????????????&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    upper_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    lower_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">4</span>))</span><br><span class="line">    f = random.randint(<span class="number">2</span>, upper_bound)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(lower_bound, upper_bound)</span><br><span class="line">        <span class="keyword">if</span> math.gcd(f, g) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (inverse(f, q)*g) % q</span><br><span class="line">    <span class="keyword">return</span> (q, h), (f, g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, h, m</span>):</span><br><span class="line">    <span class="keyword">assert</span> m &lt; <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    r = random.randint(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>)))</span><br><span class="line">    e = (r*h + m) % q</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">q, h, f, g, e</span>):</span><br><span class="line">    a = (f*e) % q</span><br><span class="line">    m = (a*inverse(f, g)) % g</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public, private = gen_key()</span><br><span class="line">q, h = public</span><br><span class="line">f, g = private</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line">e = encrypt(q, h, m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Public key: <span class="subst">&#123;(q,h)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Encrypted Flag: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Public key: (7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257, 2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800)</span></span><br><span class="line"><span class="string">Encrypted Flag: 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2><span id="思路"> 思路</span></h2><p>给定公钥q、h，以及明文e<br>要求私钥f、g<br>他们之间有如下关系：<br>fh ≡ g mod q<br>即 kq + g =fh<br>g = fh -kq<br>根据这一特点即可构造格，也就是格密码中很经典的，遇到一个向量乘矩阵，即可进行构造<br>由于存在一组a、b，使得a（1，h）+ b（0，q）=（f，g）<br>a = f，b = k<br>选取一组基底为（1，h）和（0，q），也就是上述高斯约简算法当中的v1与v2，求出v1与v2格上最小的向量，即为（f，g）</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">q = <span class="number">7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257</span></span><br><span class="line">h = <span class="number">2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800</span></span><br><span class="line">e = <span class="number">5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span></span><br><span class="line">u = np.array([<span class="number">1</span>,h])</span><br><span class="line">v = np.array([<span class="number">0</span>,q])</span><br><span class="line">gauss_reduction(u,v)</span><br><span class="line">f = <span class="number">47251817614431369468151088301948722761694622606220578981561236563325808178756</span></span><br><span class="line">g = <span class="number">43997957885147078115851147456370880089696256470389782348293341937915504254589</span></span><br><span class="line">m = decrypt(q,h,f,g,e)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#crypto&#123;Gauss_lattice_attack!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由Gauss提出的二维格基约化算法&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;算法伪代码&quot;&gt; 算法伪代码&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;即对给定的两个基向量进行不断的相互约化，最终求得格上的最小向量&lt;br&gt;
Loop&lt;br&gt;
(a) If ||v2|| &amp;lt; ||v1||, </summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="lattice" scheme="https://sch01ar.github.io/tags/lattice/"/>
    
  </entry>
  
  <entry>
    <title>二叉树建立与遍历</title>
    <link href="https://sch01ar.github.io/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <id>https://sch01ar.github.io/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/</id>
    <published>2022-11-09T16:00:00.000Z</published>
    <updated>2022-11-13T03:56:06.140Z</updated>
    
    <content type="html"><![CDATA[<p>网上很多算法通过直接将二叉树结点连接，从而构成二叉树，这里我构建了一个二叉树类，通过用户控制输入来建立二叉树。</p><p>有层序遍历，递归、非递归的前序遍历、中序遍历、后序遍历算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Binarytreenode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">        Binarytreenode *leftchild;</span><br><span class="line">        Binarytreenode *rightchild;</span><br><span class="line">        <span class="built_in">Binarytreenode</span>()&#123;&#125;;</span><br><span class="line">        <span class="built_in">Binarytreenode</span>(<span class="type">const</span> <span class="type">int</span> &amp;a,Binarytreenode *l=<span class="literal">NULL</span>,Binarytreenode*r=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;data=a;</span><br><span class="line">            <span class="keyword">this</span>-&gt;leftchild=l;</span><br><span class="line">            <span class="keyword">this</span>-&gt;rightchild=r;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Binarytreenode *root;</span><br><span class="line">        <span class="built_in">BinaryTree</span>()&#123;root =<span class="keyword">new</span>  Binarytreenode;&#125;;</span><br><span class="line">        ~<span class="built_in">BinaryTree</span>()&#123;<span class="keyword">delete</span>[]root;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(Binarytreenode*t)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout&lt;&lt;t-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Binarytreenode* <span class="title">creatTree</span><span class="params">(Binarytreenode* temp)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;请输入2叉树结点的值,输入-1以表示停止创建某子树&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;n;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp = <span class="keyword">new</span> Binarytreenode;</span><br><span class="line">                temp-&gt;data=n;</span><br><span class="line">                temp-&gt;leftchild=<span class="built_in">creatTree</span>(temp-&gt;leftchild);</span><br><span class="line">                temp-&gt;rightchild=<span class="built_in">creatTree</span>(temp-&gt;rightchild);</span><br><span class="line">                &#125;</span><br><span class="line">            root=temp;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            queue &lt;Binarytreenode *&gt; nodeQueue;</span><br><span class="line">            Binarytreenode *p=root;</span><br><span class="line">            <span class="keyword">if</span> (p)</span><br><span class="line">                nodeQueue.<span class="built_in">push</span>(p);</span><br><span class="line">            <span class="keyword">while</span>(!nodeQueue.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                p=nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">                <span class="built_in">visit</span>(p);</span><br><span class="line">                nodeQueue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;leftchild)</span><br><span class="line">                &#123;</span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;rightchild)</span><br><span class="line">                &#123;</span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">preOrder0</span><span class="params">(Binarytreenode *root)</span><span class="comment">//先序递归</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(root);</span><br><span class="line">                <span class="built_in">preOrder0</span>(root-&gt;leftchild);</span><br><span class="line">                <span class="built_in">preOrder0</span>(root-&gt;rightchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">inOrder0</span><span class="params">(Binarytreenode *root)</span><span class="comment">//中序递归</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">inOrder0</span>(root-&gt;leftchild);</span><br><span class="line">                <span class="built_in">visit</span>(root);</span><br><span class="line">                <span class="built_in">inOrder0</span>(root-&gt;rightchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">postOrder0</span><span class="params">(Binarytreenode *root)</span><span class="comment">//后序递归</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">postOrder0</span>(root-&gt;leftchild);</span><br><span class="line">                <span class="built_in">postOrder0</span>(root-&gt;rightchild);</span><br><span class="line">                <span class="built_in">visit</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">preOrder1</span><span class="params">(Binarytreenode *root)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            stack&lt;Binarytreenode *&gt;nodeStack;</span><br><span class="line">            Binarytreenode *p=root;</span><br><span class="line">            <span class="keyword">while</span> (!nodeStack.<span class="built_in">empty</span>()||p)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(p)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">visit</span>(p);<span class="comment">//先访问当前结点，也就是根</span></span><br><span class="line">                    <span class="keyword">if</span> (p-&gt;rightchild!=<span class="literal">NULL</span>)<span class="comment">//若右子树不空，则先存到栈中</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        nodeStack.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">                    &#125;</span><br><span class="line">                    p=p-&gt;leftchild;<span class="comment">//p指向左子树，开始访问。</span></span><br><span class="line">                &#125;<span class="keyword">else</span><span class="comment">//左子树遍历完毕后，进行弹栈，继续遍历</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p=nodeStack.<span class="built_in">top</span>();</span><br><span class="line">                    nodeStack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">inOrder1</span><span class="params">(Binarytreenode *root)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            stack&lt;Binarytreenode *&gt;nodeStack;</span><br><span class="line">            Binarytreenode *p=root;</span><br><span class="line">            <span class="keyword">while</span> (!nodeStack.<span class="built_in">empty</span>()||p)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(p)</span><br><span class="line">                &#123;</span><br><span class="line">                    nodeStack.<span class="built_in">push</span>(p);<span class="comment">//一路向左全压栈。</span></span><br><span class="line">                    p=p-&gt;leftchild;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p=nodeStack.<span class="built_in">top</span>();</span><br><span class="line">                    <span class="built_in">visit</span>(p);</span><br><span class="line">                    p=p-&gt;rightchild;</span><br><span class="line">                    nodeStack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">postOrder1</span><span class="params">(Binarytreenode *root)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            stack&lt;Binarytreenode *&gt;nodeStack;</span><br><span class="line">            Binarytreenode *p=root;</span><br><span class="line">            Binarytreenode *pre=root;</span><br><span class="line">            <span class="keyword">while</span> (p)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(p-&gt;leftchild!=<span class="literal">NULL</span>)<span class="comment">//向左搜索全压栈，直到没有左子树。</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nodeStack.<span class="built_in">push</span>(p);</span><br><span class="line">                    p=p-&gt;leftchild;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//读取栈顶，访问右子树</span></span><br><span class="line">                <span class="keyword">while</span> (p!=<span class="literal">NULL</span>&amp;&amp; (p-&gt;rightchild==<span class="literal">NULL</span> || p-&gt;rightchild==pre))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">visit</span>(p);</span><br><span class="line">                    pre=p;</span><br><span class="line">                    <span class="keyword">if</span> (nodeStack.<span class="built_in">empty</span>())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p=nodeStack.<span class="built_in">top</span>();</span><br><span class="line">                    nodeStack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                nodeStack.<span class="built_in">push</span>(p);</span><br><span class="line">                p=p-&gt;rightchild;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BinaryTree t1;</span><br><span class="line">    t1.<span class="built_in">creatTree</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;层次遍历:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">levelOrder</span>();</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;前序遍历(递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">preOrder0</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;前序遍历(非递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">preOrder1</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;中序遍历(递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">inOrder0</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;中序遍历(非递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">inOrder0</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;后序遍历(递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">postOrder0</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;后序遍历(非递归):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    t1.<span class="built_in">postOrder0</span>(t1.root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//      1</span></span><br><span class="line"><span class="comment">//   2     3</span></span><br><span class="line"><span class="comment">// 4  5       7</span></span><br><span class="line"><span class="comment">//输入1 2 4 -1 -1 5 -1 -1 3 -1 7 -1 -1</span></span><br><span class="line"><span class="comment">//层序: 1 2 3 4 5 7</span></span><br><span class="line"><span class="comment">//前序: 1 2 4 5 3 7</span></span><br><span class="line"><span class="comment">//中序: 4 2 5 1 3 7</span></span><br><span class="line"><span class="comment">//后序: 4 5 2 7 3 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网上很多算法通过直接将二叉树结点连接，从而构成二叉树，这里我构建了一个二叉树类，通过用户控制输入来建立二叉树。&lt;/p&gt;
&lt;p&gt;有层序遍历，递归、非递归的前序遍历、中序遍历、后序遍历算法。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://sch01ar.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二叉树" scheme="https://sch01ar.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2022祥云杯wp-crypto</title>
    <link href="https://sch01ar.github.io/2022/10/30/2022-10-30-2022%E7%A5%A5%E4%BA%91%E6%9D%AFwp-crypto/"/>
    <id>https://sch01ar.github.io/2022/10/30/2022-10-30-2022%E7%A5%A5%E4%BA%91%E6%9D%AFwp-crypto/</id>
    <published>2022-10-29T16:00:00.000Z</published>
    <updated>2022-10-31T03:03:19.593Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="little-little-fermat"> little little fermat</span></h1><h2><span id="题目源码"> 题目源码</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;?????????&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">obfuscate</span>(<span class="params">p, k</span>):</span><br><span class="line">    nbit = p.bit_length()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        l1 = [getRandomRange(-<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;_&#x27;</span> * k]</span><br><span class="line">        l2 = [getRandomRange(<span class="number">100</span>, nbit) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;_&#x27;</span> * k]</span><br><span class="line">        l3 = [getRandomRange(<span class="number">10</span>, nbit//<span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;_&#x27;</span> * k]</span><br><span class="line">        l4 = [getRandomRange(<span class="number">2</span>, <span class="number">6</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;_&#x27;</span> *k]</span><br><span class="line">        A = <span class="built_in">sum</span>([l1[_] * <span class="number">2</span> ** ((l2[_]+l3[_])//l4[_]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k)])</span><br><span class="line">        q = p + A</span><br><span class="line">        <span class="keyword">if</span> isPrime(q) * A != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = obfuscate(p, <span class="number">5</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">114514</span> ** x % p == <span class="number">1</span></span><br><span class="line">m = m ^ (x**<span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393</span></span><br><span class="line"><span class="string">c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2><span id="题目分析"> 题目分析</span></h2><p>根据题目名字来看，此题和费马小定理的使用有关，题目中有一个<code> obfuscate</code>函数，进行了对q的生成，<code>q=p+A</code>，这里可以看一下A的范围，是在2<sup>[18,319]</sup>之间，因此p、q接近，尝试一下yafu分解。</p><p><img src="/themes/pure/source/images/20221030.jpg" alt><br>题目对m先进行了处理，再进行RSA加密，因此我们需要知道x。<code>assert 114514 ** x % p == 1</code>运用费马小定理，若114514与p互素，则x=p-1，即可求解m。</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n = <span class="number">141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393</span></span><br><span class="line">c = <span class="number">81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883</span></span><br><span class="line">p = <span class="number">11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734648016476153593841839977704512156756634066593725142934001</span></span><br><span class="line">q = <span class="number">11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734646483980612727952939084061619889139517526028673988305393</span></span><br><span class="line"><span class="built_in">print</span>(math.gcd(p,<span class="number">114514</span>))</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">x=p-<span class="number">1</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m0=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m=m0^(x**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;I~ju5t_w@nt_30_te11_y0u_how_I_@m_f3ll1ng~&#125;</span></span><br></pre></td></tr></table></figure><h1><span id="fill"> fill</span></h1><h2><span id="题目源码"> 题目源码</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> dot</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">32</span></span><br><span class="line">msg = getRandomNBitInteger(nbits)</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;sha256(msg)&#125;&#x27;</span></span><br><span class="line">tmp_m = <span class="built_in">bin</span>(msg)[<span class="number">2</span>:]</span><br><span class="line">f_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp_m)):</span><br><span class="line">    f_list.append(<span class="built_in">int</span>(tmp_m[i]))</span><br><span class="line"></span><br><span class="line">r_list =[randint(<span class="number">20</span>, <span class="number">50</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits - <span class="number">1</span>):</span><br><span class="line">    r_list.append(randint(<span class="number">2</span> * r_list[-<span class="number">1</span>], <span class="number">3</span> * r_list[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    A = randint(<span class="number">2</span> * r_list[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">3</span> * r_list[-<span class="number">1</span>])</span><br><span class="line">    B = randint(<span class="number">2</span> * r_list[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">3</span> * r_list[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> gcd(A, B) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">M = [A * x % B <span class="keyword">for</span> x <span class="keyword">in</span> r_list]</span><br><span class="line"></span><br><span class="line">S = dot(f_list, M)</span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line">seed = getRandomNBitInteger(<span class="number">30</span>)</span><br><span class="line">s = [<span class="number">0</span>] * nbits</span><br><span class="line">s[<span class="number">0</span>] = seed</span><br><span class="line">m = getRandomNBitInteger(<span class="number">20</span>)</span><br><span class="line">c = getPrime(<span class="number">24</span>)</span><br><span class="line">n = <span class="number">991125622</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nbits):</span><br><span class="line">    s[i] = (s[i-<span class="number">1</span>]*m+c)%n</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    M[t] = M[t] + s[t]</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">492226042629702</span></span><br><span class="line"><span class="string">562734112 859151551 741682801</span></span><br><span class="line"><span class="string">M = [19621141192340, 39617541681643, 3004946591889, 6231471734951, 3703341368174, 48859912097514, 4386411556216, 11028070476391, 18637548953150, 29985057892414, 20689980879644, 20060557946852, 46908191806199, 8849137870273, 28637782510640, 35930273563752, 20695924342882, 36660291028583, 10923264012354, 29810154308143, 4444597606142, 31802472725414, 23368528779283, 15179021971456, 34642073901253, 44824809996134, 31243873675161, 27159321498211, 2220647072602, 20255746235462, 24667528459211, 46916059974372]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2><span id="题目分析"> 题目分析</span></h2><p>随机产生32位的数，sha256()加密后作为flag，并将其2进制的每一位存到了<code>f_list</code>数组中。</p><p>又 创建了一个<code>r_list</code>32位数组，里面存着随机数，先暂时不管。</p><p>双 对<code>r_list</code>数组中的随机数做了加密，产生了<code>M</code>数组。</p><p>对<code>f_list</code>和<code>M</code>数组进行了<code>numpy.dot</code>运算，即向量乘法，得到和为S。</p><p>叒 创建了一个<code>s</code>数组，这个很明显，用LCG线性同余算法进行了加密。</p><p>最后将<code>M</code>数组与<code>s</code>数组相加。</p><p>这就是这道题整体的流程，每一步并不难，只是步骤多，略显复杂。</p><h2><span id="exp"> EXP</span></h2><h3><span id="0x01"> 0x01</span></h3><p>可以先进行一下LCG的求解，把s数组求解出来，从而求出M数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">991125622</span></span><br><span class="line">output =[<span class="number">562734112</span>,<span class="number">859151551</span>,<span class="number">741682801</span>]</span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line">a=(output[<span class="number">2</span>]-output[<span class="number">1</span>])*MMI((output[<span class="number">1</span>]-output[<span class="number">0</span>]),n)%n</span><br><span class="line">ani=MMI(a,n)</span><br><span class="line">b=(output[<span class="number">1</span>]-a*output[<span class="number">0</span>])%n</span><br><span class="line"></span><br><span class="line">seed = <span class="number">562734112</span></span><br><span class="line">a=<span class="number">55365664</span></span><br><span class="line">b= <span class="number">8712091</span></span><br><span class="line">s = [<span class="number">0</span>] * nbits</span><br><span class="line">s[<span class="number">0</span>] = seed</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nbits):</span><br><span class="line">    s[i] = (s[i-<span class="number">1</span>]*a+b)%n</span><br><span class="line">M = [<span class="number">19621141192340</span>, <span class="number">39617541681643</span>, <span class="number">3004946591889</span>, <span class="number">6231471734951</span>, <span class="number">3703341368174</span>, <span class="number">48859912097514</span>, <span class="number">4386411556216</span>, <span class="number">11028070476391</span>, <span class="number">18637548953150</span>, <span class="number">29985057892414</span>, <span class="number">20689980879644</span>, <span class="number">20060557946852</span>, <span class="number">46908191806199</span>, <span class="number">8849137870273</span>, <span class="number">28637782510640</span>, <span class="number">35930273563752</span>, <span class="number">20695924342882</span>, <span class="number">36660291028583</span>, <span class="number">10923264012354</span>, <span class="number">29810154308143</span>, <span class="number">4444597606142</span>, <span class="number">31802472725414</span>, <span class="number">23368528779283</span>, <span class="number">15179021971456</span>, <span class="number">34642073901253</span>, <span class="number">44824809996134</span>, <span class="number">31243873675161</span>, <span class="number">27159321498211</span>, <span class="number">2220647072602</span>, <span class="number">20255746235462</span>, <span class="number">24667528459211</span>, <span class="number">46916059974372</span>]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    M[t] = M[t] - s[t]</span><br></pre></td></tr></table></figure><h3><span id="0x02"> 0x02</span></h3><p>按理来说，感觉应该根据求出来的<code>M</code>数组进行逆运算，求出<code>r_list</code>数组，但是求出来<code>r_list</code>有什么用呢，所以直接尝试求<code>f_list</code>。因为<code>f_list</code>中不是0就是1，与<code>M</code>做向量乘法，即为<code>M</code>数组中若干元素的和。根据题目给定和S，先大概看一下需要<code>M</code>中多少个元素累加。发现在M前21位和 &lt; S，前22位和 &gt; S，所以猜想应该是M当中，除10个左右元素之外的和。</p><p>这里就遍历了一下，复杂度实在太高了，也没想着能出，结果还真算出来了o.O</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">     <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(a,nbits):</span><br><span class="line">         <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(b,nbits):</span><br><span class="line">             <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(c,nbits):</span><br><span class="line">                 <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(d,nbits):</span><br><span class="line">                     <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(e,nbits):</span><br><span class="line">                         <span class="keyword">for</span> g <span class="keyword">in</span> <span class="built_in">range</span>(f,nbits):</span><br><span class="line">                             <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(g,nbits):</span><br><span class="line">                                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h,nbits):</span><br><span class="line">                                     <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,nbits):</span><br><span class="line">                                         <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j,nbits):</span><br><span class="line">                                             <span class="keyword">if</span> M[a]+M[b]+M[c]+M[d]+M[e]+M[f]+M[g] +M[h] + M[i] +M[j] +M[k] == <span class="built_in">sum</span>-S:</span><br><span class="line">                                                 <span class="built_in">print</span>(a,b,c,d,e,f,g,h,i,j,k)</span><br><span class="line">                                                 <span class="keyword">break</span></span><br><span class="line"><span class="comment">#2 4 9 10 15 19 24 27 28 30 31</span></span><br></pre></td></tr></table></figure><p>也就说明，<code>f_list</code>中下标为这些的，对应值是0，其余为1，即可得到msg的2进制数，转为十进制后进行<code>sha256()</code>加密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = [<span class="string">&#x27;1&#x27;</span>] * nbits</span><br><span class="line">f[<span class="number">2</span>]=f[<span class="number">4</span>]=f[<span class="number">9</span>]=f[<span class="number">10</span>]=f[<span class="number">15</span>]=f[<span class="number">19</span>]=f[<span class="number">24</span>]=f[<span class="number">27</span>]=f[<span class="number">28</span>]=f[<span class="number">30</span>]=f[<span class="number">31</span>]=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">a=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    a+=f[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#3617517412</span></span><br><span class="line"><span class="comment">#sha256加密后：8f504aee71626212f275117326722b6c0ccc94f4039ed31fbcfde08e026352c4，套上flag&#123;&#125;提交即可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;little-little-fermat&quot;&gt; little little fermat&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;题目源码&quot;&gt; 题目源码&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2022NewStarCTF-flip_flop</title>
    <link href="https://sch01ar.github.io/2022/10/27/2022NewStarCTF-flip_flop/"/>
    <id>https://sch01ar.github.io/2022/10/27/2022NewStarCTF-flip_flop/</id>
    <published>2022-10-26T16:00:00.000Z</published>
    <updated>2022-10-27T06:19:54.682Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="flip-flop"> flip-flop</span></h1><p>AES-CBC加密模式</p><h2><span id="题目"> 题目</span></h2><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line">auth_major_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Login as admin to get the flag ! </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">MENU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Enter your choice</span></span><br><span class="line"><span class="string">[1] Create NewStarCTF Account</span></span><br><span class="line"><span class="string">[2] Create Admin Account</span></span><br><span class="line"><span class="string">[3] Login</span></span><br><span class="line"><span class="string">[4] Exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(MENU)</span><br><span class="line"></span><br><span class="line">    option = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">        auth_pt = <span class="string">b&#x27;NewStarCTFer____&#x27;</span></span><br><span class="line">        user_key = os.urandom(<span class="number">16</span>)</span><br><span class="line">        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)</span><br><span class="line">        code = cipher.encrypt(auth_pt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;here is your authcode: <span class="subst">&#123;user_key.<span class="built_in">hex</span>() + code.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;GET OUT !!!!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">        authcode = <span class="built_in">input</span>(<span class="string">&#x27;Enter your authcode &gt; &#x27;</span>)</span><br><span class="line">        user_key = <span class="built_in">bytes</span>.fromhex(authcode)[:<span class="number">16</span>]</span><br><span class="line">        code = <span class="built_in">bytes</span>.fromhex(authcode)[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)</span><br><span class="line">        auth_pt = cipher.decrypt(code)</span><br><span class="line">        <span class="keyword">if</span> auth_pt == <span class="string">b&#x27;AdminAdmin______&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(FLAG)</span><br><span class="line">        <span class="keyword">elif</span> auth_pt == <span class="string">b&#x27;NewStarCTFer____&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Have fun!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Who are you?&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ByeBye&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WTF&quot;</span>)</span><br></pre></td></tr></table></figure><h2><span id="题目分析"> 题目分析</span></h2><p>此题是通过注册得到的用户账户的密文，然后输入管理员账户对应的密文，才能得到flag。<br>对用户账户和管理员账户的加密解密均采用AES-CBC模式，但是本题仅有一组明文，iv仅作为偏移量，也就是本题中的user_key。</p><p>这里先来说一下我最一开始的思路，由于user_key每次是随机产生的，但是一次程序的运行当中是不变的。由于密文由两部分组成，前半部分为user_key.hex()，后半部分为code.hex()，所以只要构造出admin对应的code即可，那么就需要AES加密当中的key，所以就需要构造一个key来产生出admin对应的code。查询了很多资料发现都难以实现。于是……</p><p>那为什么不换一下思路？不能构造code，能不能构造iv？<br>先来看一下加密方式：<br>C = encrypt(M ^ iv)<br>M = decrypt©^iv<br>对应一下本题当中的NewStarCTFer和admin：<br><code>b'NewStarCTFer____' = decrypt(code) ^ iv1</code><br><code>b'AdminAdmin______' = decrypt(code) ^ iv2</code><br>因此可求出admin对应的iv2，随后拼接上普通用户的后半段code即可。</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">authcode= <span class="string">&quot;4f72b2079005a15e30efb3febea8cda266f4c3b47147e79167c3cde81ca84a4b&quot;</span></span><br><span class="line">n=bytes_to_long(<span class="string">b&#x27;NewStarCTFer____&#x27;</span>)</span><br><span class="line">a=bytes_to_long(<span class="string">b&#x27;AdminAdmin______&#x27;</span>)</span><br><span class="line">iv1= <span class="built_in">int</span>(authcode[:<span class="built_in">len</span>(authcode)//<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">code = authcode[<span class="built_in">len</span>(authcode)//<span class="number">2</span>:]</span><br><span class="line">decode = iv1 ^ n</span><br><span class="line">iv2 = a ^ decode</span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">hex</span>(iv2)+code)[<span class="number">2</span>:])</span><br><span class="line"><span class="comment">#flag&#123;filp_the_word!!!!!!!!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;flip-flop&quot;&gt; flip-flop&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;AES-CBC加密模式&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;题目&quot;&gt; 题目&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记20221026</title>
    <link href="https://sch01ar.github.io/2022/10/26/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221026/"/>
    <id>https://sch01ar.github.io/2022/10/26/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221026/</id>
    <published>2022-10-25T16:00:00.000Z</published>
    <updated>2022-10-26T13:06:22.603Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="rsa5"> RSA5</span></h1><h2><span id="题目分析"> 题目分析</span></h2><p>给定e=65537<br>给了很多组n、c<br>由于e过大，所以不考虑使用CRT，由于m是同一个，因此遍历一下，求出两个n的最大公约数，即为p，后续就简单了。</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c1 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c2 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c3 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c4 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c5 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c6 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c7 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c8 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c9 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c10 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c11 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c12 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c13 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c14 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c15 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c16 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c17 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c18= <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c19 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n20 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c20 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line">n=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> math.gcd(n[i],n[j]) &gt; <span class="number">1</span>:</span><br><span class="line">            p=math.gcd(n[i],n[j])</span><br><span class="line">            <span class="built_in">print</span>(i,j,p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#i=4,j=17</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">q = n[<span class="number">4</span>]// p</span><br><span class="line">phi4=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi4)</span><br><span class="line">m=<span class="built_in">pow</span>(c5,d,n[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;rsa5&quot;&gt; RSA5&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;题目分析&quot;&gt; 题目分析&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;给定e=65537&lt;br&gt;
给了很多组n、c&lt;br&gt;
由于e过大，所以不考虑使用CRT，由于m是同一个，因此遍历一下，求出</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="diary" scheme="https://sch01ar.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2022 DASCTF 10月挑战赛wp</title>
    <link href="https://sch01ar.github.io/2022/10/23/2022DASCTF10%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bwp/"/>
    <id>https://sch01ar.github.io/2022/10/23/2022DASCTF10%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bwp/</id>
    <published>2022-10-22T16:00:00.000Z</published>
    <updated>2022-10-24T00:33:47.654Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="rsa"> RSA</span></h1><h2><span id="题目如下"> 题目如下</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">n_2 = <span class="number">675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span></span><br><span class="line">n_3 = <span class="number">91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span></span><br><span class="line">e_1 = <span class="number">65537</span></span><br><span class="line">e_2 = <span class="number">3</span></span><br><span class="line">c_1 = <span class="number">47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span></span><br><span class="line">c_2 = <span class="number">332431</span></span><br><span class="line">c_3 = <span class="number">11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span></span><br><span class="line">m = <span class="number">9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span></span><br><span class="line">k = <span class="number">8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">n</span>):</span><br><span class="line">    n1 = <span class="built_in">hex</span>(n&gt;&gt;<span class="number">200</span>).encode()</span><br><span class="line">    n2 = <span class="built_in">str</span>(<span class="built_in">hex</span>(n))[<span class="number">20</span>:].encode()</span><br><span class="line">    <span class="keyword">return</span> n1,n2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">m , n_1</span>):</span><br><span class="line">    c_1 = <span class="built_in">pow</span>(m,e_1,n_1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c_1 = &#x27;</span>+<span class="built_in">str</span>(c_1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt3</span>(<span class="params">m , n_2</span>):</span><br><span class="line">    c_2 = <span class="built_in">pow</span>( m , e_2 , n_2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c_2 = &#x27;</span>+<span class="built_in">str</span>(c_2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt4</span>(<span class="params">m</span>):</span><br><span class="line">    k = getPrime(<span class="number">512</span>)</span><br><span class="line">    m = m % k</span><br><span class="line">    c_3 = <span class="built_in">pow</span>(m, e_2, n_3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c_3 = &#x27;</span> + <span class="built_in">str</span>(c_3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;k = &#x27;</span> + <span class="built_in">str</span>(k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1,m2 = encrypt1(flag)</span><br><span class="line">m1 = bytes_to_long(m1)</span><br><span class="line">m2 = bytes_to_long(m2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n_2 = &#x27;</span> + <span class="built_in">str</span>(n_2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n_3 = &#x27;</span> + <span class="built_in">str</span>(n_3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e_1 = &#x27;</span> + <span class="built_in">str</span>(e_1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e_2 = &#x27;</span> + <span class="built_in">str</span>(e_2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encrypt2(m1,n_1)</span><br><span class="line">encrypt3(n_1,n_2)</span><br><span class="line">encrypt4(m2)</span><br></pre></td></tr></table></figure><h2><span id="题目分析"> 题目分析</span></h2><p>改题的加密顺序是：<br>1、加密flag，分为两部分m1、m2<br>2、加密m1<br>3、加密m2<br>同理我们解密的顺序应该也是<br>1、解出m1、m2<br>2、解出flag</p><h3><span id="求m2"> 求m2</span></h3><p>先观察一下encrypt4函数<br>虽然说e_2=3，按理来说使用低加密指数攻击，但并不可行。<br>又因为m = m % k<br>可通过这点和<code>c_3 = pow(m, e_2, n_3)</code>做遍历求出m<br>最后发现m即为m2，m2 &lt; k</p><h3><span id="求m1"> 求m1</span></h3><p>发现m1加密方式采用RSA，但是n_1未知<br>n_1又通过一次RSA加密，已知n_1对应的密文<br>利用低加密指数攻击解出n1<br>发现n1可分解为3个素数乘积<br>故phi可求，即求出m1</p><h3><span id="求flag"> 求flag</span></h3><p>观察encryt1<br>m1是flag右移200位之后转为字节<br>m2是flag的20位之后转成字节<br>所以来说m2是没什么问题，主要找到flag的前20位，再把m2拼到后面即可。<br>由于m1是flag右移200位，因此flag的低位缺失，但高位还在，由于不知道flag总长度，抱着试一试的心态，猜测一下它的高位前20位没有缺失<br>我们将m1和m2转为字节发现<br>m1:b’0x666c61677b3230366538353964’<br>m2:b’383539643865383534633466363030636231323735376262663966357d’<br>发现m1和m2有重叠部分，即38353开始<br>可以证实m1前20位确实没有缺失<br>因此取m1前20位，加m2，即可解出flag</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ByteString</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n_2 = <span class="number">675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span></span><br><span class="line">e_2=<span class="number">3</span></span><br><span class="line">c_1 = <span class="number">47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span></span><br><span class="line">c_2 = <span class="number">332431</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        m1=c+n*i</span><br><span class="line">        result,flag=gmpy2.iroot(m1,e)</span><br><span class="line">        <span class="keyword">if</span> flag==<span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n_1=<span class="number">70406706457855863712635967741447303613971473150228480705119773604469794649140239446237334040048504811343327173817296308781190911727763110615393368497803655390445303946160971</span></span><br><span class="line">p_1=<span class="number">2732337821</span></span><br><span class="line">e_1 = <span class="number">65537</span></span><br><span class="line">t_1=<span class="number">2224243981</span></span><br><span class="line">q_1=<span class="number">11585031296201346891716939633970482508158508580350404805965250133832632323150440185890235814142601827544669601048550999405490149435265122374459158586377571</span></span><br><span class="line">phi_1=(p_1-<span class="number">1</span>)*(q_1-<span class="number">1</span>)*(t_1-<span class="number">1</span>)</span><br><span class="line">d_1=gmpy2.invert(e_1,phi_1)</span><br><span class="line">m1=<span class="built_in">pow</span>(c_1,d_1,n_1)</span><br><span class="line">c=<span class="built_in">pow</span>(m1,e_1,n_1)</span><br><span class="line"></span><br><span class="line">n_3 = <span class="number">91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span></span><br><span class="line">c_3 = <span class="number">11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span></span><br><span class="line">m = <span class="number">9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span></span><br><span class="line">k = <span class="number">8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span></span><br><span class="line">m2=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)[:<span class="number">20</span>])</span><br><span class="line">m=<span class="number">0x666c61677b32303665383539643865383534633466363030636231323735376262663966357d</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;383539643865383534633466363030636231323735376262663966357d&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;0x666c61677b32303665&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;206e859d8e854c4f600cb12757bbf9f5&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;rsa&quot;&gt; RSA&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;题目如下&quot;&gt; 题目如下&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记20221022</title>
    <link href="https://sch01ar.github.io/2022/10/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221022/"/>
    <id>https://sch01ar.github.io/2022/10/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221022/</id>
    <published>2022-10-21T16:00:00.000Z</published>
    <updated>2022-10-22T12:47:51.674Z</updated>
    
    <content type="html"><![CDATA[<p>(先表示一下对RNG3:0输掉t1的遗憾，另外，EDG加油)</p><h1><span id="rsa4"> RSA4</span></h1><p>题目只给了三组n、c，采用中国剩余定理，具体推导如下</p><h2><span id="推导过程"> 推导过程</span></h2><p>m^e ≡ c1 mod n1<br>m^e ≡ c2 mod n2<br>m^e ≡ c3 mod n3</p><h3><span id="中国剩余定理crt"> 中国剩余定理（CRT）</span></h3><p>中国剩余定理的内容是：<br>针对上述方程组，若n1、n2、n3互质，对于任意的c1、c2、c3，方程组都有解，使用条件是m^e &lt; n1、n2、n3。通解形式如下：</p><p>令N = n1 * n2 * n3，N1 = N/n1，N2、N3同理<br>令t1 = N1^(-1)，即其对应的模n1运算的逆元，t2，t3同理，可用<code>t1=gmpy2.invert(N1,n1)</code>表示。</p><p>有了Ni和ti的定义，我们就可以给出通解形式：<br>x = c1 * N1 * t1 ……<br>有了通解公式我们就可以求出m^e，对e进行一下遍历即可，m开方成功即可。</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="string">&#x27;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&#x27;</span></span><br><span class="line">c1 = <span class="string">&#x27;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&#x27;</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="string">&#x27;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&#x27;</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="string">&#x27;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&#x27;</span></span><br><span class="line">c1=<span class="built_in">int</span>(c1,<span class="number">5</span>)</span><br><span class="line">n1=<span class="built_in">int</span>(n1,<span class="number">5</span>)</span><br><span class="line">c2=<span class="built_in">int</span>(c2,<span class="number">5</span>)</span><br><span class="line">n2=<span class="built_in">int</span>(n2,<span class="number">5</span>)</span><br><span class="line">c3=<span class="built_in">int</span>(c3,<span class="number">5</span>)</span><br><span class="line">n3=<span class="built_in">int</span>(n3,<span class="number">5</span>)</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">n=[n1,n2,n3]</span><br><span class="line">c=[c1,c2,c3]</span><br><span class="line">resultant,mod= crt(n, c)</span><br><span class="line"><span class="comment"># 有现成的库函数可以调用</span></span><br><span class="line"><span class="built_in">print</span>(gmpy2.iroot(resultant, e))</span><br><span class="line">m=<span class="number">259362307225540148883586283191025214233097658309244310540770399135748418469298031742173624766441014006294782333</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#noxCTF&#123;D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(先表示一下对RNG3:0输掉t1的遗憾，另外，EDG加油)&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;rsa4&quot;&gt; RSA4&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;题目只给了三组n、c，采用中国剩余定理，具体推导如下&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;推导过程&quot;&gt; 推导过程&lt;/spa</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="diary" scheme="https://sch01ar.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记20221021</title>
    <link href="https://sch01ar.github.io/2022/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221021/"/>
    <id>https://sch01ar.github.io/2022/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221021/</id>
    <published>2022-10-20T16:00:00.000Z</published>
    <updated>2022-10-21T09:09:16.105Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="rsa2"> RSA2</span></h1><p>题目给定n、e、dp、c<br>非预期解：直接分解n<br>下面考虑n不能分解的情况</p><h2><span id="推导过程"> 推导过程</span></h2><p>dp ≡ d mod (p-1)<br>ed ≡ 1 mod (p-1) * (q-1)<br>ed = 1 + k2(p-1)(q-1)<br>对1式两端同乘e，得<br>e * dp ≡ ed mod (p-1)<br>e * dp = k1(p-1) + ed<br>代入ed得<br>e * dp = k1(p-1) + 1 + k2(p-1)(q-1)<br>由于两个未知数略显麻烦，发现公因子(p-1)，等式两边同时取余p-1，即可消掉n<br>e * dp ≡ 1 mod (p-1)<br>e * dp =k(p-1) + 1<br>得到这个式子后，其实真正意义上的未知数只有我们要求的p，但是还存在一个k。<br>针对k，我们判断一下他的范围，看看能否采用爆破的方式。<br>k = (e * dp - 1)/(p-1)<br>因为dp &lt; p-1<br>所以k &lt; e<br>通过遍历k然后找到(e * dp - 1)可以整除k的情况即可。<br>(跑了一下发现限制条件还不够)<br>因此再加一个n能否整除p即可。</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"><span class="comment"># p = 13468634736343473907717969603434376212206335187555458742257940406618189481177835992217885676243155145465521141546915941147336786447889325606555333350540003</span></span><br><span class="line"><span class="comment"># q = 18432009829596386103558375461387837845170621179295293289126504231317130550979989727125205467379713835047300158256398009229511746203459540859429194971855371</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    <span class="keyword">if</span> (e*dp-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">        p=(e*dp-<span class="number">1</span>)//k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">q=n//p</span><br><span class="line">phi= (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d= gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125;</span></span><br></pre></td></tr></table></figure><h1><span id="rsa3"> RSA3</span></h1><p>给定n、e1、c1、e2、c2。<br>m ≡ c1^e1 mod n<br>m ≡ c2^e2 mod n<br>这里采用共模攻击，详细原理如下：</p><p>扩展欧几里得算法：给定两个整数a、b，必定存在x、y，使得gcd(a,b)=ax+by<br>对应到本题当中，由于e1、e2互为素数，因此gcd(e1,e2)=1，从而存在s1、s2使得:<br>s1 * e1 + s2 * e2 = 1</p><h2><span id="推导过程"> 推导过程</span></h2><p>m = m % n<br>m = m^(s1 * e1 + s2 * e2) % n<br>m = m^(e1 * s1) * m^(e2 * s2) % n<br>m = (m^(e1 * s1) % n) * (m^(e2 * s2) % n) % n<br>m = (c1^s1 % n) * (c2^s2 % n) % n</p><h2><span id="exp"> EXP</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line">r,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2,s2,n)) %n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;rsa2&quot;&gt; RSA2&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;题目给定n、e、dp、c&lt;br&gt;
非预期解：直接分解n&lt;br&gt;
下面考虑n不能分解的情况&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;推导过程&quot;&gt; 推导过程&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;dp ≡ d mo</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="diary" scheme="https://sch01ar.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记20221020</title>
    <link href="https://sch01ar.github.io/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221020/"/>
    <id>https://sch01ar.github.io/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221020/</id>
    <published>2022-10-19T16:00:00.000Z</published>
    <updated>2022-10-21T02:17:03.606Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="rsa1"> RSA1</span></h1><p>给定dp、dq类型<br>dp ≡ d mod (p-1)<br>dq ≡ d mod (q-1)<br>m ≡ c<sup>d</sup> mod n</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Double superscript at position 8: m = c^d^̲ + k * n ">m = c^d^ + k * n </p><p>m = c<sup>d</sup> +k * p * q<br>对上式两端同时对p、q分别取余，得：（中国剩余定理）<br>m1 ≡ c<sup>d</sup> mod p<br>m2 ≡ c<sup>d</sup> mod q<br>同理，可得到<br>c<sup>d</sup> = m1 +k * p<br>代入到 m2 ≡ c<sup>d</sup> mod q 中：<br>m2 ≡ (m1 + k * p)mod q ，两端减去m1得<br>m2 - m1 ≡ k * p mod q ，两端乘p的逆元得<br>(m2 - m1)p<sup>-1</sup> ≡ k mod q<br>将k代入到 c<sup>d</sup> = m1 +k * p 中得：<br>c<sup>d</sup> = m1 + ((m2 - m1)p<sup>-1</sup> mod q) * p<br>m=c<sup>d</sup> mod n<br>得到<br>m ≡ (((m2 - m1) * p<sup>-1</sup> mod q) * p + m1) mod n<br>接下来就是求解m1，m2<br>m1 ≡ c<sup>dp+k*(p-1)</sup> mod p<br>m2 ≡ c<sup>dq+k*(q-1)</sup> mod q<br>根据费马小定理<br>若p是素数，则a<sup>(p-1)</sup> ≡ 1 mod p<br>因此 m1 ≡ c<sup>dp</sup> mod p，m2 ≡ c<sup>dq</sup> mod q<br>最终可求得m</p><h2><span id="exp"> exp</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line">m1=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">m2=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">n=p*q</span><br><span class="line">p0=gmpy2.invert(p,q)</span><br><span class="line">m=(((m2-m1)*p0 % q)* p +m1)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#noxCTF&#123;W31c0m3_70_Ch1n470wn&#125;</span></span><br></pre></td></tr></table></figure><h1><span id="rsaroll"> RSAROLL</span></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSA roll！roll！roll！</span><br><span class="line">Only number and a-z</span><br><span class="line">（don&#x27;t use editor</span><br><span class="line">which MS provide）</span><br></pre></td></tr></table></figure><p>给了一个data.txt文件，打开盲猜一下第一行是n，e，后面是c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">phi =(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">c=[<span class="number">704796792</span>,<span class="number">752211152</span>,<span class="number">274704164</span>,<span class="number">18414022</span>,<span class="number">368270835</span>,<span class="number">483295235</span>,<span class="number">263072905</span>,<span class="number">459788476</span>,<span class="number">483295235</span>,<span class="number">459788476</span>,<span class="number">663551792</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">428313374</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">425392137</span>,<span class="number">704796792</span>,<span class="number">458265677</span>,<span class="number">341524652</span>,<span class="number">483295235</span>,<span class="number">534149509</span>,<span class="number">425392137</span>,<span class="number">428313374</span>,<span class="number">425392137</span>,<span class="number">341524652</span>,<span class="number">458265677</span>,<span class="number">263072905</span>,<span class="number">483295235</span>,<span class="number">828509797</span>,<span class="number">341524652</span>,<span class="number">425392137</span>,<span class="number">475206804</span>,<span class="number">428313374</span>,<span class="number">483295235</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">306220148</span>,</span><br><span class="line">]</span><br><span class="line">m=[]</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(c)):</span><br><span class="line">    m.append(<span class="built_in">pow</span>(c[i],d,n))</span><br><span class="line">    flag+=long_to_bytes(m[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;13212je2ue28fy71w8u87y31r78eu1e2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;rsa1&quot;&gt; RSA1&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;给定dp、dq类型&lt;br&gt;
dp ≡ d mod (p-1)&lt;br&gt;
dq ≡ d mod (q-1)&lt;br&gt;
m ≡ c&lt;sup&gt;d&lt;/sup&gt; mod n&lt;/p&gt;
&lt;p class=&quot;katex</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="diary" scheme="https://sch01ar.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2021ByteCTF-easyxor</title>
    <link href="https://sch01ar.github.io/2022/10/16/2021ByteCTF-easyxor/"/>
    <id>https://sch01ar.github.io/2022/10/16/2021ByteCTF-easyxor/</id>
    <published>2022-10-15T16:00:00.000Z</published>
    <updated>2022-10-21T02:18:02.554Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="题目源码如下"> 题目源码如下</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m, key</span>):</span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, k, iv, mode=<span class="string">&#x27;CBC&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(m) % <span class="number">8</span> == <span class="number">0</span></span><br><span class="line">    num = <span class="built_in">len</span>(m) // <span class="number">8</span></span><br><span class="line">    groups = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        groups.append(bytes_to_long(m[i * <span class="number">8</span>: (i + <span class="number">1</span>) * <span class="number">8</span>]))</span><br><span class="line">    last = iv</span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;CBC&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">            cur = eve ^ last</span><br><span class="line">            cur_c = convert(cur, k)</span><br><span class="line">            cipher.append(cur_c)</span><br><span class="line">            last = cur_c</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;OFB&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">            cur_c = convert(last, k)</span><br><span class="line">            cipher.append(cur_c ^ eve)</span><br><span class="line">            last = cur_c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Not supported now!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(eve)[<span class="number">2</span>:].strip(<span class="string">&#x27;L&#x27;</span>).rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> eve <span class="keyword">in</span> cipher])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        flag += <span class="string">&#x27;$&#x27;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(flag)</span><br><span class="line">    num = length // <span class="number">8</span></span><br><span class="line">    keys = [randint(-<span class="number">32</span>, <span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    IV = getrandbits(<span class="number">64</span>)</span><br><span class="line">    front = flag[:length // <span class="number">2</span>]</span><br><span class="line">    back = flag[length // <span class="number">2</span>:]</span><br><span class="line">    cipher1 = encrypt(front, keys, IV, mode=<span class="string">&#x27;OFB&#x27;</span>)</span><br><span class="line">    cipher2 = encrypt(back, keys, IV)</span><br><span class="line">    <span class="built_in">print</span> cipher1 + cipher2</span><br><span class="line"><span class="comment">#89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912</span></span><br></pre></td></tr></table></figure><h1><span id="题目分析"> 题目分析</span></h1><p>将flag分为两段，前半段采用OFB加密，后半段采用CBC加密</p><h2><span id="ofb解密"> OFB解密</span></h2><p>将前半段flag又进行切分，将其8位分为一组，存到group数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要加密代码</span></span><br><span class="line"><span class="keyword">elif</span> mode == <span class="string">&#x27;OFB&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> eve <span class="keyword">in</span> groups:</span><br><span class="line">        cur_c = convert(last, k)</span><br><span class="line">        cipher.append(cur_c ^ eve)</span><br><span class="line">        last = cur_c</span><br></pre></td></tr></table></figure><p>针对一个随机生成的64位的last，与keys进行convert加密，再与group中的数进行异或。<br>keys是四个-32～32的数，可爆破。<br>对于OFB解密十分简单，因为我们已知第一组明文，恰好是8位的’ByteCTF{'，由于分组密码的性质，所以后面的也就迎刃而解，通过group[ 0]^cipher[ 0] 即可得到cur_c，从而求得下一次的cur_c，以此类推。</p><h3><span id="expofb"> expOFB</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#OFB解密</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">m, key</span>):</span><br><span class="line">    c_list = [</span><br><span class="line">        <span class="number">0x37386180AF9AE39E</span>,</span><br><span class="line">        <span class="number">0xAF754E29895EE11A</span>,</span><br><span class="line">        <span class="number">0x85E1A429A2B7030C</span>,</span><br><span class="line">        <span class="number">0x964C5A89F6D3AE8C</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">s</span>):</span><br><span class="line">    c=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">32</span>&lt;=i&lt;=<span class="number">127</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c=<span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c = <span class="string">&quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;</span></span><br><span class="line">c=c[:<span class="built_in">len</span>(c)//<span class="number">2</span>]</span><br><span class="line">cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">16</span>):</span><br><span class="line">    cipher.append(<span class="built_in">int</span>(c[i*<span class="number">16</span>:(i+<span class="number">1</span>)*<span class="number">16</span>],<span class="number">16</span>))</span><br><span class="line">flag = <span class="string">b&#x27;ByteCTF&#123;&#x27;</span></span><br><span class="line">m0 = bytes_to_long(flag)</span><br><span class="line">m_m = m0 ^ cipher[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>,<span class="number">32</span>):</span><br><span class="line">                keys=[a,b,c,d]</span><br><span class="line">                m_m1=convert(m_m,keys)</span><br><span class="line">                m1=long_to_bytes((m_m1^cipher[<span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">if</span> check(m1):</span><br><span class="line">                    m_m2 = convert(m_m1, keys)</span><br><span class="line">                    m2 = long_to_bytes((m_m2 ^ cipher[<span class="number">2</span>]))</span><br><span class="line">                    <span class="keyword">if</span> check(m2):</span><br><span class="line">                        flag+=m1</span><br><span class="line">                        flag+=m2</span><br><span class="line">                        <span class="built_in">print</span>(flag)</span><br><span class="line">                        <span class="built_in">print</span>(a,b,c,d)</span><br><span class="line"><span class="comment">#b&#x27;ByteCTF&#123;5831a241s-f30980&#x27;</span></span><br><span class="line"><span class="comment">#keys：-12 26 -3 -31</span></span><br></pre></td></tr></table></figure><h2><span id="cbc解密"> CBC解密</span></h2><p>针对后半部分，我们需要逆向解出convert函数，因此就是对shift函数中的加密运算进行解密。<br>之前上网搜的wp都一笔带过，没解释unshift逆函数怎么写的。“难道有什么定理？？”<br>这里简单写一下我的理解。</p><h3><span id="分析shift"> 分析shift</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br></pre></td></tr></table></figure><h4><span id="推理过程"> 推理过程</span></h4><p>这里我们举例k&gt;0时的情况。（k&lt;0同理）<br>m和c都是64位,k是-32～32的10进制数。<br>1、m &lt;&lt; k相当于在m后补k位0，得到的新数我们称为a，a=m &lt;&lt; k。<br>2、令b = a &amp; c，由于a是64+k位，c是64位，所以b是64位，并且b的后k位都是0。<br>3、令x = m ^ b，x则是shift加密之后的值，x也是64位，并且x的后k位是与m的后k位相同的，与0异或得本身。<br>我们走完了一遍shift加密，得到的结论是，密文的位数同样是64，并且密文的后k位与明文相同。</p><h3><span id="分析unshift"> 分析unshift</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unshift</span>(<span class="params">m, k, c, bits=<span class="number">64</span></span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // (-k)):</span><br><span class="line">            tmp = m ^ tmp &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // k):</span><br><span class="line">            tmp = m ^ tmp &lt;&lt; k &amp; c</span><br><span class="line">    <span class="keyword">assert</span> shift(tmp, k, c) == m</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><h4><span id="推理过程"> 推理过程</span></h4><p>同样我们举例k&gt;0的情况。<br>之前我们得到的密文x，相当于tmp。<br>1、a’=tmp &lt;&lt; k，tmp后k位为0，tmp后2k～k位等于m的后k位。<br>2、b’=a’ &amp; c，b’后k位为0，后2k～k位为m&amp;c。<br>3、y=x ^ b’，y的后k位，等于x的后k位，也就是m的后k位。<br>4、y的后2k～k位，在shift加密当中，a &amp; c的后2k～k位等于m的后k位&amp;c，记作m1 &amp; c。<br>shift中的x，也就是m ^ b，m ^(m1 &amp; c)，在unshift最后的一步操作中，y= m ^(m1 &amp; c) ^ b’。<br>这时我们只考虑y的后2k～k位，y=m ^(m1 &amp; c)^(m1 &amp; c) = m<br>所以这时y的2k～k位也等于m了。</p><h4><span id="总结"> 总结</span></h4><p>因此，我们发现每经过unshift一次，就有k位被还原，何时才能被完全还原？即循环bits//k次。<br>此推理正确，可以在unshift函数运行时输出每次的tmp观察即可。<br>ps：自我感觉这种位运算应该是属于一种性质或者定理，网上大佬们都是说“简单写个逆”。。。</p><h3><span id="expcbc"> expCBC</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">m, k, c</span>):</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unconvert</span>(<span class="params">m, key</span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        m = unshift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshift</span>(<span class="params">m, k, c, bits=<span class="number">64</span></span>):</span><br><span class="line">    tmp = m</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // (-k)):</span><br><span class="line">            tmp = m ^ tmp &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // k):</span><br><span class="line"></span><br><span class="line">            tmp = m ^ tmp &lt;&lt; k &amp; c</span><br><span class="line">    <span class="keyword">assert</span> shift(tmp, k, c) == m</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">keys=[-<span class="number">12</span>,<span class="number">26</span>,-<span class="number">3</span>,-<span class="number">31</span>]</span><br><span class="line">c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">flag=<span class="string">b&#x27;ByteCTF&#123;&#x27;</span></span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">iv=<span class="number">16476971533267772345</span></span><br><span class="line">c = <span class="string">&quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;</span></span><br><span class="line">c=c[<span class="built_in">len</span>(c)//<span class="number">2</span>:]</span><br><span class="line">cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">16</span>):</span><br><span class="line">    cipher.append(<span class="built_in">int</span>(c[i*<span class="number">16</span>:(i+<span class="number">1</span>)*<span class="number">16</span>],<span class="number">16</span>))</span><br><span class="line">group=[]</span><br><span class="line"></span><br><span class="line">curc1=unconvert(cipher[<span class="number">0</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc1^iv))</span><br><span class="line"></span><br><span class="line">curc2=unconvert(cipher[<span class="number">1</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc2^cipher[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">curc3=unconvert(cipher[<span class="number">2</span>],keys)</span><br><span class="line">group.append(long_to_bytes(curc3^cipher[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">group[<span class="number">0</span>]+=group[<span class="number">1</span>]</span><br><span class="line">group[<span class="number">0</span>]+=group[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(group[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#b&#x27;q535af-2156547475u2t&#125;$$$&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;题目源码如下&quot;&gt; 题目源码如下&lt;/span&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2022BUUCTF新生赛-RSA</title>
    <link href="https://sch01ar.github.io/2022/10/16/2022BUUCTF%E6%96%B0%E7%94%9F%E8%B5%9B-RSA/"/>
    <id>https://sch01ar.github.io/2022/10/16/2022BUUCTF%E6%96%B0%E7%94%9F%E8%B5%9B-RSA/</id>
    <published>2022-10-15T16:00:00.000Z</published>
    <updated>2022-10-21T02:17:55.524Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="题目源码"> 题目源码</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#c = 295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342</span></span><br><span class="line"><span class="comment">#hint = 381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077</span></span><br><span class="line"><span class="comment">#n = 1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317</span></span><br></pre></td></tr></table></figure><h1><span id="题目分析"> 题目分析</span></h1><p>发现n和phin都不常规，没入手点，发现hint，hint=pow(d,e,n)，有趣，用d做明文，尝试推理一下：<br>d = pow(hint,d,n)<br>d = pow((d ** e % n),d,n)<br>d = (d ** e % n) ** d % n<br>d = d ** (e*d) % n<br>d = pow(d ** e,d,n)<br>把d ** e再次看做密文，可得<br>d ** e = pow(d,e,n)<br>因为hint = pow(d,e,n)<br>可得hint = d ** e<br>d ** e * e ** e-&gt;(ed) ** e-&gt;(ed) ** e == 1 mod phin<br>因此根据e和hint即可求得phin<br>从而得到phin和n的最大公约数p<br>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="number">295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342</span></span><br><span class="line">hint = <span class="number">381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077</span></span><br><span class="line">n = <span class="number">1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317</span></span><br><span class="line">p=math.gcd((hint*<span class="built_in">pow</span>(e,e) -<span class="number">1</span>),n)</span><br><span class="line">q=n//(p**<span class="number">2</span>)</span><br><span class="line">phi=p*(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;43075d24-77a7-4f57-ae89-54fe4f96db69&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;题目源码&quot;&gt; 题目源码&lt;/span&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>梦开始的地方</title>
    <link href="https://sch01ar.github.io/2022/10/15/%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://sch01ar.github.io/2022/10/15/%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2022-10-15T07:59:58.000Z</published>
    <updated>2022-10-16T05:22:27.882Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="mac下利用hexo和github-pages搭建个人博客"> Mac下利用Hexo和github pages搭建个人博客</span></h2><h3><span id="环境配置"> 环境配置</span></h3><h4><span id="1nodejs安装"> 1.Node.js安装</span></h4><p>下载地址：<a href="https://nodejs.org/en/">Node.js</a></p><h4><span id="2淘宝镜像安装"> 2.淘宝镜像安装</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打开终端terminal</span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure><h4><span id="3安装hexo"> 3.安装Hexo</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用命令去安装Hexo</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">//安装成功后查看版本</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3><span id="初始化hexo-blog"> 初始化Hexo Blog</span></h3><h4><span id="1初始化hexo"> 1.初始化Hexo</span></h4><p>新建一个文件夹并进入，例如blog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//初始化hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4><span id="2本地启动hexo"> 2.本地启动Hexo</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器打开网站，即可看到本地博客</p><h3><span id="创建博客文章"> 创建博客文章</span></h3><h4><span id="1创建文章"> 1.创建文章</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><p>在blog文件夹中的_post里即可看到新建的md文件</p><h4><span id="2清理缓存项目"> 2.清理缓存项目</span></h4><p>在新建博客或修改博客时，需要进行该操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h4><span id="3重新生成博客"> 3.重新生成博客</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4><span id="4启动博客"> 4.启动博客</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;mac下利用hexo和github-pages搭建个人博客&quot;&gt; Mac下利用Hexo和github pages搭建个人博客&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;环境配置&quot;&gt; 环境配置&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&quot;</summary>
      
    
    
    
    <category term="建站" scheme="https://sch01ar.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客搭建" scheme="https://sch01ar.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sch01ar.github.io/2022/10/15/hello-world/"/>
    <id>https://sch01ar.github.io/2022/10/15/hello-world/</id>
    <published>2022-10-15T07:57:23.442Z</published>
    <updated>2022-10-15T07:57:23.442Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start"> Quick Start</span></h2><h3><span id="create-a-new-post"> Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server"> Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files"> Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites"> Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
