<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Y&#39;s blog</title>
  
  
  <link href="https://sch01ar.github.io/atom.xml" rel="self"/>
  
  <link href="https://sch01ar.github.io/"/>
  <updated>2023-06-28T08:02:15.583Z</updated>
  <id>https://sch01ar.github.io/</id>
  
  <author>
    <name>Roo1e</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LCG</title>
    <link href="https://sch01ar.github.io/2023/06/19/LCG/"/>
    <id>https://sch01ar.github.io/2023/06/19/LCG/</id>
    <published>2023-06-19T03:05:45.000Z</published>
    <updated>2023-06-28T08:02:15.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lcg">LCG</h2><p>线性同余（LCG）是产生伪随机数的方法。</p><h2 id="基本形式">基本形式：</h2><p><span class="math display">\[X_{n+1}=(aX_n+b)\;mod\;m\]</span></p><h2 id="基本公式">基本公式</h2><h3 id="公式一">公式一</h3><p><strong>求递归数组元素</strong></p><p><spanclass="math display">\[X_n=a^{-1}(X_{n+1}-b)\;mod\;m\]</span></p><h3 id="公式二">公式二</h3><p><strong>求参数 a</strong> 利用两个递归式消去 b 得到 a</p><p><spanclass="math display">\[a=(X_{n+2}-X_{n+1})(X_{n+1}-X_n)^{-1}\]</span></p><h3 id="公式三">公式三</h3><p><strong>求参数 b</strong> <spanclass="math display">\[b=(X_{n+1}-aX_{n})\;mod\;m\]</span></p><h3 id="公式四">公式四</h3><p><strong>求参数 m</strong></p><p><span class="math display">\[t_n=X_{n+1}-X_n\]</span> <spanclass="math display">\[t_n=(aX_n+b)-(aX_{n-1}+b)\;mod\;m\]</span> <spanclass="math display">\[t_{n+1}t_{n-1}-t_nt_n=0\;mod\;m\]</span> <spanclass="math display">\[T_n=t_{n+1}t_{n-1}-t_nt_n是 m 的倍数\]</span><span class="math display">\[m=gcd(T_n,T_{n-1})\]</span></p><h2 id="相关求解代码">相关求解代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_unknown_increment</span>(<span class="hljs-params">states, modulus, multiplier</span>):  <span class="hljs-comment"># 求增量</span><br><br>    increment = (states[<span class="hljs-number">1</span>] - states[<span class="hljs-number">0</span>]*multiplier) % modulus<br><br>    <span class="hljs-keyword">return</span> modulus, multiplier, increment<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_unknown_multiplier</span>(<span class="hljs-params">states, modulus</span>):  <span class="hljs-comment"># 求乘数</span><br><br>    multiplier = (states[<span class="hljs-number">2</span>] - states[<span class="hljs-number">1</span>]) * \<br>        inverse(states[<span class="hljs-number">1</span>] - states[<span class="hljs-number">0</span>], modulus) % modulus<br><br>    <span class="hljs-keyword">return</span> crack_unknown_increment(states, modulus, multiplier)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_unknown_modulus</span>(<span class="hljs-params">states</span>):  <span class="hljs-comment"># 求模数</span><br><br>    diffs = [s1 - s0 <span class="hljs-keyword">for</span> s0, s1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(states, states[<span class="hljs-number">1</span>:])]<br><br>    zeroes = [t2*t0 - t1*t1 <span class="hljs-keyword">for</span> t0, t1, t2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(diffs, diffs[<span class="hljs-number">1</span>:], diffs[<span class="hljs-number">2</span>:])]<br><br>    modulus = <span class="hljs-built_in">abs</span>(reduce(GCD, zeroes))<br><br>    <span class="hljs-keyword">return</span> crack_unknown_multiplier(states, modulus)<br><br><br><span class="hljs-built_in">print</span>(crack_unknown_modulus([<span class="hljs-number">2818206783446335158</span>, <span class="hljs-number">3026581076925130250</span>,<br>      <span class="hljs-number">136214319011561377</span>, <span class="hljs-number">359019108775045580</span>, <span class="hljs-number">2386075359657550866</span>, <span class="hljs-number">1705259547463444505</span>]))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lcg&quot;&gt;LCG&lt;/h2&gt;
&lt;p&gt;线性同余（LCG）是产生伪随机数的方法。&lt;/p&gt;
&lt;h2 id=&quot;基本形式&quot;&gt;基本形式：&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
X_{n+1}=(aX_n+b)\;mod\;m
\]&lt;/spa</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Lattice</title>
    <link href="https://sch01ar.github.io/2023/05/11/Lattice/"/>
    <id>https://sch01ar.github.io/2023/05/11/Lattice/</id>
    <published>2023-05-11T13:05:45.000Z</published>
    <updated>2023-06-19T08:23:03.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lwe">LWE</h2><p>已知矩阵<span class="math inline">\(A\)</span>和向量<spanclass="math inline">\(b\)</span>，随机选取一个在固定范围内的随机数<spanclass="math inline">\(e\)</span>作为噪音向量： <spanclass="math display">\[b=Ax+e\]</span> 求解未知向量<spanclass="math inline">\(x\)</span>。将还原<spanclass="math inline">\(x\)</span>的过程就称作<strong>误差还原(LearningWith Error)</strong>问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lwe&quot;&gt;LWE&lt;/h2&gt;
&lt;p&gt;已知矩阵&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;和向量&lt;span
class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;，随机选取一个在固定范围内的随机数&lt;span
class=&quot;ma</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>D^3CTF</title>
    <link href="https://sch01ar.github.io/2023/05/07/d3ctf2023/"/>
    <id>https://sch01ar.github.io/2023/05/07/d3ctf2023/</id>
    <published>2023-05-07T06:05:45.000Z</published>
    <updated>2023-05-10T12:22:25.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="d3noisy">d3noisy</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    n=<span class="hljs-built_in">int</span>(f.readline()[<span class="hljs-number">4</span>:])<br>    p=<span class="hljs-built_in">eval</span>(f.readline()[<span class="hljs-number">4</span>:])<br>    s=<span class="hljs-built_in">eval</span>(f.readline()[<span class="hljs-number">4</span>:])<br>    c=<span class="hljs-built_in">eval</span>(f.readline()[<span class="hljs-number">4</span>:])<br><br>P0=<span class="hljs-number">1</span><br>L=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    P0=P0*i<br><span class="hljs-built_in">print</span>(P0)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    t=inverse(P0//p[i],p[i])<br>    L.append(t*(P0//p[i]))<br><br>B=getPrime(<span class="hljs-number">3211</span>)<br>M=matrix(ZZ,<span class="hljs-number">15</span>*<span class="hljs-number">15</span>+<span class="hljs-number">1</span>,<span class="hljs-number">15</span>*<span class="hljs-number">15</span>+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>        t=i*<span class="hljs-number">15</span>+j<br>        M[t+<span class="hljs-number">1</span>,t+<span class="hljs-number">1</span>]=B<br>        M[t+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]=s[i][j]*L[i]<br>M[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]=P0<br>x=M.LLL()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL done&quot;</span>)<br>d=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    d =(d ^^ <span class="hljs-built_in">int</span>(x[i][<span class="hljs-number">0</span>]))<br>d = gmpy2.next_prime(<span class="hljs-built_in">int</span>(d))<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-comment"># antd3ctf&#123;0c85f77e-bfee-da57-78f2-e961ffd4ca45&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;d3noisy&quot;&gt;d3noisy&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA(持续更新🫡)</title>
    <link href="https://sch01ar.github.io/2023/04/20/RSA/"/>
    <id>https://sch01ar.github.io/2023/04/20/RSA/</id>
    <published>2023-04-20T13:05:45.000Z</published>
    <updated>2023-06-30T01:49:15.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本原理">基本原理</h1><p>RSA 中加、解密：</p><p>加密<span class="math inline">\(c = m^e\quad mod\quad n\)</span></p><p>解密<span class="math inline">\(m = c^d\quad mod\quad n\)</span></p><p>接下来证明一下解密过程，先引入欧拉定理。</p><h2 id="欧拉定理">欧拉定理</h2><p>对于互为质数的 m、n 两个数，有<span class="math inline">\(m^{\phi(n)}= 1\quad mod\quad n\)</span>，其中<spanclass="math inline">\(\phi(n)\)</span>表示小于 n 的质数的个数。</p><h2 id="解密原理">解密原理</h2><p>通过<span class="math inline">\(c = m^e\quad mod\quadn\)</span>与欧拉定理<span class="math inline">\(m^{\phi(n)} = 1\quadmod\quad n\)</span>，我们便可进行推导。</p><p>对欧拉定理进行变形，得到<span class="math inline">\(m^{k\phi(n)+1} =m\quad mod\quad n\)</span></p><p>因为我们已经知道<span class="math inline">\(c = m^e\quad mod\quadn\)</span>，所以寻找一个 d，使得<span class="math inline">\(ed =k\phi(n)+1\)</span>,则可以得到<span class="math inline">\(m^{ed}=m\quadmod \quad n\)</span></p><p>则得到了<span class="math inline">\(c^d =m\quad mod\quadn\)</span></p><h1 id="共模攻击">共模攻击</h1><p>所谓共模，就是 n 相同，会对应多组 c，e。</p><p>例：给定 n、c1、c2、e1、e2</p><p>m = c<sub>1</sub><sup>e1</sup> mod n</p><p>m = c<sub>2</sub><sup>e2</sup> mod n</p><h2 id="扩展欧几里得算法">扩展欧几里得算法</h2><p>给定两个整数 a、b，必定存在 x、y，使得 gcd(a,b)=ax+by</p><p>运用该算法推导过程</p><p>m = m % n</p><p>m = m<sup>s1e1+s2e2</sup> % n</p><p>m = (m<sup>e1s1</sup> * m<sup>e2s2</sup>)% n</p><p>m = (m<sup>e1s1</sup> % n) * (m<sup>e2s2</sup> % n) % n</p><p>m = (c1<sup>s1</sup> % n) * (c2<sup>s2</sup> % n) % n</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>c1=<span class="hljs-number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br>n=<span class="hljs-number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br>e1=<span class="hljs-number">11187289</span><br>c2=<span class="hljs-number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br>e2=<span class="hljs-number">9647291</span><br><br>r,s1,s2=gmpy2.gcdext(e1,e2)<br>m=(<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2,s2,n)) %n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125;</span><br></code></pre></td></tr></table></figure><h1 id="wieners-attack">Wiener's Attack</h1><p>适用于已知 N、e，且 e 过大或过小。</p><p>Wiener 表示如果<spanclass="math inline">\(d&lt;\frac{1}{3}n^{\frac{1}{4}}\)</span>,那么一种基于<strong>连分数</strong>的攻击就可危及RSA 安全。</p><p>那么什么是连分数以及如何利用呢？</p><h2 id="连分数">连分数</h2><p>当 <span class="math inline">\(a_0, a_1, a_2, \dots, a_n\)</span>都是正整数时，一个连分数可以表示为： <spanclass="math display">\[x\;=\;a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 +\cfrac{1}{\ddots + \cfrac{1}{a_n}}}}\]</span></p><p>例如我们可以求解<span class="math inline">\(\pi\)</span>的近似值<span class="math display">\[\pi = 3 + \cfrac{1}{7 + \cfrac{1^2}{15 +\cfrac{2^2}{1 + \cfrac{3^2}{1 + \cfrac{4^2}{2 + \cdots}}}}}\]</span>其中每一项可以用如下公式计算：</p><p><span class="math display">\[a_k = \begin{cases}a_0, &amp; k=0 \\\lfloor b_k \rfloor, &amp; k &gt; 0\end{cases}\\\]</span></p><p><span class="math display">\[b_k = \begin{cases}a_0, &amp; k=0 \\\dfrac{1}{b_{k-1} - \lfloor b_{k-1} \rfloor}, &amp; k &gt; 0\end{cases}\]</span></p><p>在这个例子中，<span class="math inline">\(a_0 =3\)</span>，并且按照上述公式递归计算 <spanclass="math inline">\(a_k\)</span> 和 <spanclass="math inline">\(b_k\)</span>直到达到一定精度为止，就可以得到一个近似值 <spanclass="math inline">\(\pi \approx 3.14159265\)</span>。</p><p>至此也就明白了连分数的作用，常用于无理数的逼近。</p><p>当然，也可以逼近一个任意数，得到最接近精确值的近似值。</p><h2 id="legendres-theorem">Legendre's theorem</h2><p><span class="math display">\[\left | \frac{e}{N}-\frac{k}{d} \right|\leq \frac{1}{2d^2}\]</span> 当满足这一点时，<spanclass="math inline">\(\frac{k}{d}\)</span>就是<spanclass="math inline">\(\frac{e}{N}\)</span>的连分数收敛。</p><h2 id="攻击-rsa-原理">攻击 RSA 原理</h2><p><span class="math display">\[\phi(n)=(p-1)(q-1)\]</span></p><p><span class="math display">\[\because p,q很大,\therefore \phi(n)\approx N\]</span> <span class="math display">\[ed - 1=k\phi(n)\]</span>同除 <span class="math inline">\(d\phi(n)\)</span> 得 <spanclass="math display">\[\frac{e}{\phi(n)}-\frac{k}{d}=\frac{1}{d\phi(n)}\]</span><span class="math display">\[\therefore\frac{e}{N}-\frac{k}{d}=\frac{1}{d\phi(n)}\]</span></p><p>到这里发现，等式右边的<spanclass="math inline">\(\frac{1}{d\phi(n)}\)</span>很小，因此<spanclass="math inline">\(\frac{k}{d}\)</span>就是一个对于已知量<spanclass="math inline">\(\frac{e}{N}\)</span>的一个连分数逼近。</p><p>因此可以通过将<spanclass="math inline">\(\frac{e}{N}\)</span>的连分数展开，依次计算每一个渐进分数。Wiener证明了可以精准覆盖<span class="math inline">\(\frac{k}{d}\)</span>。</p><h2 id="exp-1">exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">x,y</span>):       <span class="hljs-comment">#使用辗转相处将分数 x/y 转为连分数的形式</span><br>    res=[]<br>    <span class="hljs-keyword">while</span> y:<br>        res.append(x//y)<br>        x,y=y,x%y<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fraction</span>(<span class="hljs-params">sub_res</span>):<br>    numerator,denominator=<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sub_res[::-<span class="hljs-number">1</span>]:      <span class="hljs-comment">#从sublist的后面往前循环</span><br>        denominator,numerator=numerator,i*numerator+denominator<br>    <span class="hljs-keyword">return</span> denominator,numerator   <span class="hljs-comment">#得到渐进分数的分母和分子，并返回</span><br><br><br><span class="hljs-comment">#求解每个渐进分数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_fraction</span>(<span class="hljs-params">x,y</span>):<br>    res=transform(x,y)<br>    res=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(continued_fraction,(res[<span class="hljs-number">0</span>:i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(res)))))  <span class="hljs-comment">#将连分数的结果逐一截取以求渐进分数</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">a,b,c</span>):      <span class="hljs-comment">#由p+q和pq的值通过维达定理来求解p和q</span><br>    par=gmpy2.isqrt(b*b-<span class="hljs-number">4</span>*a*c)   <span class="hljs-comment">#由上述可得，开根号一定是整数，因为有解</span><br>    x1,x2=(-b+par)//(<span class="hljs-number">2</span>*a),(-b-par)//(<span class="hljs-number">2</span>*a)<br>    <span class="hljs-keyword">return</span> x1,x2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e,n</span>):<br>    <span class="hljs-keyword">for</span> (d,k) <span class="hljs-keyword">in</span> sub_fraction(e,n):  <span class="hljs-comment">#用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">0</span>:                     <span class="hljs-comment">#可能会出现连分数的第一个为0的情况，排除</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e*d-<span class="hljs-number">1</span>)%k!=<span class="hljs-number">0</span>:             <span class="hljs-comment">#ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span><br>            <span class="hljs-keyword">continue</span><br><br>        phi=(e*d-<span class="hljs-number">1</span>)//k               <span class="hljs-comment">#这个结果就是 φ(n)</span><br>        px,qy=get_pq(<span class="hljs-number">1</span>,n-phi+<span class="hljs-number">1</span>,n)<br>        <span class="hljs-keyword">if</span> px*qy==n:<br>            p,q=<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(px)),<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(qy))     <span class="hljs-comment">#可能会得到两个负数，负负得正未尝不会出现</span><br>            d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))     <span class="hljs-comment">#求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span><br>            <span class="hljs-keyword">return</span> d<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该方法不适用&quot;</span>)<br><br><br>e = <span class="hljs-number">14058695417015334071588010346586749790539913287499707802938898719199384604316115908373997739604466972535533733290829894940306314501336291780396644520926473</span><br>n = <span class="hljs-number">33608051123287760315508423639768587307044110783252538766412788814888567164438282747809126528707329215122915093543085008547092423658991866313471837522758159</span><br>d=wienerAttack(e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d=&quot;</span>,d)`<br><br></code></pre></td></tr></table></figure><h1 id="extending-wieners-attack">Extending Wiener's Attack</h1><p>扩展维纳攻击是为了扩展到<spanclass="math inline">\(n\)</span>个加密指数<spanclass="math inline">\(e_i\)</span>,且<spanclass="math inline">\(d_i\)</span>都较小的情况。 由<spanclass="math inline">\(e*d-k*\lambda(N)=1\)</span>得</p><p><span class="math display">\[d_ige_i-k_iN=g+k_is\]</span></p><p>记为维纳等式<span class="math inline">\(W_i\)</span>。</p><p>利用 Guo 的方法可得到关系式: <spanclass="math display">\[k_id_je_j-k_jd_ie_i=k_i-k_j\]</span></p><p>记为郭等式<spanclass="math inline">\(G_{i,j}\)</span>。注意到两种等式的右侧都非常小。</p><p>参考论文和 wiki中的做法，后续的思路是使用这两个式子的不同关系去构造格，进而格基约化求得<spanclass="math inline">\(\phi(N)\)</span>来实现<spanclass="math inline">\(N\)</span>的分解。</p><h2 id="两个小解密指数">两个小解密指数</h2><h2 id="三个小解密指数">三个小解密指数</h2><h1 id="低加密指数攻击-e3">低加密指数攻击 e=3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">c, e, n</span>):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        mm = c + n*k<br>        result, flag = gmpy2.iroot(mm, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br>n= <span class="hljs-number">14067473525623615859223663589118945198091192669401088734569589535726733244095067264729942915265175903139441309376381225701454902095234966599914234681888481774607095853830772571665038109641511499155604914228117882196188074964226780922239011682486198651997912713999544628177959592818928976240251790858062449396082494272361535640237914373270152455829541596341184902017633404494979208958080467979235974182507427501682492000572071306960595992848840147393057648929439822116261337091431441205378542080755128597543738922210525692259529009107645032171097155449558362749512243918901171631681472217935131865121871798425854707759</span><br>e= <span class="hljs-number">3</span><br>c= <span class="hljs-number">2217344750798294937344050117513831761010547351781457575945714176628679412650463329423466955026804439931765627111856888102133234836914006818023839994342283023142702993182665344445325734299047409223354338948863171846780674244925724334091153701697864918695050507247415283070309</span><br><br>m=dec(c,e,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h1 id="低加密指数广播攻击">低加密指数广播攻击</h1><p>特点是 e 小，有多组 n，对应了多组 c</p><p>m<sup>e</sup> = c1 mod n1</p><p>m<sup>e</sup> = c2 mod n2</p><p>m<sup>e</sup> = c3 mod n3</p><h2 id="中国剩余定理crt">中国剩余定理(CRT)</h2><p>定理内容如下</p><p>针对上述方程组，若 n1、n2、n3 互质，对于任意的c1、c2、c3，方程组都有解 m。</p><p>使用条件是 m^e &lt; n1、n2、n3。通解推导如下：</p><p>设<span class="math inline">\(N=n_1 \times n_2 \times n_3, N_1=N/n_1,N_2=N/n_2, N_3=N/n_3\)</span></p><p>设<span class="math inline">\(t_i=N_i^{-1}\)</span>,这里表示<spanclass="math inline">\(t_i\)</span>是<spanclass="math inline">\(N_i\)</span>在模<spanclass="math inline">\(n_i\)</span>的逆元。</p><p>有了以上几个数，我们可以给出通解形式：</p><p><spanclass="math display">\[m=c_1t_1N_1+c_2t_2N_2+c_3t_3N_3+kN=kN+\sum_{i=1}^3c_it_iN_i\]</span></p><p>在模 N 后，只剩唯一解<spanclass="math inline">\(m=\sum_{i=1}^3c_it_iN_i\)</span></p><h2 id="exp-2">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>e = <span class="hljs-number">3</span><br>n1 = <span class="hljs-string">&#x27;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&#x27;</span><br>c1 = <span class="hljs-string">&#x27;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&#x27;</span><br><br>n2 = <span class="hljs-string">&#x27;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&#x27;</span><br>c2 = <span class="hljs-string">&#x27;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&#x27;</span><br><br>n3 = <span class="hljs-string">&#x27;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&#x27;</span><br>c3 = <span class="hljs-string">&#x27;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&#x27;</span><br>c1=<span class="hljs-built_in">int</span>(c1,<span class="hljs-number">5</span>)<br>n1=<span class="hljs-built_in">int</span>(n1,<span class="hljs-number">5</span>)<br>c2=<span class="hljs-built_in">int</span>(c2,<span class="hljs-number">5</span>)<br>n2=<span class="hljs-built_in">int</span>(n2,<span class="hljs-number">5</span>)<br>c3=<span class="hljs-built_in">int</span>(c3,<span class="hljs-number">5</span>)<br>n3=<span class="hljs-built_in">int</span>(n3,<span class="hljs-number">5</span>)<br>e=<span class="hljs-number">3</span><br>n=[n1,n2,n3]<br>c=[c1,c2,c3]<br>resultant,mod= crt(n, c)<br><span class="hljs-comment"># 有现成的库函数可以调用</span><br><span class="hljs-built_in">print</span>(gmpy2.iroot(resultant, e))<br>m=<span class="hljs-number">259362307225540148883586283191025214233097658309244310540770399135748418469298031742173624766441014006294782333</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#noxCTF&#123;D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!&#125;</span><br></code></pre></td></tr></table></figure><h1 id="dpdq-相关">dp、dq 相关</h1><h2 id="给定-dpdq-类型">给定 dp、dq 类型</h2><p>dp ≡ d mod (p-1)</p><p>dq ≡ d mod (q-1)</p><p>m ≡ c<sup>d</sup> mod n</p><p>m = c<sup>d</sup> + k * n</p><p>m = c<sup>d</sup> +k _ p _ q</p><p>对上式两端同时对 p、q 分别取余，得：（中国剩余定理）</p><p>m1 ≡ c<sup>d</sup> mod p</p><p>m2 ≡ c<sup>d</sup> mod q</p><p>同理，可得到 c<sup>d</sup> = m1 +k * p</p><p>代入到 m2 ≡ c<sup>d</sup> mod q 中：</p><p>m2 ≡ (m1 + k * p)mod q ，两端减去 m1 得</p><p>m2 - m1 ≡ k * p mod q ，两端乘 p 的逆元得</p><p>(m2 - m1)p<sup>-1</sup> ≡ k mod q</p><p>将 k 代入到 c<sup>d</sup> = m1 +k * p 中得：</p><p>c<sup>d</sup> = m1 + ((m2 - m1)p<sup>-1</sup> mod q) * p</p><p>m=c<sup>d</sup> mod n</p><p>得到</p><p>m ≡ (((m2 - m1) _ p<sup>-1</sup> mod q) _ p + m1) mod n</p><p>接下来就是求解 m1，m2</p><p>m1 ≡ c<sup>dp+k(p-1)</sup> mod p</p><p>m2 ≡ c<sup>dq+k(q-1)</sup> mod q</p><p>根据费马小定理</p><p>若 p 是素数，则 a<sup>(p-1)</sup> ≡ 1 mod p</p><p>因此 m1 ≡ c<sup>dp</sup> mod p，m2 ≡ c<sup>dq</sup> mod q</p><p>最终可求得 m</p><h3 id="exp-3">EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>p = <span class="hljs-number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span><br>q = <span class="hljs-number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span><br>dp = <span class="hljs-number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span><br>dq = <span class="hljs-number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span><br>c = <span class="hljs-number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br>m1=<span class="hljs-built_in">pow</span>(c,dp,p)<br>m2=<span class="hljs-built_in">pow</span>(c,dq,q)<br>n=p*q<br>p0=gmpy2.invert(p,q)<br>m=(((m2-m1)*p0 % q)* p +m1)%n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#noxCTF&#123;W31c0m3_70_Ch1n470wn&#125;</span><br></code></pre></td></tr></table></figure><h2 id="只给定-dp">只给定 dp</h2><p>dp ≡ d mod (p-1)</p><p>ed ≡ 1 mod (p-1) * (q-1)</p><p>ed = 1 + k2(p-1)(q-1)</p><p>对 1 式两端同乘 e，得</p><p>e * dp ≡ ed mod (p-1)</p><p>e * dp = k1(p-1) + ed</p><p>代入 ed 得</p><p>e * dp = k1(p-1) + 1 + k2(p-1)(q-1)</p><p>由于两个未知数略显麻烦，发现公因子(p-1)，等式两边同时取余p-1，即可消掉 n</p><p>e * dp ≡ 1 mod (p-1)</p><p>e * dp =k(p-1) + 1</p><p>得到这个式子后，其实真正意义上的未知数只有我们要求的p，但是还存在一个 k。</p><p>针对 k，我们判断一下他的范围，看看能否采用爆破的方式。</p><p>k = (e * dp - 1)/(p-1)</p><p>因为 dp &lt; p-1</p><p>所以 k &lt; e</p><p>通过遍历 k 然后找到(e * dp - 1)可以整除 k 的情况即可。</p><p>(跑了一下发现限制条件还不够)</p><p>因此再加一个 n 能否整除 p 即可。</p><h3 id="exp-4">EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br>dp = <span class="hljs-number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br>c = <span class="hljs-number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br><span class="hljs-comment"># p = 13468634736343473907717969603434376212206335187555458742257940406618189481177835992217885676243155145465521141546915941147336786447889325606555333350540003</span><br><span class="hljs-comment"># q = 18432009829596386103558375461387837845170621179295293289126504231317130550979989727125205467379713835047300158256398009229511746203459540859429194971855371</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> (e*dp-<span class="hljs-number">1</span>)%k == <span class="hljs-number">0</span>:<br>        p=(e*dp-<span class="hljs-number">1</span>)//k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n%p == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(p)<br>            <span class="hljs-keyword">break</span><br>q=n//p<br>phi= (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d= gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125;</span><br></code></pre></td></tr></table></figure><h1 id="dlp">DLP</h1><h2 id="magichitcon2021">magic(hitcon2021)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br>magic=<span class="hljs-string">b&#x27;e0204eeaf14d72ab90e1f7ac69559dd182&#x27;</span><br>LEN = <span class="hljs-number">17</span><br>magic = os.urandom(LEN)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Magic:&quot;</span>, magic.<span class="hljs-built_in">hex</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Coud you use it to do encryption as hash?&#x27;</span>)<br><br>magic_num = bytes_to_long(magic)<br><span class="hljs-keyword">try</span>:<br>    N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;N:&gt;&#x27;</span>))<br>    e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;E:&gt;&#x27;</span>))<br>    data = long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;data:&gt;&#x27;</span>), <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">if</span> N &gt;&gt; (<span class="hljs-number">248</span>) == magic_num:<br>        data2 = sha384(data).digest()<br>        num1 = bytes_to_long(data)<br>        num2 = bytes_to_long(data2)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(num1, e, N) == num2:<br>            <span class="hljs-built_in">print</span>(os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try harder!!!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try harder!&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;invalid&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="exp-5">EXP</h3><h1 id="rabin">rabin</h1><p>适用于 RSA 中 e=2 的情况</p><h2 id="pqpqseccon2022">pqpq(seccon2022)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>r = getPrime(<span class="hljs-number">512</span>)<br>n = p * q * r<br>e = <span class="hljs-number">2</span> * <span class="hljs-number">65537</span><br><br><span class="hljs-keyword">assert</span> n.bit_length() // <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(flag) &gt; <span class="hljs-number">0</span><br>padding = get_random_bytes(n.bit_length() // <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(flag))<br>m = bytes_to_long(padding + flag)<br><br><span class="hljs-keyword">assert</span> m &lt; n<br><br>c1p = <span class="hljs-built_in">pow</span>(p, e, n)<br>c1q = <span class="hljs-built_in">pow</span>(q, e, n)<br>cm = <span class="hljs-built_in">pow</span>(m, e, n)<br>c1 = (c1p - c1q) % n<br>c2 = <span class="hljs-built_in">pow</span>(p - q, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-comment"># p^e - q^e mod n</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&quot;</span>)<br><span class="hljs-comment"># (p-q)^e mod n</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c2 = <span class="hljs-subst">&#123;c2&#125;</span>&quot;</span>)<br><span class="hljs-comment"># m^e mod n</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cm = <span class="hljs-subst">&#123;cm&#125;</span>&quot;</span>)<br><span class="hljs-comment"># e = 131074</span><br><span class="hljs-comment"># n = 587926815910957928506680558951380405698765957736660571041732511939308424899531125274073420353104933723578377320050609109973567093301465914201779673281463229043539776071848986139657349676692718889679333084650490543298408820393827884588301690661795023628407437321580294262453190086595632660415087049509707898690300735866307908684649384093580089579066927072306239235691848372795522705863097316041992762430583002647242874432616919707048872023450089003861892443175057</span><br><span class="hljs-comment"># c1 = 92883677608593259107779614675340187389627152895287502713709168556367680044547229499881430201334665342299031232736527233576918819872441595012586353493994687554993850861284698771856524058389658082754805340430113793873484033099148690745409478343585721548477862484321261504696340989152768048722100452380071775092776100545951118812510485258151625980480449364841902275382168289834835592610827304151460005023283820809211181376463308232832041617730995269229706500778999</span><br><span class="hljs-comment"># c2 = 46236476834113109832988500718245623668321130659753618396968458085371710919173095425312826538494027621684566936459628333712619089451210986870323342712049966508077935506288610960911880157875515961210931283604254773154117519276154872411593688579702575956948337592659599321668773003355325067112181265438366718228446448254354388848428310614023369655106639341893255469632846938342940907002778575355566044700049191772800859575284398246115317686284789740336401764665472</span><br><span class="hljs-comment"># cm = 357982930129036534232652210898740711702843117900101310390536835935714799577440705618646343456679847613022604725158389766496649223820165598357113877892553200702943562674928769780834623569501835458020870291541041964954580145140283927441757571859062193670500697241155641475887438532923910772758985332976303801843564388289302751743334888885607686066607804176327367188812325636165858751339661015759861175537925741744142766298156196248822715533235458083173713289585866</span><br><br><br></code></pre></td></tr></table></figure><h3 id="大致思路">大致思路</h3><p>根据题目，可先通过计算 c1、c2 表达式，合并找出公因子，即可求出p、q，从而 r 也可求得。 发现 e=65537 * 2，因此是无逆元存在的，索性就将 e拆分为 65537 与 2，e2=2 时便可通过 Rabin 算法解密。</p><h3 id="求-pqr">求 p、q、r</h3><p><span class="math inline">\(c2 = (p - q)^e \mod n \\\)</span>左右同乘 r <span class="math inline">\(c2 * r = rp^e + rq^e + X*pqr =rp^e + rq^e \mod n\\\)</span> <span class="math inline">\(c2 = p^e + q^e\mod n\\\)</span> 同理得到<span class="math inline">\(c1 = p^e - q^e\mod n \\\)</span> 从而求得 p、q <spanclass="math inline">\(p=gcd(c1+c2,n)\\\)</span></p><p><span class="math inline">\(q=gcd(c1-c2,n)\\\)</span></p><h3 id="求解-m2">求解 m^2</h3><p><span class="math inline">\(\phi(n)=(p-1)*(q-1)*(r-1)\\\)</span> 通过e1(e/2)和<span class="math inline">\(\phi(n)\)</span>求出 d，得到<spanclass="math inline">\(cm^d=m^{2*e1*d}=m^2 \mod n\)</span></p><h3 id="rabin-解密">Rabin 解密</h3><p>接下来就是传统 Rabin 解密，找了两种脚本，exp中的<code>sqrtPrime(n,p)</code>和<code>Tonelli_Shanks(n,p)</code>任选其一即可，都是基于二次剩余定理所实现的解密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqrtPrime</span>(<span class="hljs-params">n, p</span>):<br>    q = p - <span class="hljs-number">1</span><br>    m = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> q &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>        q &gt;&gt;= <span class="hljs-number">1</span><br>        m += <span class="hljs-number">1</span><br><br>    z = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">pow</span>(z, (p - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>, p) == <span class="hljs-number">1</span>:<br>        z = random.randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><br>    c = <span class="hljs-built_in">pow</span>(z, q, p)<br>    t = <span class="hljs-built_in">pow</span>(n, q, p)<br>    r = <span class="hljs-built_in">pow</span>(n, (q + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>, p)<br>    <span class="hljs-keyword">if</span> t == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    m -= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> t != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">pow</span>(t, <span class="hljs-number">2</span>**m, p) == <span class="hljs-number">1</span>:<br>            c = c * c % p<br>            m -= <span class="hljs-number">1</span><br>        r = r * c % p<br>        c = c * c % p<br>        t = t * c % p<br>        m -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Legendre</span>(<span class="hljs-params">n,p</span>): <span class="hljs-comment"># 这里用勒让德符号来表示判断二次（非）剩余的过程</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(n,(p - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Tonelli_Shanks</span>(<span class="hljs-params">n,p</span>):<br>    <span class="hljs-keyword">assert</span> Legendre(n,p) == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> p % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(n,(p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>,p)<br>    q = p - <span class="hljs-number">1</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> q % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        q = q // <span class="hljs-number">2</span><br>        s += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,p):<br>        <span class="hljs-keyword">if</span> Legendre(z,p) == p - <span class="hljs-number">1</span>:<br>            c = <span class="hljs-built_in">pow</span>(z,q,p)<br>            <span class="hljs-keyword">break</span><br>    r = <span class="hljs-built_in">pow</span>(n,(q + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>,p)<br>    t = <span class="hljs-built_in">pow</span>(n,q,p)<br>    m = s<br>    <span class="hljs-keyword">if</span> t % p == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> r<br>    <span class="hljs-keyword">else</span>:<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> t % p != <span class="hljs-number">1</span>: <span class="hljs-comment"># 外层循环的判断条件</span><br>            temp = <span class="hljs-built_in">pow</span>(t,<span class="hljs-number">2</span>**(i+<span class="hljs-number">1</span>),p) <span class="hljs-comment"># 这里写作i+1是为了确保之后内层循环用到i值是与这里的i+1的值是相等的</span><br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> temp % p == <span class="hljs-number">1</span>: <span class="hljs-comment"># 内层循环的判断条件</span><br>                b = <span class="hljs-built_in">pow</span>(c,<span class="hljs-number">2</span>**(m - i - <span class="hljs-number">1</span>),p)<br>                r = r * b % p<br>                c = b * b % p<br>                t = t * c % p<br>                m = i<br>                i = <span class="hljs-number">0</span> <span class="hljs-comment"># 注意每次内层循环结束后i值要更新为0</span><br>        <span class="hljs-keyword">return</span> r<br><br>e = <span class="hljs-number">131074</span><br>e = <span class="hljs-number">65537</span>*<span class="hljs-number">2</span><br>n = <span class="hljs-number">587926815910957928506680558951380405698765957736660571041732511939308424899531125274073420353104933723578377320050609109973567093301465914201779673281463229043539776071848986139657349676692718889679333084650490543298408820393827884588301690661795023628407437321580294262453190086595632660415087049509707898690300735866307908684649384093580089579066927072306239235691848372795522705863097316041992762430583002647242874432616919707048872023450089003861892443175057</span><br>c1 = <span class="hljs-number">92883677608593259107779614675340187389627152895287502713709168556367680044547229499881430201334665342299031232736527233576918819872441595012586353493994687554993850861284698771856524058389658082754805340430113793873484033099148690745409478343585721548477862484321261504696340989152768048722100452380071775092776100545951118812510485258151625980480449364841902275382168289834835592610827304151460005023283820809211181376463308232832041617730995269229706500778999</span><br>c2 = <span class="hljs-number">46236476834113109832988500718245623668321130659753618396968458085371710919173095425312826538494027621684566936459628333712619089451210986870323342712049966508077935506288610960911880157875515961210931283604254773154117519276154872411593688579702575956948337592659599321668773003355325067112181265438366718228446448254354388848428310614023369655106639341893255469632846938342940907002778575355566044700049191772800859575284398246115317686284789740336401764665472</span><br>cm = <span class="hljs-number">357982930129036534232652210898740711702843117900101310390536835935714799577440705618646343456679847613022604725158389766496649223820165598357113877892553200702943562674928769780834623569501835458020870291541041964954580145140283927441757571859062193670500697241155641475887438532923910772758985332976303801843564388289302751743334888885607686066607804176327367188812325636165858751339661015759861175537925741744142766298156196248822715533235458083173713289585866</span><br>p = GCD(c1+c2,n)<br>q = GCD(c1-c2,n)<br>r = n//(p*q)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br>d0=gmpy2.invert(<span class="hljs-number">65537</span>,phi)<br>m2=<span class="hljs-built_in">pow</span>(cm,d0,n)<br>cp=m2%p<br>cq=m2%q<br>cr=m2%r<br>mp=sqrtPrime(cp,p)<br>mq=sqrtPrime(cq,q)<br>mr=sqrtPrime(cr,r)<br><br>mp=Tonelli_Shanks(cp,p)<br>mq=Tonelli_Shanks(cq,q)<br>mr=Tonelli_Shanks(cr,r)<br><br><span class="hljs-keyword">for</span> mp1,mq1,mr1 <span class="hljs-keyword">in</span> product([mp,p-mp],[mq,q-mq],[mr,r-mr]):<br>    x=[mp1,mq1,mr1]<br>    y=[p,q,r]<br>    <span class="hljs-built_in">print</span>(long_to_bytes(crt(y,x)[<span class="hljs-number">0</span>]))<br><br><span class="hljs-comment">#SECCON&#123;being_able_to_s0lve_this_1s_great!&#125;</span><br></code></pre></td></tr></table></figure><h1 id="e-与-phi-不互素">e 与 phi 不互素</h1><h2 id="mgcd-n">m^GCD &lt; n</h2><p>求出<span class="math inline">\(d*t\)</span>后，对<spanclass="math inline">\(m\)</span>开<spanclass="math inline">\(t\)</span>次方根。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag=<span class="hljs-string">b&#x27;flag&#123;dsajhkdhsajkdh&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    e = random.getrandbits(<span class="hljs-number">128</span>)<br>    p=getPrime(<span class="hljs-number">1024</span>)<br>    q=getPrime(<span class="hljs-number">1024</span>)<br>    n=p*q<br>    phi_n=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    t=gmpy2.gcd(e,phi_n)<br>    <span class="hljs-keyword">if</span>  gmpy2.invert(e // t, phi_n) <span class="hljs-keyword">and</span> t!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> m^t &lt; n:<br>        <span class="hljs-keyword">break</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-comment"># decrypt</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>t=GCD(e,phi)<br>n=p*q<br>d=gmpy2.invert(e//t,phi)<br>m0=<span class="hljs-built_in">pow</span>(c,d,n)<br>m=gmpy2.iroot(m0,t)<br><span class="hljs-built_in">print</span>(long_to_bytes(m[<span class="hljs-number">0</span>]))<br><br></code></pre></td></tr></table></figure><h2 id="mgcd-n-1">m^GCD &gt; n</h2><p><span class="math display">\[t=GCD(e,phi)\]</span> <spanclass="math display">\[d=inverse(e//t,phi)\]</span> <spanclass="math display">\[c=pow(c,d,n)\]</span> 使用 CRT 进行有限域开根<span class="math display">\[x^t\;=c\;mod\;p\]</span> <spanclass="math display">\[x^t\;=c\;mod\;q\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">p, q, e, c</span>):<br>    R.&lt; x &gt; = Zmod(p)[]<br>    f = x ^ e - c<br>    f = f.monic()<br>    res1 = f.roots()<br><br>    R.&lt; x &gt; = Zmod(q)[]<br>    f = x ^ e - c<br>    f = f.monic()<br>    res2 = f.roots()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res1:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> res2:<br>            m = CRT(<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(j[<span class="hljs-number">0</span>]), p, q)<br>            flag = long_to_bytes(m)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>                <span class="hljs-built_in">print</span>(flag)<br>                <span class="hljs-built_in">print</span>(bytes_to_long(flag))<br><br></code></pre></td></tr></table></figure><h2 id="amm">AMM</h2><p>适用于<span class="math inline">\(e\)</span>可整除<spanclass="math inline">\(\phi\)</span>的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sage</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># About 3 seconds to run</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AMM</span>(<span class="hljs-params">o, r, q</span>):<br>    start = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r, o, q))<br>    g = GF(q)<br>    o = g(o)<br>    p = g(random.randint(<span class="hljs-number">1</span>, q))<br>    <span class="hljs-keyword">while</span> p ^ ((q-<span class="hljs-number">1</span>) // r) == <span class="hljs-number">1</span>:<br>        p = g(random.randint(<span class="hljs-number">1</span>, q))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(p))<br>    t = <span class="hljs-number">0</span><br>    s = q - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> s % r == <span class="hljs-number">0</span>:<br>        t += <span class="hljs-number">1</span><br>        s = s // r<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s, t))<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (k * s + <span class="hljs-number">1</span>) % r != <span class="hljs-number">0</span>:<br>        k += <span class="hljs-number">1</span><br>    alp = (k * s + <span class="hljs-number">1</span>) // r<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(alp))<br>    a = p ^ (r**(t-<span class="hljs-number">1</span>) * s)<br>    b = o ^ (r*alp - <span class="hljs-number">1</span>)<br>    c = p ^ s<br>    h = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t):<br>        d = b ^ (r^(t-<span class="hljs-number">1</span>-i))<br>        <span class="hljs-keyword">if</span> d == <span class="hljs-number">1</span>:<br>            j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Calculating DLP...&#x27;</span>)<br>            j = - discrete_log(a, d)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Finish DLP...&#x27;</span>)<br>        b = b * (c^r)^j<br>        h = h * c^j<br>        c = c ^ r<br>    result = o^alp * h<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="hljs-built_in">format</span>(end - start))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(result))<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findAllPRoot</span>(<span class="hljs-params">p, e</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(e, p))<br>    start = time.time()<br>    proot = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(proot) &lt; e:<br>        proot.add(<span class="hljs-built_in">pow</span>(random.randint(<span class="hljs-number">2</span>, p-<span class="hljs-number">1</span>), (p-<span class="hljs-number">1</span>)//e, p))<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="hljs-built_in">format</span>(end - start))<br>    <span class="hljs-keyword">return</span> proot<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findAllSolutions</span>(<span class="hljs-params">mp, proot, cp, p</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Start to find all the &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(e, cp, p))<br>    start = time.time()<br>    all_mp = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> proot:<br>        mp2 = mp * root % p<br>        <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">pow</span>(mp2, e, p) == cp)<br>        all_mp.add(mp2)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="hljs-built_in">format</span>(end - start))<br>    <span class="hljs-keyword">return</span> all_mp<br><br><br>e = <span class="hljs-number">0x1337</span><br>p = <span class="hljs-number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span><br>q = <span class="hljs-number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span><br>n = p * q<br>c=<span class="hljs-number">10562302690541901187975815594605242014385201583329309191736952454310803387032252007244962585846519762051885640856082157060593829013572592812958261432327975138581784360302599265408134332094134880789013207382277849503344042487389850373487656200657856862096900860792273206447552132458430989534820256156021128891296387414689693952047302604774923411425863612316726417214819110981605912408620996068520823370069362751149060142640529571400977787330956486849449005402750224992048562898004309319577192693315658275912449198365737965570035264841782399978307388920681068646219895287752359564029778568376881425070363592696751183359</span><br><br>cp = c % p<br>cq = c % q<br>mp = AMM(cp, e, p)<br>mq = AMM(cq, e, q)<br>p_proot = findAllPRoot(p, e)<br>q_proot = findAllPRoot(q, e)<br>mps = findAllSolutions(mp, p_proot, cp, p)<br>mqs = findAllSolutions(mq, q_proot, cq, q)<br><span class="hljs-built_in">print</span>(mps, mqs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">m</span>):<br>    h = m.<span class="hljs-built_in">hex</span>()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) &amp; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">bytes</span>.fromhex(h).startswith(<span class="hljs-string">b&#x27;flag&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(h))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-comment"># About 16 mins to run 0x1337^2 == 24196561 times CRT</span><br>start = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Start CRT...&#x27;</span>)<br><span class="hljs-keyword">for</span> mpp <span class="hljs-keyword">in</span> mps:<br>    <span class="hljs-keyword">for</span> mqq <span class="hljs-keyword">in</span> mqs:<br>        solution = CRT_list([<span class="hljs-built_in">int</span>(mpp), <span class="hljs-built_in">int</span>(mqq)], [p, q])<br>        <span class="hljs-keyword">if</span> check(solution):<br>            <span class="hljs-built_in">print</span>(solution)<br>    <span class="hljs-built_in">print</span>(time.time() - start)<br><br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="hljs-built_in">format</span>(end - start))<br><br></code></pre></td></tr></table></figure><h1 id="已知-pq-和-pq">已知 p^q 和 p*q</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">n, x</span>):<br>    a = [<span class="hljs-number">0</span>]<br>    b = [<span class="hljs-number">0</span>]<br>    maskx = <span class="hljs-number">1</span><br>    maskn = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1024</span>):<br>        xbit = (x &amp; maskx) &gt;&gt; i<br>        nbit = n % maskn<br>        t_a = []<br>        t_b = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            <span class="hljs-keyword">for</span> aa <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">for</span> bb <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                    <span class="hljs-keyword">if</span> aa ^ bb == xbit:<br>                        tmp2 = n % maskn<br>                        tmp1 = (aa * maskn // <span class="hljs-number">2</span> + a[j]) * (bb * maskn // <span class="hljs-number">2</span> + b[j]) % maskn<br>                        <span class="hljs-keyword">if</span> tmp1 == tmp2:<br>                            t_a.append(aa * maskn // <span class="hljs-number">2</span> + a[j])<br>                            t_b.append(bb * maskn // <span class="hljs-number">2</span> + b[j])<br>        maskx *= <span class="hljs-number">2</span><br>        maskn *= <span class="hljs-number">2</span><br>        a = t_a<br>        b = t_b<br>    <span class="hljs-keyword">for</span> a1, b1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>        <span class="hljs-keyword">if</span> a1 * b1 == n1:<br>            <span class="hljs-keyword">return</span> a1, b1<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本原理&quot;&gt;基本原理&lt;/h1&gt;
&lt;p&gt;RSA 中加、解密：&lt;/p&gt;
&lt;p&gt;加密&lt;span class=&quot;math inline&quot;&gt;\(c = m^e\quad mod\quad n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;解密&lt;span class=&quot;math inlin</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>ECC(持续更新🥱)</title>
    <link href="https://sch01ar.github.io/2023/04/19/ECC/"/>
    <id>https://sch01ar.github.io/2023/04/19/ECC/</id>
    <published>2023-04-19T06:05:45.000Z</published>
    <updated>2023-05-01T14:49:32.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ecc">ECC</h1><p>椭圆曲线密码学(Elliptic CurveCryptography)，是一种基于椭圆曲线数学的公钥密码。</p><p>基于 ECC的三大问题：<strong>密钥交换</strong>、<strong>数字签名</strong>、<strong>离散对数</strong></p><h2 id="椭圆曲线">椭圆曲线</h2><p>椭圆曲线定义式：<spanclass="math inline">\(y^2\;=x^3+ax+b\)</span>，（维尔斯特拉斯标准形式）</p><p>曲线的一般形式：<spanclass="math inline">\(y^2+a_1xy+a_3y\;=x^3+a_2x^2+a_4x+a_6\)</span></p><p>判别式<spanclass="math inline">\(\Delta=-16(4a^3+27b^2)\;mod\;p=0\)</span></p><h3 id="曲线性质">曲线性质</h3><p>椭圆曲线上的困难问题:<spanclass="math inline">\(Q=nP\)</span>，给定椭圆曲线上<spanclass="math inline">\(P、Q\)</span>两点，求<spanclass="math inline">\(n\)</span>十分困难</p><h4 id="point-addition-点加法">point addition 点加法</h4><p>沿曲线的 P + Q两点画一条通过两点的直线。现在继续这条线，直到它第三次与你的曲线相交。最后在该点沿y 轴的方向取反射。 <spanclass="math inline">\(P+Q+R&#39;=0,R=P+Q,R&#39;(x,-y)=R(x,y)\)</span><img src="/img/ECClines.png" /></p><h4 id="有限域">有限域</h4><p>定义在有限域<span class="math inline">\(F_p\)</span>上，零元是<spanclass="math inline">\(O\)</span></p><p><strong>点的阶:</strong>对于椭圆曲线上一点<spanclass="math inline">\(P\)</span>，若存在一个最小的正整数<spanclass="math inline">\(n\)</span>，使得<spanclass="math inline">\(nP=O\)</span>，则称<spanclass="math inline">\(n\)</span>是点<spanclass="math inline">\(P\)</span>的阶。</p><p><strong>椭圆曲线的阶:</strong>每个在有限域上的椭圆曲线都由有限个点组成，有多少个点椭圆曲线的阶就是多少。</p><h3 id="sage-环境">Sage 环境</h3><p>在线环境<a href="https://sagecell.sagemath.org/"class="uri">https://sagecell.sagemath.org/</a></p><p>本地环境<ahref="https://doc.sagemath.org/html/en/installation/index.html"class="uri">https://doc.sagemath.org/html/en/installation/index.html</a>(推荐在 Linux 环境搭建)</p><p>基本语法<a href="https://www.osgeo.cn/sagemath/tutorial/index.html"class="uri">https://www.osgeo.cn/sagemath/tutorial/index.html</a></p><h4 id="简单运算">简单运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">497</span><br>b = <span class="hljs-number">1768</span><br>p = <span class="hljs-number">9739</span><br>E = EllipticCurve(GF(p), [a, b])<br>Q = E(<span class="hljs-number">1539</span>, <span class="hljs-number">4742</span>)<br>R = E(<span class="hljs-number">4403</span>,<span class="hljs-number">5202</span>)<br>P = E(<span class="hljs-number">2339</span>, <span class="hljs-number">2213</span>)<br><span class="hljs-built_in">print</span>(P+Q)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span>*R)<br></code></pre></td></tr></table></figure><h2 id="ecdh密钥交换">ECDH（密钥交换）</h2><p>ECDH 是椭圆曲线迪菲-赫尔曼秘钥交换（Elliptic Curve Diffie–Hellman keyExchange），主要是用来在一个不安全的通道中建立起安全的共有加密资料，一般来说交换的都是私钥。</p><h3 id="算法交换过程">算法交换过程</h3><p><strong>公有参数</strong>：<spanclass="math inline">\(p,g\)</span></p><p><strong>Alice 私钥</strong>：大整数<spanclass="math inline">\(a\)</span></p><p><strong>生成 Alice 公钥</strong>：<spanclass="math inline">\(A=g^a\;\mod\;p\)</span></p><p>Alice 将<span class="math inline">\(A,p,g\)</span>传递给 Bob</p><p><strong>Bob 私钥</strong>：大整数<spanclass="math inline">\(b\)</span></p><p><strong>生成 Bob 公钥</strong>：<spanclass="math inline">\(B=g^b\;\mod\;p\)</span></p><p><strong>Bob 计算公共密钥</strong>：<spanclass="math inline">\(K=A^b\;\mod\;p\)</span></p><p>Bob 将<span class="math inline">\(B,p,g\)</span>传递给 Alice<strong>Alice 计算公共密钥</strong>：<spanclass="math inline">\(K=B^a\;\mod\;p\)</span></p><p>交换完成，二者协商出<code>K</code>公共密钥，并且未在传输过程中暴露K。</p><h3id="an_der_schonen_elliptische_kurve">An_der_schonen_Elliptische_Kurve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG, ECDH_KEY_EXCHANGE<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">import</span> binascii<br><br>iv = urandom(<span class="hljs-number">16</span>)<br><br><br>a = <span class="hljs-number">14489</span><br>b = <span class="hljs-number">10289</span><br>p = <span class="hljs-number">7486573182795736771889604737751889118967735916352298289975055815020934891723453392369540853603360270847848895677903334441530052977221688450741083448029661</span><br><br>F = GF(p)<br>E = EllipticCurve(F, [a, b])<br><br>G = E.random_point()<br><br>my_private_key = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">256</span>)<br><br>shared, sender_public_key = ECDH_KEY_EXCHANGE(G, my_private_key)<br><br>key = md5(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(shared.xy()[<span class="hljs-number">0</span>])).encode()).digest()<br><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br>ciphretext = cipher.encrypt(FLAG)<br><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(sender_public_key)<br><span class="hljs-built_in">print</span>(my_private_key)<br><span class="hljs-built_in">print</span>(ciphretext.<span class="hljs-built_in">hex</span>())<br><span class="hljs-built_in">print</span>(iv.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h3 id="exp">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br>a=<span class="hljs-number">14489</span><br>b=<span class="hljs-number">10289</span><br>p=<span class="hljs-number">7486573182795736771889604737751889118967735916352298289975055815020934891723453392369540853603360270847848895677903334441530052977221688450741083448029661</span><br>F=GF(p)<br>E=EllipticCurve(F,[a,b])<br>sender_public_key=E([<span class="hljs-number">1285788649714386836892440333012889444698233333809489364474616947934542770724999997145538088456652601147045234490019282952264340541239682982255115303711207</span>,<span class="hljs-number">1081635450946385063319483423983665253792071829707039194609541132041775615770167048603029155228167113450196436786905820356216200242445665942628721193713459</span>])<br>my_private_key=<span class="hljs-number">2549545681219766023689977461986014915946503806253877534915175093306317852773</span><br>cipher=<span class="hljs-string">&quot;2f65ff4a97e0e05c06eab06b58ea38a3d5b6d2a65ea4907bc46493b30081a211d7cffc872a23dbd565ef307f9492bb23&quot;</span><br>iv=<span class="hljs-string">&quot;d151c04c645c3e2a8d3f1ae44589ef20&quot;</span><br>iv=<span class="hljs-built_in">bytes</span>.fromhex(iv)<br>c=<span class="hljs-built_in">bytes</span>.fromhex(cipher)<br><br>F = GF(p)<br>E = EllipticCurve(F, [a, b])<br><br>shared=sender_public_key*my_private_key<br><br>key = md5(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(shared.xy()[<span class="hljs-number">0</span>])).encode()).digest()<br><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br>m=cipher.decrypt(c)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h2 id="ecdsa数字签名">ECDSA（数字签名）</h2><p>基于椭圆曲线的 DSA</p><h3 id="场景">场景</h3><p>Alice 想要使用她的私钥<spanclass="math inline">\(d_A\)</span>来签名，Bob 想用 Alice 的公钥 <spanclass="math inline">\(H_A\)</span>要验证签名<spanclass="math inline">\(H_A=d_AG\)</span>。 只有 Alice才能提供正确的签名，而每个人都可以验证签名。</p><h3 id="签名">签名</h3><p>1.选定一条椭圆曲线<span class="math inline">\(E_p(a,b)\)</span>。</p><p>2.选取一个随机数<spanclass="math inline">\(k,1&lt;k&lt;n-1\)</span>，<spanclass="math inline">\(n\)</span>为椭圆曲线的阶。</p><p>3.选取椭圆曲线的基点<span class="math inline">\(G(a,b)\)</span>,计算<span class="math inline">\(K=k * G(a,b)\)</span>，令<spanclass="math inline">\(r=K[0]\mod n\)</span>，即 r 是 K 点的横坐标（若 r为 0，重新选 k 进行计算）。</p><p>4.计算明文 M 的哈希，令<spanclass="math inline">\(e=hash(M)\)</span>，计算<spanclass="math inline">\(s=k^{-1}(z+rd_A)\mod n\)</span>。</p><p>5.给出签名<span class="math inline">\((r,s)\)</span></p><h3 id="验证">验证</h3><p>1.计算 <span class="math inline">\(u_1=s^{-1}z\mod n\)</span></p><p>2.计算 <span class="math inline">\(u_2=s^{-1}r\mod n\)</span></p><p>3.计算点<span class="math inline">\(P=u_1G+u_2H_A\)</span></p><p>当<span class="math inline">\(r=x_P\modn\)</span>时，签名验证成功。</p><h3 id="dsa-lcg">DSA-LCG</h3><p><ahref="https://cseweb.ucsd.edu/~mihir/papers/dss-lcg.pdf">试试这个</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha384, sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> k,privkey,flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">msg, privkey,k,order</span>):<br>    e = <span class="hljs-built_in">int</span>(sha384(msg).hexdigest(), <span class="hljs-number">16</span>)<br>    K = k*G<br>    r = <span class="hljs-built_in">int</span>(K[<span class="hljs-number">0</span>])<br>    k_ = inverse(k, order)<br>    s = k_ * (e + privkey * r) % order<br>    <span class="hljs-keyword">return</span> r, s<br><br>q = <span class="hljs-number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff</span><br>a = -<span class="hljs-number">3</span><br>b = <span class="hljs-number">0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef</span><br>M = <span class="hljs-number">8368031831458217786350512159882992957012870179737136526893923006288695827959478962195704930743648877201823593529339381563729143350454126812624495126388843</span><br>x = <span class="hljs-number">0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7</span><br>y = <span class="hljs-number">0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f</span><br>E = EllipticCurve(GF(q), [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a, b])<br>G = E([x,y])<br>msg1=<span class="hljs-string">b&#x27;hello&#x27;</span><br>r1,s1=sign(msg1,privkey,k,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r1 =&quot;</span>,r1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s1 =&quot;</span>,s1)<br>k2=(a*k+b) % M<br>msg2=<span class="hljs-string">b&#x27;world&#x27;</span><br>r2,s2=sign(msg2,privkey,k2,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r2 =&quot;</span>,r2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s2 =&quot;</span>,s2)<br>key = sha256(<span class="hljs-built_in">str</span>(privkey).encode()).digest()<br>aes = AES.new(key, AES.MODE_ECB)<br>ct = base64.b64encode(aes.encrypt(pad(flag, <span class="hljs-number">16</span>))).decode()<br><br><span class="hljs-comment"># r1 = 34007466611771601516061414360911609922088882193344157567527189819210008217689485940426747623610209785764754548617752</span><br><span class="hljs-comment"># s1 = 371900949338744788274672150932790711380367554085093925552194085487875492160150324907657343202698707270323127656622</span><br><span class="hljs-comment"># r2 = 38135753943982836042572890793143465851493833988864701898930580343563479696256688655279135669457443358334628248476702</span><br><span class="hljs-comment"># s2 = 31206970698882787218208833552853920421221998187963884172949797755468379329952479963343252649210115334349094354726288</span><br><span class="hljs-comment"># ct = &quot;1Emwfale6VRBTlkcNZA3wiiNXrOqeifOC53/jXc+gT9Dv9r5I/q0EJKAgkt/sArW&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="ecdlp离散对数">ECDLP（离散对数）</h2><p>给定椭圆曲线 E，已知 P、Q 以及<spanclass="math inline">\(Q=kP\)</span>，求 k。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">E = EllipticCurve(GF(p), [a, b])<br>Q = E(x1,y1)<br>P = E(x2,y2)<br>k=P.discrete_log(Q)<br></code></pre></td></tr></table></figure><h3 id="ph-光滑阶分解">PH 光滑阶分解</h3><h4 id="crypto-sign-in-1vnctf2023">crypto-sign-in-1(VNCTF2023)</h4><p>一道 ECDLP题目，当时想到使用<code>Pohlig-Hellman</code>算法，但是一直没能找到合适的A、B 来确定 G 的阶 n，赛后看大佬 wp，果然是用 pwntools 远程多试几组y1、y2，找到光滑的阶，从而解密成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> sympy.ntheory.residue_ntheory <span class="hljs-keyword">import</span> nthroot_mod<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange,choice<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><br>table = string.ascii_letters+string.digits<br><br>nbit = <span class="hljs-number">128</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m,lenth</span>):<br>    <span class="hljs-keyword">return</span> m + <span class="hljs-built_in">bytes</span>([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lenth-<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(m)%lenth))])<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = self.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            self.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;&#x27;</span></span>):<br>        self.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> self._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        proof = (<span class="hljs-string">&#x27;&#x27;</span>.join([choice(table)<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])).encode()<br>        sha = sha256(proof).hexdigest().encode()<br>        self.send(<span class="hljs-string">b&quot;[+] sha256(XXXX+&quot;</span> + proof[<span class="hljs-number">4</span>:] + <span class="hljs-string">b&quot;) == &quot;</span> + sha )<br>        XXXX = self.recv(prompt = <span class="hljs-string">b&#x27;[+] Plz Tell Me XXXX :&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(XXXX) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(XXXX + proof[<span class="hljs-number">4</span>:]).hexdigest().encode() != sha:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        proof = self.proof_of_work()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> proof:<br>            self.request.close()<br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            qa = randrange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**<span class="hljs-number">31</span>) * <span class="hljs-number">2</span><br>            qb = getPrime(nbit - <span class="hljs-number">32</span>)<br>            <span class="hljs-keyword">if</span> isPrime(qa * qb + <span class="hljs-number">1</span>):<br>                q = qa * qb + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">b&#x27;vnctf2023&#x27;</span>) - <span class="hljs-number">8</span>):<br>            self.send(<span class="hljs-string">b&quot;Send 2 `y&#x27; elements to me:  &quot;</span>)<br>            ans = self.recv()<br>            <span class="hljs-keyword">try</span>:<br>                y1, y2 = [<span class="hljs-built_in">int</span>(_) % q <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> ans.split(<span class="hljs-string">b&#x27;,&#x27;</span>)]<br>            <span class="hljs-keyword">except</span>:<br>                self.send(<span class="hljs-string">b&quot;Your parameters are not valid! Bye!!&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br>            AA = (y1**<span class="hljs-number">2</span> - y2**<span class="hljs-number">2</span> - <span class="hljs-number">2022</span>**<span class="hljs-number">3</span> + <span class="hljs-number">2023</span>**<span class="hljs-number">3</span>) * inverse(-<span class="hljs-number">1</span>, q) % q<br>            BB = (y1**<span class="hljs-number">2</span> - <span class="hljs-number">2022</span>**<span class="hljs-number">3</span> - AA * <span class="hljs-number">2022</span>) % q<br><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">P,Q</span>):<br>                <span class="hljs-keyword">if</span> P[<span class="hljs-number">0</span>] != Q[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> P[<span class="hljs-number">1</span>] != Q[<span class="hljs-number">1</span>]:<br>                    t = ((Q[<span class="hljs-number">1</span>]-P[<span class="hljs-number">1</span>]) * inverse(Q[<span class="hljs-number">0</span>]-P[<span class="hljs-number">0</span>],q)) %q<br>                <span class="hljs-keyword">else</span>:<br>                    t = ((<span class="hljs-number">3</span>*P[<span class="hljs-number">0</span>]*P[<span class="hljs-number">0</span>]+AA)*inverse(<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>],q))%q<br>                x3 = t*t - P[<span class="hljs-number">0</span>] - Q[<span class="hljs-number">0</span>]<br>                y3 = t*(P[<span class="hljs-number">0</span>] - x3) - P[<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">return</span> (x3%q, y3%q)<br><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">t, A, B=<span class="hljs-number">0</span></span>):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t: <span class="hljs-keyword">return</span> B<br>                <span class="hljs-keyword">return</span> mul(t//<span class="hljs-number">2</span>, add(A,A), B <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t&amp;<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> add(B,A) <span class="hljs-keyword">if</span> B <span class="hljs-keyword">else</span> A)<br><br>            <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>                Gx = randrange(<span class="hljs-number">0</span>,q - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">try</span>:<br>                    Gy = <span class="hljs-built_in">int</span>(nthroot_mod((Gx**<span class="hljs-number">3</span> + AA * Gx + BB) % q,<span class="hljs-number">2</span>,q))<br>                    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">pow</span>(Gy,<span class="hljs-number">2</span>,q) == (Gx**<span class="hljs-number">3</span> + AA * Gx + BB) % q)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">continue</span><br><br>            G = (Gx,Gy)<br>            m = randrange(<span class="hljs-number">0</span>,q-<span class="hljs-number">1</span>)<br>            C = mul(m,G)<br>            aes = AES.new(m.to_bytes(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;big&#x27;</span>), AES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">16</span>))<br>            enc_flag = aes.encrypt(pad(flag,<span class="hljs-number">16</span>))<br><br>            self.send(<span class="hljs-string">b&#x27;The parameters and encrypted flag are:&#x27;</span>)<br>            self.send(<span class="hljs-string">b&#x27;q = &#x27;</span> + <span class="hljs-built_in">str</span>(q).encode())<br>            self.send(<span class="hljs-string">b&#x27;G = (&#x27;</span>+ <span class="hljs-built_in">str</span>(Gx).encode() + <span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(Gy).encode() + <span class="hljs-string">b&#x27;)&#x27;</span>)<br>            self.send(<span class="hljs-string">b&#x27;m * G = (&#x27;</span>+ <span class="hljs-built_in">str</span>(C[<span class="hljs-number">0</span>]).encode() + <span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(C[<span class="hljs-number">1</span>]).encode() + <span class="hljs-string">b&#x27;)&#x27;</span>)<br>            self.send(<span class="hljs-string">b&#x27;encrypt flag = &#x27;</span> + enc_flag.<span class="hljs-built_in">hex</span>().encode())<br>        self.request.close()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10001</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HOST:POST &quot;</span> + HOST+<span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(PORT))<br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><h4 id="exp-1">EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> ast <span class="hljs-keyword">import</span> literal_eval<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>table = string.ascii_letters+string.digits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_connect_proof</span>():<br>    io=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;25385&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">b&quot;sha256(XXXX+&quot;</span>)<br>    alphabet = string.ascii_letters + string.digits<br>    lattar_part=io.recv(<span class="hljs-number">16</span>).decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">b&#x27;== &#x27;</span>)<br>    h=io.recvline().strip().decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    <span class="hljs-comment"># print(h)</span><br>    io.recvuntil(<span class="hljs-string">b&#x27;[+] Plz Tell Me XXXX :&#x27;</span>)<br>    bruteforce=[ <span class="hljs-string">&#x27;&#x27;</span>.join(prefix)+lattar_part  <span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> product(alphabet,repeat=<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> proof <span class="hljs-keyword">in</span> bruteforce:<br>        <span class="hljs-keyword">if</span> sha256(proof.encode()).hexdigest()==h:<br>            io.sendline(proof.encode()[:<span class="hljs-number">4</span>])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;proof done&quot;</span>)<br>            <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    io = set_connect_proof()<br>    io.recvuntil(<span class="hljs-string">b&quot;Send 2 `y&#x27; elements to me:  &quot;</span>)<br>    y1,y2 = getrandbits(<span class="hljs-number">128</span>),getrandbits(<span class="hljs-number">128</span>)<br>    io.sendline(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(y1)&#125;</span>,<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(y2)&#125;</span>&#x27;</span>.encode())<br>    q = <span class="hljs-built_in">int</span>(io.recvline_contains(<span class="hljs-string">b&#x27;q = &#x27;</span>).decode().strip()[<span class="hljs-number">4</span>:])<br>    G = literal_eval(io.recvline_contains(<span class="hljs-string">b&quot;G = &quot;</span>).decode().strip()[<span class="hljs-number">4</span>:])<br>    mG = literal_eval(io.recvline_contains(<span class="hljs-string">b&quot;m * G = &quot;</span>).decode().strip()[<span class="hljs-number">8</span>:])<br>    encflag = io.recvline_contains(<span class="hljs-string">b&#x27;encrypt flag = &#x27;</span>).decode().strip()[<span class="hljs-built_in">len</span>(<span class="hljs-string">b&#x27;encrypt flag = &#x27;</span>):]<br>    AA = (y1**<span class="hljs-number">2</span> - y2**<span class="hljs-number">2</span> - <span class="hljs-number">2022</span>**<span class="hljs-number">3</span> + <span class="hljs-number">2023</span>**<span class="hljs-number">3</span>) * inverse(-<span class="hljs-number">1</span>, q) % q<br>    BB = (y1**<span class="hljs-number">2</span> - <span class="hljs-number">2022</span>**<span class="hljs-number">3</span> - AA * <span class="hljs-number">2022</span>) % q<br>    E = EllipticCurve(GF(q), [AA, BB])<br>    g_order = E(G).order()<br>    order_ls = factor(g_order)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] G order <span class="hljs-subst">&#123;order_ls&#125;</span>&quot;</span>)<br>    sub_group_order = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> p,e <span class="hljs-keyword">in</span> order_ls:<br>        <span class="hljs-keyword">if</span> p.nbits() &lt;= <span class="hljs-number">42</span>:<br>            sub_group_order*= (p^e)<br>    expon = g_order//sub_group_order<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] <span class="hljs-subst">&#123;sub_group_order.nbits() = &#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> sub_group_order.nbits() &lt; <span class="hljs-number">120</span>:<br>        io.close()<br>        <span class="hljs-keyword">continue</span><br>    mm = discrete_log(expon*E(mG),expon*E(G),<span class="hljs-built_in">ord</span> = sub_group_order,operation = <span class="hljs-string">&quot;+&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] subgroup dlp (m mod <span class="hljs-subst">&#123;sub_group_order&#125;</span>) = &quot;</span>, mm)<br>    io.close()<br>    <span class="hljs-keyword">break</span><br><br>aes = AES.new(<span class="hljs-built_in">int</span>(mm).to_bytes(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;big&#x27;</span>), AES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">16</span>))<br>flag = aes.decrypt(<span class="hljs-built_in">bytes</span>.fromhex(encflag))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="singular-attack">Singular Attack</h3><p>利用曲线上的奇异点进行攻击，奇点就是该点导数不存在，或者导数为 0但不是极值点。 若椭圆曲线的判别式<spanclass="math inline">\(\Delta=-16(4a^3+27b^2)\;mod\;p=0\)</span>，说明该曲线有奇点。</p><h4 id="rwctf2023-体验赛">RWCTF2023 体验赛</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> u == w:<br>    m = (<span class="hljs-number">3</span>*u*w + <span class="hljs-number">4</span>*u + <span class="hljs-number">1</span>) * i(v+x)<br></code></pre></td></tr></table></figure><p>根据题目，可得到曲线关于 x 的导数，<spanclass="math inline">\(3x^2+4x+1\)</span>，所以可得到方程为<spanclass="math inline">\(y^2=x^3+2x^2+x+C\)</span></p><p>题目已知点(4,10)在曲线上，代入得到 100 = 64 + 32 + 4 + C，即 C =0，所以方程确定<span class="math inline">\(y^2=x^3+2x^2+x\)</span></p><p>方程左右求导得到<span class="math inline">\(2y\frac{dy}{dx}=3x^2+4x+1\)</span>，所以当 y=0 时导数不存在，再把 y=0代入方程，求得 x=-1，所以找到该曲线的奇点为(-1,0)。</p><p>下一步我们把曲线平移，使得曲线以(0,0)为奇点，得到<code>y^2 = x^3 + 193387944202565886198256260591909756040*x^2</code>，改写为<code>y^2 = (x + 193387944202565886198256260591909756040) * x^2</code></p><p>因为<code>193387944202565886198256260591909756040 = pow(89654903351345918131227153390056628523,2,p)</code>我们就可把 P、Q 点映射到乘法群上，从而进行简单的对数计算。</p><p>映射法则如下: <spanclass="math display">\[(x,y)\rightarrow\frac{y+tx}{y-tx}\]</span></p><h4 id="exp-2">EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">193387944202565886198256260591909756041</span><br>P.&lt;x&gt; = GF(p)[]<br>f = x^<span class="hljs-number">3</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">2</span> + x<br>P = (<span class="hljs-number">4</span>, <span class="hljs-number">10</span>)<br>Q = (<span class="hljs-number">65639504587209705872811542111125696405</span>, <span class="hljs-number">125330437930804525313353306745824609665</span>)<br><span class="hljs-built_in">print</span>(f)<br>f_ = f.subs(x=x-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(f_)<br><span class="hljs-built_in">print</span> (f_.factor())<br>P_ = (P[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>, P[<span class="hljs-number">1</span>])<br>Q_ = (Q[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>, Q[<span class="hljs-number">1</span>])<br><br>t = GF(p)(<span class="hljs-number">193387944202565886198256260591909756040</span>).square_root()<br>u = (P_[<span class="hljs-number">1</span>] + t*P_[<span class="hljs-number">0</span>])/(P_[<span class="hljs-number">1</span>] - t*P_[<span class="hljs-number">0</span>]) % p<br>v = (Q_[<span class="hljs-number">1</span>] + t*Q_[<span class="hljs-number">0</span>])/(Q_[<span class="hljs-number">1</span>] - t*Q_[<span class="hljs-number">0</span>]) % p<br><span class="hljs-built_in">print</span> (v.log(u))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ecc&quot;&gt;ECC&lt;/h1&gt;
&lt;p&gt;椭圆曲线密码学(Elliptic Curve
Cryptography)，是一种基于椭圆曲线数学的公钥密码。&lt;/p&gt;
&lt;p&gt;基于 ECC
的三大问题：&lt;strong&gt;密钥交换&lt;/strong&gt;、&lt;strong&gt;数字签名&lt;/stro</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Euler&#39;s Factoring to RSA</title>
    <link href="https://sch01ar.github.io/2023/04/18/Euler/"/>
    <id>https://sch01ar.github.io/2023/04/18/Euler/</id>
    <published>2023-04-18T06:05:45.000Z</published>
    <updated>2023-04-18T10:39:11.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eulers-factoring-to-rsa">Euler's Factoring to RSA</h1><h2 id="outline">Outline</h2><p>对于 RSA 中<spanclass="math inline">\(N=(ma^2+nb^2)(mc^2+nd^2)\)</span>的情况进行分析以及安全性评测。</p><h2 id="eulers-factorization-method">Euler's factorization method</h2><p>欧拉因式分解法是通过两种方式将数字写成两个平方和来分解数字的方法，对于一个合数<spanclass="math inline">\(N\)</span>来说，若<spanclass="math inline">\(N=a^2+b^2\)</span>，则可以将<spanclass="math inline">\(N\)</span>进行因式分解，例如<spanclass="math inline">\(1000009=1000^2+3^2=972^2+235^2=293\cdot3413\)</span></p><h2 id="theoretical-basis">Theoretical basis</h2><p><strong>Brahmagupta-Fibonacci 恒等式</strong> <spanclass="math display">\[(a^2+b^2)(c^2+d^2)=(ac-bd)^2+(ad+bc)^2=(ac+bd)^2+(ad-bc)^2\]</span></p><h2 id="proof">Proof</h2><p><img src="/img/Euler.jpg" /></p><p><span class="math display">\[a-c=kl\]</span> <spanclass="math display">\[d-b=km\]</span> <spanclass="math display">\[a+c=hm\]</span> <spanclass="math display">\[d+b=hl\]</span> 运用<strong>Brahmagupta-Fibonacci恒等式</strong> <spanclass="math display">\[(k^2+h^2)(l^2+m^2)=(kl+hm)^2+(km-hl)^2=((a-c)+(a+c))^2+((d-b)-(d+b))^2=4a^2+4b^2=4n\]</span>所以得到 <spanclass="math display">\[n=((\frac{k}{2})^2+(\frac{h}{2})^2)(l^2+m^2)\]</span>后续求解如下： <spanclass="math display">\[khl^2+khm^2=(a-c)(d+b)+(a+c)(d-b)\]</span> <spanclass="math display">\[kh(l^2+m^2)=2ad-2bc\]</span> <spanclass="math display">\[l^2+m^2=GCD(ad-bc,n)\]</span></p><h2 id="generally">Generally</h2><p>对于更一般的<span class="math inline">\(N\)</span>来说，如果<spanclass="math inline">\(N=ma^2+nb^2=mc^2+nd^2\)</span>的情况应用<strong>欧拉分解</strong>是否可以进行？当然是可以的，但可惜欧拉在 1891 年失去了生命，没能继续进行他的研究。后世Lucas 和 Mathews 先后对这样的情况进行了分析推导，证明了<spanclass="math inline">\(N\)</span>是可分解的。</p><h2 id="my-proof">My proof</h2><p>对于<span class="math inline">\(a,b,c,d,m,n\in\mathbb{Z}^+,并且gcd(ma,nb)=gcd(mc,nd)=1\)</span> <spanclass="math display">\[N=ma^2+nb^2=mc^2+nd^2\]</span> <spanclass="math display">\[N=\frac{1}{2}[m(a^2+c^2)+n(b^2+d^2)]\]</span></p><p><spanclass="math display">\[N(d^2-b^2)=\frac{1}{2}(ma^2d^2+mc^2d^2+nb^2d^2+nd^4-ma^2b^2-mc^2b^2-nb^4-nb^2d^2)\]</span><span class="math display">\[\because n(d^2-b^2)=m(a^2-c^2)\]</span></p><p><span class="math display">\[\thereforeN=\frac{1}{2}[ma^2d^2-mb^2c^2+mc^2d^2-ma^2b^2+m(a^2-c^2)(d^2+b^2)]\]</span><span class="math display">\[N=m(ad+bc)(ad-bc)\]</span>我们还需要另外一个等式，运用<strong>Brahmagupta-Fibonacci恒等式</strong>得到 <spanclass="math display">\[N^2=(ma^2+nb^2)(mc^2+nd^2)\]</span> <spanclass="math display">\[N^2=(mac-nbd)^2+mn(ad+bc)^2\]</span> 因为<spanclass="math inline">\(gcd(m,N)=1\)</span>,由此得到 <spanclass="math display">\[N=gcd(N,ad-bc)*\frac{N}{gcd(N,ad-bc)}\]</span></p><h2 id="apply-to-rsa">Apply to RSA</h2><p>在 RSA 传统加密中我们知道，<spanclass="math inline">\(N\)</span>的选取尤为重要，如果选取的<spanclass="math inline">\(N\)</span>易于分解，那么明文将不再安全。 对于<spanclass="math inline">\(N=(ma^2+nb^2)(mc^2+nd^2)\)</span>，即<spanclass="math inline">\(p=ma^2+nb^2,q=mc^2+nd^2\)</span></p><p>针对这种看似数字很大的<spanclass="math inline">\(N\)</span>,下面进行一些实际的代码生成与攻击。</p><h3 id="pq_generate">P、Q_generate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">genprime</span>(<span class="hljs-params">m,n</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = random.getrandbits(<span class="hljs-number">150</span>)<br>        y = random.getrandbits(<span class="hljs-number">150</span>)<br>        p = m*x ** <span class="hljs-number">2</span> +  n*y ** <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> isPrime(p) :<br>            <span class="hljs-keyword">return</span> p, x, y<br></code></pre></td></tr></table></figure><h3 id="abcd_generate">abcd_generate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    m = getPrime(<span class="hljs-number">212</span>)<br>    n = getPrime(<span class="hljs-number">212</span>)<br>    p, xp, yp = genprime(m,n)<br>    q, xq, yq = genprime(m,n)<br>    N = p * q<br>    a = <span class="hljs-built_in">abs</span>(m*xp * xq - n * yp * yq)<br>    b = <span class="hljs-built_in">abs</span>(xp * yq + xq * yp)<br>    <span class="hljs-keyword">assert</span> N == a ** <span class="hljs-number">2</span> + m*n * b ** <span class="hljs-number">2</span><br>    c = <span class="hljs-built_in">abs</span>(m*xp * xq + n * yp * yq)<br>    d = <span class="hljs-built_in">abs</span>(xp * yq - xq * yp)<br>    <span class="hljs-keyword">assert</span> N == c ** <span class="hljs-number">2</span> + m*n * d ** <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> a.bit_length() &lt;= <span class="hljs-number">512</span> <span class="hljs-keyword">and</span> b.bit_length() &lt;= <span class="hljs-number">300</span> <span class="hljs-keyword">and</span> c.bit_length() &lt;= <span class="hljs-number">512</span> <span class="hljs-keyword">and</span> d.bit_length() &lt;= <span class="hljs-number">300</span>:<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h3 id="encrypt">Encrypt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">b&quot;you_have_already_understood_this&quot;</span><br>N = p*q<br>e=<span class="hljs-number">65537</span><br>msg = bytes_to_long(flag)<br>Cipher = <span class="hljs-built_in">pow</span>(msg,e,N)<br></code></pre></td></tr></table></figure><h3 id="attack">Attack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">p=GCD(a*d-b*c,N)<br>q=N//p<br>d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>msg=long_to_bytes(<span class="hljs-built_in">pow</span>(Cipher,d,N))<br><span class="hljs-built_in">print</span>(msg)<br><span class="hljs-comment"># b&#x27;you_have_already_understood_this&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;eulers-factoring-to-rsa&quot;&gt;Euler&#39;s Factoring to RSA&lt;/h1&gt;
&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;
&lt;p&gt;对于 RSA 中&lt;span
class=&quot;math inline&quot;&gt;\(N=(ma^2+</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>NSSCTF Round11</title>
    <link href="https://sch01ar.github.io/2023/04/08/NSSCTFRound11/"/>
    <id>https://sch01ar.github.io/2023/04/08/NSSCTFRound11/</id>
    <published>2023-04-08T13:05:45.000Z</published>
    <updated>2023-04-11T11:55:17.610Z</updated>
    
    <content type="html"><![CDATA[<p>最后 rank 排第 4，差一道 AK，可惜。</p><h1 id="ez_enc">ez_enc</h1><p>题目描述说了不是培根加密，所以考虑 AB 为二进制情况，192 位数判断，8位为一组，简单写个脚本跑就行。<code>NSSCTF&#123;mS4gT1Kv9L8NjPzx&#125;</code></p><h1 id="mymessage2">MyMessage(2🩸)</h1><h2 id="题目">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<br><br>e = <span class="hljs-number">127</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>():<br>    msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input message：&quot;</span>)<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p*q<br>    c = <span class="hljs-built_in">pow</span>(bytes_to_long((msg + flag).encode()), e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n: <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Token: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(c)&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        sign()<br><br>main()<br></code></pre></td></tr></table></figure><h2 id="题解">题解</h2><p>分析一下发现是 CRT，e 是 127，不算很大，pwntools 远程连一下就出了，用127 组 n、c 就能出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r=remote(<span class="hljs-string">&quot;node1.anna.nssctf.cn&quot;</span>,<span class="hljs-string">&#x27;28993&#x27;</span>)<br>r.recv()<br>n=[]<br>c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>    r.send(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>    n0=<span class="hljs-built_in">int</span>(r.recvline()[<span class="hljs-number">3</span>:])<br>    n.append(n0)<br>    c0=<span class="hljs-built_in">int</span>(r.recvline()[<span class="hljs-number">7</span>:],<span class="hljs-number">16</span>)<br>    c.append(c0)<br>    r.recv()<br>    <span class="hljs-built_in">print</span>(i)<br><br>e=<span class="hljs-number">127</span><br>resultant,mod= crt(n, c)<br><span class="hljs-built_in">print</span>(gmpy2.iroot(resultant, e))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-number">2806865643354785603324943800380811808524058654491089619946085108629974212427336755928938684569729653368445</span>))<br><br></code></pre></td></tr></table></figure><h1 id="mygame3">MyGame(3🩸)</h1><h2 id="题目-1">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br>flag = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;=---menu---=</span><br><span class="hljs-string">1. Guess</span><br><span class="hljs-string">2. Encrypt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randommsg</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_lowercase+string.digits, k=<span class="hljs-number">30</span>))<br><br>mymsg = randommsg()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">guess</span>():<br>    <span class="hljs-keyword">global</span> mymsg<br>    msg = <span class="hljs-built_in">input</span>()<br><br>    <span class="hljs-keyword">if</span> msg == mymsg:<br>        <span class="hljs-built_in">print</span>(flag)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(mymsg)<br>        mymsg = randommsg()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>():<br>    e = random.getrandbits(<span class="hljs-number">8</span>)<br>    c = <span class="hljs-built_in">pow</span>(bytes_to_long(mymsg.encode()), e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cipher_<span class="hljs-subst">&#123;e&#125;</span>: <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n: <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        opt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>        <span class="hljs-keyword">if</span> opt == <span class="hljs-number">1</span>:<br>            guess()<br>        <span class="hljs-keyword">elif</span> opt == <span class="hljs-number">2</span>:<br>            encrypt()<br><br>main()<br></code></pre></td></tr></table></figure><h2 id="题解-1">题解</h2><p>仔细读代码，发现是共模攻击，找两组 c、e 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>c1=<span class="hljs-number">20432531576155215888154008856470023176716331725918571318249616529204088736445989550189654688043730733020564485947864747196975750100435327664656429806649525534120919148246123023379811466301511729993913961801030758822865877036889575149918981442195476030813460030620757387049663845188034750154180593983566582520</span><br>e1=<span class="hljs-number">27</span><br>c2=<span class="hljs-number">49343226468934676124103999715864898108289119770186347123043696311071406231664645680952259061776732950065396078048353154283241280855775618011869819311337805185923169181212309315036973967627008736733179896379120366510464553630612190775773048857991437285631208686684892260979310870861832511307571472115286628517</span><br>e2=<span class="hljs-number">20</span><br><br>n=<span class="hljs-number">120132192877694910217679507021165646332695827464809117195210649277384674795669034856718931569263574670286802451973300796012519337781757661938081109028300520380652830599013093103694871345527473374707911919217651889156901714534844579748040213772147486709217128429189246896619833922990939367369152675847389673607</span><br><br>r,s1,s2=gmpy2.gcdext(e1,e2)<br>m=(<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2,s2,n)) %n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h1 id="ez_signin3">ez_signin(3🩸)</h1><h2 id="题目-2">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">assert</span> p &gt; q<br>n = p*q<br>e = <span class="hljs-number">65536</span><br>m = bytes_to_long(flag)<br>num1 = (<span class="hljs-built_in">pow</span>(p,e,n)-<span class="hljs-built_in">pow</span>(q,e,n)) % n<br>num2 = <span class="hljs-built_in">pow</span>(p-q,e,n)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num1=&quot;</span>,num1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num2=&quot;</span>,num2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br></code></pre></td></tr></table></figure><h2 id="题解-2">题解</h2><p>从 num1 和 num2入手进行推导，这种类似推导在<code>seccon</code>中的<code>pqpq</code>也遇到过，遇到p 和 q 和与差的次方时要善于展开。 <span class="math display">\[num1=p^e- q^e \; mod \;n\]</span> <span class="math display">\[num2=(p-q)^e \;mod \;n=p^e + q^e \;mod\;n\]</span> <spanclass="math display">\[num1-num2=2q^e \;mod\;n\]</span> 与 n 求 gcd即可得到 q。后续又发现<code>gcd(e,phi)=4</code>我直接用<code>phi//4</code>就出了，但看别的师傅题解是使用了 16 次rabin。<ahref="https://www.cnblogs.com/App1eTree#/c/subject/p/nssctf_Round11.html">App1e_Tree</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>e=<span class="hljs-number">65536</span><br><br>num1= <span class="hljs-number">77257223159958079981390137355142080015023010733827990250504328622199243866334208454700846525239387121424870112593354883264915110401096320266418705582162604997618363889158629900108704858615247007992567853124974343579594813658250285927213124866151010168331988825030114602867745638435653619050902109851045530048</span><br>num2= <span class="hljs-number">8670006639226140401848502013409874417778806171787684181700490726088123676562019413771703217181880276367622310216897452417434923879832976569809207272273038152452280440576111149210141624539176252808510923727718037881253248639329799746808602221142415191253040793180318625834835539461350068653267738595818142033</span><br>n= <span class="hljs-number">139312918646958911643614106477250346542938203733216645101706250934506039430465265284553776989331472694107269641055499427941102923536860105801322441769366401061519774361630724222802972762597316259472094210197432833307534335146157789503227756546698356309143161714893413713163015318965716763931005983883676146349</span><br>c= <span class="hljs-number">117425520472164947185011060551908800156070555958546948883959815215678093994397105451763661641181472902919466937760258731806408698523865490809605237116064587181672662857632969568595375221472415619173606876351479605389472618536640276793037520925913907146004116095678083180079715242304920764573160813391671768563</span><br>q=GCD(n,num1-num2)<br>p=n//q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(GCD(phi,e))<br>d=gmpy2.invert(e,phi//<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><br></code></pre></td></tr></table></figure><h1 id="ntr4">NTR(4❄️)</h1><h2 id="题目-3">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    p = getPrime(<span class="hljs-number">2048</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = getRandomNBitInteger(<span class="hljs-number">1024</span>)<br>        y = getPrime(<span class="hljs-number">768</span>)<br>        z = gmpy2.invert(x, p) * y % p<br>        <span class="hljs-keyword">return</span> (p, x, y, z)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">cipher, p, z</span>):<br>    message = bytes_to_long(cipher)<br>    r = getRandomNBitInteger(<span class="hljs-number">1024</span>)<br>    c = (r * z + message) % p<br>    <span class="hljs-keyword">return</span> c<br><br>p, x, y, z = init()<br>c = encrypt(flag, p, z)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cipher.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;binz = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(z)) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    f.write(<span class="hljs-string">&quot;binp = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(p)) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    f.write(<span class="hljs-string">&quot;binc = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(c)) + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="题解-3">题解</h2><p>基础 NTRU 格密码，具体推导可看前几篇博客 DUTCTF 的 ez_RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>z=<span class="hljs-number">0bspan><br>p=<span class="hljs-number">0bspan><br>c=<span class="hljs-number">0bspan><br>h=z<br><br>M = Matrix([[<span class="hljs-number">1</span>, h], [<span class="hljs-number">0</span>, p]])<br>fg = M.LLL()[<span class="hljs-number">0</span>]<br>f, g = <span class="hljs-built_in">abs</span>(fg[<span class="hljs-number">0</span>]), <span class="hljs-built_in">abs</span>(fg[<span class="hljs-number">1</span>])<br>a = f * c % p<br>E = a * gmpy2.invert(f, g)%g<br><span class="hljs-built_in">print</span>(f.bit_length())<br><span class="hljs-built_in">print</span>(long_to_bytes(E))<br></code></pre></td></tr></table></figure><h1 id="ez_fac未出">ez_fac(未出)</h1><h2 id="题目-4">题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,a0,a1,b0,b1<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>e = getPrime(<span class="hljs-number">128</span>)<br>n = p*q<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(a0,<span class="hljs-number">2</span>) + e * <span class="hljs-built_in">pow</span>(b0,<span class="hljs-number">2</span>) == n<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(a1,<span class="hljs-number">2</span>) + e * <span class="hljs-built_in">pow</span>(b1,<span class="hljs-number">2</span>) == n<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a0=&quot;</span>,a0)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a1=&quot;</span>,a1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b0=&quot;</span>,b0)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b1=&quot;</span>,b1)<br></code></pre></td></tr></table></figure><h2 id="题解-4">题解</h2><p>赛后自己推了一下，欧拉公式分解 <img src="/img/Euler.jpg" /> 因此有<span class="math display">\[a-c=kl\]</span> <spanclass="math display">\[d-b=km\]</span> <spanclass="math display">\[a+c=hm\]</span> <spanclass="math display">\[d+b=hl\]</span>推到这步之后，运用<code>Brahmagupta-Fibonacci</code>恒等式，得到 <spanclass="math display">\[n=((\frac{k}{2})^2+(\frac{h}{2})^2)(l^2+m^2)\]</span></p><p><spanclass="math display">\[khl^2+khm^2=(a-c)(d+b)+(a+c)(d-b)\]</span> <spanclass="math display">\[kh(l^2+m^2)=2ad-2bc\]</span> <spanclass="math display">\[l^2+m^2=GCD(ad-bc,n)\]</span>所以对应到本题当中，<code>p=GCD((a0*b1-a1*b0),n)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>c= <span class="hljs-number">59318036714789752844006238692725062195097217062554867007780992204804450969142204391316045272560233388274742342095873063037352032862624199553582149985170237070779964129236530514163078045059943014170914727745788332060644178009630719416607144479458704906477608582501903047686165816474471957589874497851401996299</span><br>n= <span class="hljs-number">137668242641076635664648797843242668120238355343016879645699934379078238840410583671764334209483740737808707460147728851168032552228765759429988090828780489149204937220494635170377998778905602318559649339660536303852604291303891241968251882157710174648060585737047441793290567655691681568937436184102493026497</span><br>a0= <span class="hljs-number">11733211096757640611023179466137568647194748846209714362630723124944554158026265927220172817593295793460531810586641675319307669405413132181412592532359680</span><br>a1= <span class="hljs-number">11733211096757640611023178103076370448537803344455852236399317962314322115993820094669322043912570063235179770967045735659217853855020241135449964093477392</span><br>b0= <span class="hljs-number">16952448082892650701908860033061048276853071047612576981620233993855951344312992860690440851309510652705695741073983670611</span><br>b1= <span class="hljs-number">307989142448102248940629255335003301679438459116674689074678317519163453142223887826928430255723118986268767245966808235987</span><br>e=(n-<span class="hljs-built_in">pow</span>(a0,<span class="hljs-number">2</span>))//<span class="hljs-built_in">pow</span>(b0,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(a0,<span class="hljs-number">2</span>) + e * <span class="hljs-built_in">pow</span>(b0,<span class="hljs-number">2</span>) == n<br>p=GCD((a0*b1-a1*b0),n)<br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最后 rank 排第 4，差一道 AK，可惜。&lt;/p&gt;
&lt;h1 id=&quot;ez_enc&quot;&gt;ez_enc&lt;/h1&gt;
&lt;p&gt;题目描述说了不是培根加密，所以考虑 AB 为二进制情况，192 位数判断，8
位为一组，简单写个脚本跑就行。&lt;code&gt;NSSCTF&amp;#123;mS4gT1</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>NKCTF2023</title>
    <link href="https://sch01ar.github.io/2023/04/04/2023NKCTF/"/>
    <id>https://sch01ar.github.io/2023/04/04/2023NKCTF/</id>
    <published>2023-04-04T02:05:45.000Z</published>
    <updated>2023-04-27T01:01:03.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字中国-babysecret">数字中国 Babysecret</h1><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span><br>t = <span class="hljs-number">30</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>x = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">while</span> x &gt; p:<br>    x = getPrime(<span class="hljs-number">512</span>)<br>rs = []<br>cs = []<br>ss = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    r = getPrime(<span class="hljs-number">512</span>)<br>    s = getPrime(<span class="hljs-number">400</span>)<br>    c = (r * x + s) % p<br>    rs.append(r)<br>    cs.append(c)<br>    ss.append(s)<br><br>enc = <span class="hljs-built_in">pow</span>(x,flag,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;rs = <span class="hljs-subst">&#123;rs&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;cs = <span class="hljs-subst">&#123;cs&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc = <span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># p = 6897108443075981744484758716081045417854227543713106404294789655180105457499042179717447342593790180943415014044830872925165163457476209819356694244840079</span><br><span class="hljs-comment"># rs = [12844634549263053228759749264403637022740290008286987401585068952741935277415527678380021212624846722242500708422759563558995936977274580301379494195702461, 12251634003683452916928102291170339939586644029776192301741341674585154859358419625191986830852794085541953563738986709807899575511700135958334229151930861, 7051370666077542197248638013011793824477073777322219545882367881807130066168444134964571398112151848834032654978368255218649720738040945429837692857031957, 9773046862351952930368505593284546267554571295872377323111558071278701231472975791962979256551519533723988556870551885073742407630481198192389750289392107, 8883776497660138308720006912582738672888752344326928153810910221453595077711284302041512529457450211602787210761461172326429880594024187025419873043435877, 12056735137145460036580841038332100311160368843873164649606343042416896898793233249873902218683966283969721460087390120622254758027779960740926123005377571, 8819958747150954554494406068232243249186433676383469322817152210037563032056202909377825740775383087605647374150477096718956454225946093710691864988563109, 12246023449098354751049599873213988024512286270964608502444597112110163392131757813461977030270733012385926751192637938686124570227538910606279104888073013, 11308837998867241929817950595621831002334468993828126438599805989088017326675963100044309448653090403889186401929445861220402556074702741108929442867300279, 9184622887414209361516593101129556569811888214607556630094969763910426953786020755838094184972397480276666170685926425137063559394969166216392939257091541, 12896400069515890897430087815982545671830645201023665112429779640768899091287291452408369445919464144390726200808875066389240126909811239597092893733457339, 11227025698697471809912850435140886785315702278826761054472525227951791647003561270585720797267604996360933395122286757099101227901032364782594523739698877, 8162123490656317490361880020667919072708091053716891870691544217490126444997503404094174246087938828993696335191488583306443577208796794274099282013427247, 13366989889442670291461262313757977600095962057470863475519088648267301129719953368943419562144276679400967122727554764013132918505564677243979978807323041, 9920857455945408588203972193444437533164351309299040911469275059092031755811492460585653948481522995557801781838215407648572999358456612525812067538372579, 7139402473546047825312503780125417567716958846513076797328672521987900978293260385267945187604725349720103672258987935569856239987227455748213833342843243, 13108142660294572752252393081421368493392921884487755391460006730258159004638343897340537616297811742032405724656497443006056456690449881719305597286675631, 13276762958403786077380090195631980415297280849950287990717193547481553124160398455403123819234755237450529090601858784999113026218918277529515287668651121, 12463094640052886550696551772104539361264529587569204472038955376345085195998921095774583176899949596998985033050547755235409943131811058035802010421860899, 11307743131694864808301935844724645695851330736969875190167422024500753079857478680029193758960169072890576310607053767920339034290416580654771095674487943, 10053742503547378455068966704402695956702795408343604912294923217443553169726438945982031485796964462946592530592946335569560364464958066521486506177193131, 9703695763451799125258961776229325510814289358679213305418559381901496449849584244211834872313767844996255556721041007654625153809128987422992102292472533, 8148189465927721940294369879439913703690047528695196368949823197675716174991296513758196009346701553643721225250628151384047219921709201619262393792138023, 9114150910964237818418367840207724528917302406836157928223872622442928604249864486858755737149640683259834299165900696585038569188627682022002709058902291, 12273514376180781903469287345188404399033432117915094289694407562166649079228640510678711431664410226301556172582177240184695103942141430877677144285616059, 8355005721684425514882933910286584148305344580589623112959517428993968438533866906223777778058096962333203237111245328436600994120168924143849685728268811, 8957883838807471492147480816683526636019698464133185237668243268667169800811696770484487123560197988448434475112352005768286417529319182162245840523697001, 12168542584724814356632409768687396920143300559579648963851924568387314914334359305942685551210180448419674060219496395116081866784918059237133414041227833, 12285935007930825571672128346804313607196190465690759870758278705086034778808662886056460827935986285259185071514490942831585313190946386878622608868345563, 7719913817859572377164973343651155934060296607908537845256755472465025202751239980758950094865067751407889569369974011139801401586939119147773466111699913]</span><br><span class="hljs-comment"># cs = [3911325901261770731066343727353093385607196883601022244426857460074338420692610012414571623512152485474248169220030587839849722757773859682519433853455847, 4198555117325325874584019691418573071733167640213933749582347442518997588452211673143722179281773602455507001395983681009769848414007206268682184816168744, 4422173666634983234895098798813962037875417568235708524339826709271381748884936178371767574064794177416615710120223914725873239836121654705208614576413533, 3540260422555697887869627546208164711550015909378340105077652177481959576550678379723450981807556863572610759824660630418670546203733170058626755080797998, 6451498467498935201092514865627931677091078787997097414208430992183264950579022373372254486595458117887305393317663712337699331503725124287017134808484874, 3439629581963524351810430910737336124616316641656190641248434504621774235943514617301857917041111617104850245148746427180069743940612560718213177903427306, 4279468191481832212496939242093486044278976937965085475567008228061184947513156012369586970486543083130565628906296600553024574099481246534878242920637212, 4102135455518061133919027670571325279976222647984452353051395864554309521223498761823084717077102213648612826513661629599971609555235760152049549057234342, 329051927890365028889097463563711966673066795688728876214731188783168691555262156515161429328581094087585127929869064685419149676592073496155898360311360, 1674347209896897571502352451063188834938904430329951752111921115230349947823188121972980025563878887201507629419811736910690965020923751424101521816057970, 4779084317811375050159574994746297486592271247137823471375199626788956576998627181220489952507937768042501203098391966702297812537463211799837921684467541, 5240331815784322792144549873873658636726233093228415489098002982220769676718681132737794994708716389174162820721646744776624413735318240597745363490427584, 2689716894922604875455207695253665212853470308341743040957367957727155614199743562225147359614514189877983156892749669804800163252617480446565479990148021, 449708769594599088851244243076921016853502252396793496349534051273454215985560340288452398756880916680293627457774430655982228613348249480600180821975835, 1584603978331289335352997151059666773277943458357161051278658090420067023680231414255557805410288144092653121568766136372728095300982743309696347031121424, 4874260053151700374809337053763032489184725334196495160358275038586824027920238733886703163018450814805937363825223459277373073591021082276610135118976834, 3524374131362906900545297291947110177298862564718451821839794960169356082042548386553363480921097452902723033854749443288682983558847052843293666815425196, 6544123591499569232021913370293570477776709315008783531720886545784773471486769240711262562401683145937715612435213816372680189321141928790509490282629891, 4873861166228118967099569086478548167127431415017791678812419676791754466935832034870862000658789609084166891933970013849850146718379819943737269970654866, 4100817874436703071716655163972145036104985973164830547825929590871920825981241934633977227547934514142660786061291026657802357404024236287955309372489516, 343238276681348130286495167739162902430650061145485619903964358840996341335935043000395056684771452815629410388891486531126938900311458948803147120186532, 2683710724350412998770392318832434885304538325033159937379489319924346689197445720734209841902612235485016866254994045969716413020197296428323832404151182, 5909464641105704179999104311562416363090166762341644691188169716182958971270396007422581429813172933930581475771306034495224054972725230757675444731953480, 105593489999747649490909471306354863316673821363863362258853043970534652401274789197677558215188249074837829003335733211890211648501689656345824858507373, 4992379366542645691375959247465888889778118153982142100956809440855745659745235576280578316185469306620017845690312554043770651058126536040173113949524396, 6533456398244789907636779407045515567135195474284185379689518387558345997627435421582437390053234675991361808532278264077968540197407743744279106871716267, 5169360398767270275853790242315213671633880428212603766301308853363063092609582572957561138022806887895634140899640025570759919257615537375706008159680239, 203310740924699994885931266978520636166917734618272844754878785050509801614513144739164450834936178065792112797202959106365282699245578309060905297742706, 3143563289239398127009575193211845399079310618985464994769603542400451633289266080869317336163844517539211542909055869608349639432145332113320465388067087, 4016252180207572047405081190649590978593306403200098541033213590567723751195926093369984531729148621419589009515870336049849542537363832071754623330736088]</span><br><span class="hljs-comment"># enc = 1315637864146686255246675143589215932218700984880749264689270214639479160648747323586062096067740047809798944996253169402675772469028914904598116394230426</span><br><br></code></pre></td></tr></table></figure><p><spanclass="math inline">\(enc=pow(x,flag,p)\)</span>,离散对数问题，p是光滑的，后续可通过 PH 求解，但 x 未知</p><p><span class="math inline">\(c=(rx+s)\;mod\;p\)</span>,c 和 r 是 30位的向量，通过 LWE 求解 x 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br>row = <span class="hljs-number">30</span><br>column = <span class="hljs-number">1</span><br>p = <span class="hljs-number">6897108443075981744484758716081045417854227543713106404294789655180105457499042179717447342593790180943415014044830872925165163457476209819356694244840079</span><br>rs = [<span class="hljs-number">12844634549263053228759749264403637022740290008286987401585068952741935277415527678380021212624846722242500708422759563558995936977274580301379494195702461</span>, <span class="hljs-number">12251634003683452916928102291170339939586644029776192301741341674585154859358419625191986830852794085541953563738986709807899575511700135958334229151930861</span>, <span class="hljs-number">7051370666077542197248638013011793824477073777322219545882367881807130066168444134964571398112151848834032654978368255218649720738040945429837692857031957</span>, <span class="hljs-number">9773046862351952930368505593284546267554571295872377323111558071278701231472975791962979256551519533723988556870551885073742407630481198192389750289392107</span>, <span class="hljs-number">8883776497660138308720006912582738672888752344326928153810910221453595077711284302041512529457450211602787210761461172326429880594024187025419873043435877</span>, <span class="hljs-number">12056735137145460036580841038332100311160368843873164649606343042416896898793233249873902218683966283969721460087390120622254758027779960740926123005377571</span>, <span class="hljs-number">8819958747150954554494406068232243249186433676383469322817152210037563032056202909377825740775383087605647374150477096718956454225946093710691864988563109</span>, <span class="hljs-number">12246023449098354751049599873213988024512286270964608502444597112110163392131757813461977030270733012385926751192637938686124570227538910606279104888073013</span>, <span class="hljs-number">11308837998867241929817950595621831002334468993828126438599805989088017326675963100044309448653090403889186401929445861220402556074702741108929442867300279</span>, <span class="hljs-number">9184622887414209361516593101129556569811888214607556630094969763910426953786020755838094184972397480276666170685926425137063559394969166216392939257091541</span>, <span class="hljs-number">12896400069515890897430087815982545671830645201023665112429779640768899091287291452408369445919464144390726200808875066389240126909811239597092893733457339</span>, <span class="hljs-number">11227025698697471809912850435140886785315702278826761054472525227951791647003561270585720797267604996360933395122286757099101227901032364782594523739698877</span>, <span class="hljs-number">8162123490656317490361880020667919072708091053716891870691544217490126444997503404094174246087938828993696335191488583306443577208796794274099282013427247</span>, <span class="hljs-number">13366989889442670291461262313757977600095962057470863475519088648267301129719953368943419562144276679400967122727554764013132918505564677243979978807323041</span>, <span class="hljs-number">9920857455945408588203972193444437533164351309299040911469275059092031755811492460585653948481522995557801781838215407648572999358456612525812067538372579</span>, <span class="hljs-number">7139402473546047825312503780125417567716958846513076797328672521987900978293260385267945187604725349720103672258987935569856239987227455748213833342843243</span>, <span class="hljs-number">13108142660294572752252393081421368493392921884487755391460006730258159004638343897340537616297811742032405724656497443006056456690449881719305597286675631</span>, <span class="hljs-number">13276762958403786077380090195631980415297280849950287990717193547481553124160398455403123819234755237450529090601858784999113026218918277529515287668651121</span>, <span class="hljs-number">12463094640052886550696551772104539361264529587569204472038955376345085195998921095774583176899949596998985033050547755235409943131811058035802010421860899</span>, <span class="hljs-number">11307743131694864808301935844724645695851330736969875190167422024500753079857478680029193758960169072890576310607053767920339034290416580654771095674487943</span>, <span class="hljs-number">10053742503547378455068966704402695956702795408343604912294923217443553169726438945982031485796964462946592530592946335569560364464958066521486506177193131</span>, <span class="hljs-number">9703695763451799125258961776229325510814289358679213305418559381901496449849584244211834872313767844996255556721041007654625153809128987422992102292472533</span>, <span class="hljs-number">8148189465927721940294369879439913703690047528695196368949823197675716174991296513758196009346701553643721225250628151384047219921709201619262393792138023</span>, <span class="hljs-number">9114150910964237818418367840207724528917302406836157928223872622442928604249864486858755737149640683259834299165900696585038569188627682022002709058902291</span>, <span class="hljs-number">12273514376180781903469287345188404399033432117915094289694407562166649079228640510678711431664410226301556172582177240184695103942141430877677144285616059</span>, <span class="hljs-number">8355005721684425514882933910286584148305344580589623112959517428993968438533866906223777778058096962333203237111245328436600994120168924143849685728268811</span>, <span class="hljs-number">8957883838807471492147480816683526636019698464133185237668243268667169800811696770484487123560197988448434475112352005768286417529319182162245840523697001</span>, <span class="hljs-number">12168542584724814356632409768687396920143300559579648963851924568387314914334359305942685551210180448419674060219496395116081866784918059237133414041227833</span>, <span class="hljs-number">12285935007930825571672128346804313607196190465690759870758278705086034778808662886056460827935986285259185071514490942831585313190946386878622608868345563</span>, <span class="hljs-number">7719913817859572377164973343651155934060296607908537845256755472465025202751239980758950094865067751407889569369974011139801401586939119147773466111699913</span>]<br>cs = [<span class="hljs-number">3911325901261770731066343727353093385607196883601022244426857460074338420692610012414571623512152485474248169220030587839849722757773859682519433853455847</span>, <span class="hljs-number">4198555117325325874584019691418573071733167640213933749582347442518997588452211673143722179281773602455507001395983681009769848414007206268682184816168744</span>, <span class="hljs-number">4422173666634983234895098798813962037875417568235708524339826709271381748884936178371767574064794177416615710120223914725873239836121654705208614576413533</span>, <span class="hljs-number">3540260422555697887869627546208164711550015909378340105077652177481959576550678379723450981807556863572610759824660630418670546203733170058626755080797998</span>, <span class="hljs-number">6451498467498935201092514865627931677091078787997097414208430992183264950579022373372254486595458117887305393317663712337699331503725124287017134808484874</span>, <span class="hljs-number">3439629581963524351810430910737336124616316641656190641248434504621774235943514617301857917041111617104850245148746427180069743940612560718213177903427306</span>, <span class="hljs-number">4279468191481832212496939242093486044278976937965085475567008228061184947513156012369586970486543083130565628906296600553024574099481246534878242920637212</span>, <span class="hljs-number">4102135455518061133919027670571325279976222647984452353051395864554309521223498761823084717077102213648612826513661629599971609555235760152049549057234342</span>, <span class="hljs-number">329051927890365028889097463563711966673066795688728876214731188783168691555262156515161429328581094087585127929869064685419149676592073496155898360311360</span>, <span class="hljs-number">1674347209896897571502352451063188834938904430329951752111921115230349947823188121972980025563878887201507629419811736910690965020923751424101521816057970</span>, <span class="hljs-number">4779084317811375050159574994746297486592271247137823471375199626788956576998627181220489952507937768042501203098391966702297812537463211799837921684467541</span>, <span class="hljs-number">5240331815784322792144549873873658636726233093228415489098002982220769676718681132737794994708716389174162820721646744776624413735318240597745363490427584</span>, <span class="hljs-number">2689716894922604875455207695253665212853470308341743040957367957727155614199743562225147359614514189877983156892749669804800163252617480446565479990148021</span>, <span class="hljs-number">449708769594599088851244243076921016853502252396793496349534051273454215985560340288452398756880916680293627457774430655982228613348249480600180821975835</span>, <span class="hljs-number">1584603978331289335352997151059666773277943458357161051278658090420067023680231414255557805410288144092653121568766136372728095300982743309696347031121424</span>, <span class="hljs-number">4874260053151700374809337053763032489184725334196495160358275038586824027920238733886703163018450814805937363825223459277373073591021082276610135118976834</span>, <span class="hljs-number">3524374131362906900545297291947110177298862564718451821839794960169356082042548386553363480921097452902723033854749443288682983558847052843293666815425196</span>, <span class="hljs-number">6544123591499569232021913370293570477776709315008783531720886545784773471486769240711262562401683145937715612435213816372680189321141928790509490282629891</span>, <span class="hljs-number">4873861166228118967099569086478548167127431415017791678812419676791754466935832034870862000658789609084166891933970013849850146718379819943737269970654866</span>, <span class="hljs-number">4100817874436703071716655163972145036104985973164830547825929590871920825981241934633977227547934514142660786061291026657802357404024236287955309372489516</span>, <span class="hljs-number">343238276681348130286495167739162902430650061145485619903964358840996341335935043000395056684771452815629410388891486531126938900311458948803147120186532</span>, <span class="hljs-number">2683710724350412998770392318832434885304538325033159937379489319924346689197445720734209841902612235485016866254994045969716413020197296428323832404151182</span>, <span class="hljs-number">5909464641105704179999104311562416363090166762341644691188169716182958971270396007422581429813172933930581475771306034495224054972725230757675444731953480</span>, <span class="hljs-number">105593489999747649490909471306354863316673821363863362258853043970534652401274789197677558215188249074837829003335733211890211648501689656345824858507373</span>, <span class="hljs-number">4992379366542645691375959247465888889778118153982142100956809440855745659745235576280578316185469306620017845690312554043770651058126536040173113949524396</span>, <span class="hljs-number">6533456398244789907636779407045515567135195474284185379689518387558345997627435421582437390053234675991361808532278264077968540197407743744279106871716267</span>, <span class="hljs-number">5169360398767270275853790242315213671633880428212603766301308853363063092609582572957561138022806887895634140899640025570759919257615537375706008159680239</span>, <span class="hljs-number">203310740924699994885931266978520636166917734618272844754878785050509801614513144739164450834936178065792112797202959106365282699245578309060905297742706</span>, <span class="hljs-number">3143563289239398127009575193211845399079310618985464994769603542400451633289266080869317336163844517539211542909055869608349639432145332113320465388067087</span>, <span class="hljs-number">4016252180207572047405081190649590978593306403200098541033213590567723751195926093369984531729148621419589009515870336049849542537363832071754623330736088</span>]<br>enc = <span class="hljs-number">1315637864146686255246675143589215932218700984880749264689270214639479160648747323586062096067740047809798944996253169402675772469028914904598116394230426</span><br>ss=[<span class="hljs-number">1444695997149492190325503358748907180896428744501435959012446197804471238996228693169795874437240656170107638535797004901</span>, <span class="hljs-number">1710106002173551002425444054140394178956124023376657957303230765508377089074717746465653815466763654648249527857825569029</span>, <span class="hljs-number">2055313300434754785614061534661234769322543457763273072311107482412288908659564309179643251560799446038081677516598963457</span>, <span class="hljs-number">2529893752644237783483797815212946495982855556933204694011832676840091910035653685416019963608166318536749345810876453771</span>, <span class="hljs-number">2529138628117798443470937234045077945473928204906198619005287365776711527156367496383631463561676109741862230251586143377</span>, <span class="hljs-number">2262110335813452474430699656412885234503426852605393691899881796634211611052330735315181940758828054398894455017113733227</span>, <span class="hljs-number">2121889637450522029350552877626679809458662297228865521642554573119772081854990312156453774280770474194162502389497160327</span>, <span class="hljs-number">2529142548180563996394639773713532833480273727306125086719935756161917184911736806616267916075735106590544780324467585621</span>, <span class="hljs-number">1305329295536404276170448056500700469825272137020946460143963140200353157377196505556280067991447170875038122866415550101</span>, <span class="hljs-number">1552852098086060808737139123645915631099187828325664479373402352780546739207516108015428990851489119938061929818491926611</span>, <span class="hljs-number">1791104999803661806603955436215385390826508049741363470424060526111730352962999232609779584743853648363257676913487057757</span>, <span class="hljs-number">1899442479566327507595284152198923816070020299280413329026247522765072323119884753949208875377108001657197781777679291871</span>, <span class="hljs-number">1453541167592343188338822229691660044736912312708428492831729087255748263545506909467533920598337452593734393704376978807</span>, <span class="hljs-number">1839970255647517988033776502403781838348352314214922889121617450060735210741294955388142534936822274443404021805803333703</span>, <span class="hljs-number">1912160881436961130805854105580691921433605240682869508192604979038043884642959974735162453664737011078276186132003267537</span>, <span class="hljs-number">2543565462805293682479626661848772865479251641709980622442153819428251437133653745822570184749929330644293218076375940297</span>, <span class="hljs-number">2483083156651635774502843350477278413827965814754343098791424022880695703529884053363101276861390834327295178464586090169</span>, <span class="hljs-number">2003169101542395781256109850378099343661620656525906226012777618825679882882750121108967747380040440812305500025030472703</span>, <span class="hljs-number">1495306582962644344763635303973344887376634002664321023099433581011613385215984473933899539552759121449556619118213926953</span>, <span class="hljs-number">1475475640507405435263556560927151140961838107291429033550823738085598452588645697451453622811307836240178487270066202731</span>, <span class="hljs-number">1585296258758653869729779396633477768935787077644413518874111953612262499991020378795132976171831363612740565577673589949</span>, <span class="hljs-number">1751870981277054153889475362865184270808672777814739187606382420502953249942908536146994775691865449715881103437411562697</span>, <span class="hljs-number">2229385019858443633247567841668512226312552028112872103049568509800432132563139223600501334488455486995847787457023057543</span>, <span class="hljs-number">2509522757833822636876029295601980862244548996153272433687613093337042904569711801805004013230589715380175225102878772429</span>, <span class="hljs-number">1378538686540733061307578409608662896663843431656273949667551098986968433993734090533525999772678987014720821134447883279</span>, <span class="hljs-number">1615745464810222578868113006917238415594773977456189037245148298498578637163332628299020222221658719347173123797381998597</span>, <span class="hljs-number">2064151464294100789516756482456818746190321203565732371731029967136921201410297069827915522687620140104021460523804416353</span>, <span class="hljs-number">1711545496198775131056637405659683132417828376528113270088200929297233962942202546621239829931304134031695960814215807973</span>, <span class="hljs-number">1455761879282217336477189039622363054351048993520687962567785409775020556422692091664440576775863933336882803763246548923</span>, <span class="hljs-number">1880891423536411979565374334582143474888275578342367502429189125513290153271930355071969557105539679922217905887177950249</span>]<br><br>prime=p<br>ma=rs<br>res = cs<br><br>W = matrix(ZZ, ma)<br>cc = vector(ZZ, res)<br><span class="hljs-comment">#LWE求解x</span><br><span class="hljs-comment"># Babai&#x27;s Nearest Plane algorithm</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Babai_closest_vector</span>(<span class="hljs-params">M, G, target</span>):<br>    small = target<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(M.nrows())):<br>            c = ((small * G[i]) / (G[i] * G[i])).<span class="hljs-built_in">round</span>()<br>            small -=  M[i] * c<br>    <span class="hljs-keyword">return</span> target - small<br><br>A1 = matrix.identity(column)<br>Ap = matrix.identity(row) * prime<br>B = block_matrix([[Ap], [W]])<br>lattice = IntegerLattice(B, lll_reduce=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL done&quot;</span>)<br>gram = lattice.reduced_basis.gram_schmidt()[<span class="hljs-number">0</span>]<br>target = vector(ZZ, res)<br>re = Babai_closest_vector(lattice.reduced_basis, gram, target)<br><span class="hljs-comment"># print(&quot;Closest Vector: &#123;&#125;&quot;.format(re))</span><br><br>R = IntegerModRing(prime)<br>M = Matrix(R, ma)<br>M = M.transpose()<br><br>ingredients = M.solve_right(re)<br><br><span class="hljs-comment">#求出x后利用PH算法对flag进行还原，因为发现p-1可以分解，p是光滑阶</span><br><span class="hljs-comment"># x=6789891305297779556556571922812978922375073901749764215969003309869718878076269545304055843125301553103531252334876560433405451108895206969904268456786139</span><br>x=<span class="hljs-built_in">int</span>(ingredients[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(x)<br>m=x<br>c=enc<br>n=p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">h, g, N, p, qi</span>):<br>    Zp = Zmod(p)<br>    h = <span class="hljs-built_in">pow</span>(h, N//qi, p)<br>    g = <span class="hljs-built_in">pow</span>(g, N//qi, p)<br>    ri = discrete_log(Zp(h), Zp(g))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ri)<br>m=x<br>c=enc<br>n=p<br><br>tmp_list=[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">193</span>,<span class="hljs-number">877</span>,<span class="hljs-number">2663</span>,<span class="hljs-number">662056037</span>,<span class="hljs-number">812430763</span>,<span class="hljs-number">814584769</span>,<span class="hljs-number">830092927</span>,<span class="hljs-number">849943517</span>,<span class="hljs-number">969016409</span>,<span class="hljs-number">1000954193</span>,<span class="hljs-number">1022090869</span>,<span class="hljs-number">1048277339</span>]<br><br>r_list = []<br><span class="hljs-keyword">for</span> qi <span class="hljs-keyword">in</span> tmp_list:<br>    tmp = r(c,m,n-<span class="hljs-number">1</span>,n,qi)<br>    <span class="hljs-built_in">print</span>(tmp)<br>    r_list.append(tmp)<br>x = crt(r_list, tmp_list)<br><br>module = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp_list:<br>    module *= i<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(x).bit_length()&gt;<span class="hljs-number">304</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fail&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(m, x, n))==c:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x =&#x27;</span>, x)<br>        <span class="hljs-built_in">print</span>(long_to_bytes(x))<br>        <span class="hljs-keyword">break</span><br>    x += module<br><span class="hljs-comment">#b&#x27;flag&#123;70b1b709ce431682addb581596320007&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="nkctf2023">NKCTF2023</h1><h2 id="babyrsa">babyRSA</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">nbit = <span class="hljs-number">512</span><br>flag=<span class="hljs-string">&#x27;****************************&#x27;</span><br><br>p=getPrime(nbit)<br>q=getPrime(nbit)<br>e=<span class="hljs-number">65537</span><br>n=p*q<br>m= bytes_to_long(<span class="hljs-built_in">bytes</span>(flag.encode()))<br>P = <span class="hljs-built_in">pow</span>(m,p,n)<br>Q = <span class="hljs-built_in">pow</span>(m,q,n)<br>N=P*Q<br>phi_N=(P-<span class="hljs-number">1</span>)*(Q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi_N)<br>dP=d%(P-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n = &#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N = &#x27;</span>,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dP = &#x27;</span>,dP)<br><br><br>n =  <span class="hljs-number">114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641</span><br>N =  <span class="hljs-number">1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028</span><br>dP =  <span class="hljs-number">33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263</span><br><br></code></pre></td></tr></table></figure><h3 id="题目分析">题目分析</h3><p>题目后半部分是 dp 泄露，通过 N、e、dP 可求出 P、Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> (e*dP-<span class="hljs-number">1</span>)%k == <span class="hljs-number">0</span>:<br>        P=(e*dP-<span class="hljs-number">1</span>)//k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> N%P == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(P)<br>            <span class="hljs-keyword">break</span><br>Q=N//P<br></code></pre></td></tr></table></figure><h4 id="法一">法一</h4><p>之后要通过<span class="math inline">\(P = m^p\;mod\;n\)</span>与<spanclass="math inline">\(Q=m^q\; mod \;n\)</span>来求解m，下面进行一些数学推导</p><p><span class="math display">\[c_1^q=m^{pq}\;mod\;n\]</span> <spanclass="math display">\[c_1^{pq}=c_2^{p^2}\;mod\;n\]</span> <spanclass="math display">\[c_1^{pq}=c_2^{p^2}\;mod\;p\]</span></p><p>根据费马小定理转换可得</p><p><span class="math display">\[c_1^n=c_2^p\;mod\;p\]</span> <spanclass="math display">\[gcd(c_1^n-c_2,n)\;=\;p\]</span></p><p>求出 p 和 q 后，使用 crt 即可求得 m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">c1=(<span class="hljs-built_in">pow</span>(P,n,n)-Q)%n<br>p=GCD(c1,n)<br>q=n//p<br>mp=P%p<br>mq=Q%q<br>m=CRT([mp,mq],[p,q])<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># NKCTF&#123;Th1S_a_babyRSA_y0u_are_tql!!!&#125;</span><br></code></pre></td></tr></table></figure><h4 id="法二">法二</h4><p>通过推导将原式转换为</p><p><span class="math display">\[PQ=(k_1p+m)(k_2q+m)\]</span> <spanclass="math display">\[m(P+Q)=2m^2+(k_1p+k_2q)m\]</span> <spanclass="math display">\[PQ-m(P+Q)+m^2=k_1k_2n\]</span> <spanclass="math display">\[PQ-m(c_1+c_2)+m^2=0\;mod\;n\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">PR.&lt;m&gt; = PolynomialRing(Zmod(n))<br>f = P*Q-m^<span class="hljs-number">2</span>-m*(P-m+Q-m)<br>f = f.monic()<br>m = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">400</span>, beta=<span class="hljs-number">0.4</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>])))<br></code></pre></td></tr></table></figure><h2 id="ezrsa">ezRSA</h2><p>已知 phi 分解 n,后续同 babyRSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> isqrt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorize_multi_prime</span>(<span class="hljs-params">N, phi</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span><br><span class="hljs-string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span><br><span class="hljs-string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span><br><span class="hljs-string">    :param N: the modulus</span><br><span class="hljs-string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span><br><span class="hljs-string">    :return: a tuple containing the prime factors</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prime_factors = <span class="hljs-built_in">set</span>()<br>    factors = [N]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(factors) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># Element to factorize.</span><br>        N = factors[<span class="hljs-number">0</span>]<br><br>        w = randrange(<span class="hljs-number">2</span>, N - <span class="hljs-number">1</span>)<br>        i = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> phi % (<span class="hljs-number">2</span> ** i) == <span class="hljs-number">0</span>:<br>            sqrt_1 = <span class="hljs-built_in">pow</span>(w, phi // (<span class="hljs-number">2</span> ** i), N)<br>            <span class="hljs-keyword">if</span> sqrt_1 &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sqrt_1 != N - <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># We can remove the element to factorize now, because we have a factorization.</span><br>                factors = factors[<span class="hljs-number">1</span>:]<br><br>                p = gcd(N, sqrt_1 + <span class="hljs-number">1</span>)<br>                q = N // p<br><br>                <span class="hljs-keyword">if</span> is_prime(p):<br>                    prime_factors.add(p)<br>                <span class="hljs-keyword">elif</span> p &gt; <span class="hljs-number">1</span>:<br>                    factors.append(p)<br><br>                <span class="hljs-keyword">if</span> is_prime(q):<br>                    prime_factors.add(q)<br>                <span class="hljs-keyword">elif</span> q &gt; <span class="hljs-number">1</span>:<br>                    factors.append(q)<br><br>                <span class="hljs-comment"># Continue in the outer loop</span><br>                <span class="hljs-keyword">break</span><br><br>            i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(prime_factors)<br>e=<span class="hljs-number">65537</span><br>n = <span class="hljs-number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505626165666334675100147790578546682128517668100858766784733351894480181877144793496927464058323582165412552970999921215333509253052644024478417393146000490808639363681195799826541558906527985336104761974023394438549055804234997654701266967731137282297623426318212701157416397999108259257077847307874122736921265599854976855949680133804464839768470200425669609996841568545945133611190979810786943246285103031363790663362165522662820344917056587244701635831061853354597</span><br>phi = <span class="hljs-number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505622503351461565956106005118029537938273153581675065762015952483687057805462728186901563990429998916382820576211887477098611684072561849314986341226981300596338314989867731725668312057134075244816223120038573374383949718714549930261073576391501671722900294331289082826058292599838631513746370889828026039555245672195833927609280773258978856664434349221972568651378808050580665443131001632395175205804045958846124475183825589672204752895252723130454951830966138888560</span><br>a=factorize_multi_prime(n,phi)<br></code></pre></td></tr></table></figure><h2 id="ez_math">ez_math</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> BITS, hints, flag<br><br>p = getPrime(BITS)<br>q = getPrime(BITS)<br>n = p * q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br>e = <span class="hljs-number">0x10001</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Give you some boring pows:&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hints)):<br>    <span class="hljs-built_in">print</span>(hints[i])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621</span><br><span class="hljs-string">c = 324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043</span><br><span class="hljs-string">Give you some boring pows:</span><br><span class="hljs-string">pow(6, 42762902032363446334121451790132830028099011269558028556333775251728898854654431095595000922138958455510196735338223430882428451914478079186797153527810555787441234842366353864053114538165236037883914332840687123514412294276743506313011532002136735343280737244020115917460801848337792582496228600926958548903290, n) = 4</span><br><span class="hljs-string">pow(6, 141997416965295486849546892322458652502850390670128808480582247784728456230996812361056958004801816363393016360646922983916999235770803618904474553309200419301820603229504955218189709387942156848904968053547462302189568831762401075340100029630332409419313772378068180267756675141584884876543484516408660699471038, n) = 9</span><br><span class="hljs-string">pow(6, 163378867981477210016607618217525067516899896304907822758749135410592905658324027908854458465871295591148114728316034699358213461728042658497873130073105697195541220650688132150216266657024774867846925219967805863946774978900772828496605795631400777090954141000078238226487076065753781167791598816872139973922682, n) = 3</span><br><span class="hljs-string">pow(5, 101651508435846472131121026992982127175369332865677196032272241712711171024515826370577416844824734811581351106736224929238579734879671732717639124571916168742336862493284572465162318403582113621582374924091725060981390318743531229548188092491836655143124663368239422819562367919547196053790207486164506763679128, n) = 4</span><br><span class="hljs-string">pow(8, 7202269322818255506843028035725052687541091567764933235328308385449791332345247877549905289072216053144576876979686287212194040101112899704499548530779540409356827298148385589812450437990490353926475147376495772639210184768544932563432306664067058309318707174880146258394471096033723193568453520897758319446472, n) = 3</span><br><span class="hljs-string">pow(6, 64144353048545169501182177685199245042148516904337042834500662877593348281981646643392501383208437683265295103007335146323642677871717118780195730291715833681161852263549530796079671807247854056825871499261030685271618441415115259469517298003205103014921105866030173876191202772506688873744342901390437823354935, n) = 8</span><br><span class="hljs-string">pow(6, 21381451016181723167060725895066415014049505634779014278166887625864449427327215547797500461069479227755098367669111715441214225957239039593398576763905277893720617421183176932026557269082618018941957166420343561757206147138371753156505766001068367671640368622010057958730400924168896291248114300463479274451645, n) = 2</span><br><span class="hljs-string">pow(4, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 9</span><br><span class="hljs-string">pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339417, n) = 6</span><br><span class="hljs-string">pow(4, 10803403984227383260264542053587579031311637351647399852992462578174686998517871816324857933608324079716865315469529430818291060151669349556749322796169310614035240947222578384718675656985735530889712721064743658958815277152817398845148459996100587463978060762320219387591706644050584790352680281346637479169708, n) = 3</span><br><span class="hljs-string">pow(9, 3293982057350410278459882519024200329089724149803879577174733206141551016681048848343176690789446255513117465644006032807116613436995145441651711865811812905401261777042165657533800465011922458688696664211216129846590488003282750224539553623014598025837108471148806368738631086225250952573439068109703953523338, n) = 4</span><br><span class="hljs-string">pow(2, 43213615936909533041058168214350316125246549406589599411969850312698747994071487265299431734433296318867461261878117723273164240606677398226997291184677242456140963788890313538874702627942942123558850884258974635835261108611269595380593839984402349855912243049280877550366826576202339161410721125386549916678832, n) = 9</span><br><span class="hljs-string">pow(7, 156359509651684605051402965560382969488421316701585527115005130492947292379802933549188085059602557600903593831240316597311439285149968787780538126741092612405335349622445040578126369183536683733294143156965518222696624206221060030916594302284630706642066420353822195108928341123726471513256217857861184609387726, n) = 9</span><br><span class="hljs-string">pow(7, 170559914324671769117535654836487226009685359320636182075960576764702323732727088502920021993271666209903403463612731506055433486417625242935904916789051793747298593847158174830184596554822038310041512771676833824200302666130102306284852931958549925702330464987955245647072909056824574486147965487598401928881026, n) = 3</span><br><span class="hljs-string">pow(8, 123173545998439288789112229408394321687299601293124558024610682024304903390434162304434639284627183212602142063990097609866285125123521132060847804558007316726174558714580872721495215950738261924525921590925432950469320750692763054435407707754979429841729673081392197456811651326615118306026475411557079498916218, n) = 4</span><br><span class="hljs-string">pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 3</span><br><span class="hljs-string">pow(3, 6587964114700820556919765038048400658179448299607759154349466412283102033362097696686353381578892511026234931288012065614233226873990290883303423731623625810802523554084331315067600930023844917377393328422432259693180976006565500449079107246029196051674216942297612737477262172450501905146878136219407907046676, n) = 4</span><br><span class="hljs-string">pow(7, 146900004342901005519726059203387905743111231159623333298786259340649199259667124880775175860427705602975071010583553281005991812801779033020769274211420710213704563866848310994325033574484679477677016014418321661821714582236428708141287327064859146436371562752616380650770729341741997594308364878898526065859626, n) = 4</span><br><span class="hljs-string">pow(5, 172192380036714150788905270808196199818277334366508682218739812159577144024191963252552116624193235000074634457087111471641800814071769221933018962135503876997163938949365614056098717522475180216291316295788774044033481065993544994610614082708563841846852650913646728169671510827052772868386414581035580266356334, n) = 3</span><br><span class="hljs-string">pow(8, 68789042322037899901399142739922213531190892214327212247633649397602243027562329029767224931385807659445647908974735092145336602662873465734923450809783198772444106655438821950560058413359621316189435942839212247873870560114926459781136160541556773230183543715576244986800296759341282346581691226676298068904581, n) = 6</span><br><span class="hljs-string">pow(5, 159624441075769368394142197503800917105605266793330527400563601282696932962732683048452274321445695181246055818189076528484173940458256745774766217433996778905066039826859919029954611118842967545793750205189398662362981005947945407568116603784658538931110792205205160154125544664182868277733116044735541284338342, n) = 9</span><br><span class="hljs-string">pow(8, 14404538645636511013686056071450105375082183135529866470656616770899582664690495755099810578144432106289153753959372574424388080202225799408999097061559080818713654596296771179624900875980980707852950294752991545278420369537089865126864613328134116618637414349760292516788942192067446387136907041795516638892944, n) = 9</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>根据一个 hint 得到 <spanclass="math display">\[8^x\;mod\;n=4\]</span> <spanclass="math display">\[2^{3x-2}=1\;mod\;n\]</span>由费马小定理得，3x-2=phi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>n = <span class="hljs-number">369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621</span><br>c = <span class="hljs-number">324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043</span><br>e=<span class="hljs-number">65537</span><br>x=<span class="hljs-number">123173545998439288789112229408394321687299601293124558024610682024304903390434162304434639284627183212602142063990097609866285125123521132060847804558007316726174558714580872721495215950738261924525921590925432950469320750692763054435407707754979429841729673081392197456811651326615118306026475411557079498916218</span><br>phi=<span class="hljs-number">3</span>*x-<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,gmpy2.invert(e,phi),n)))<br><span class="hljs-comment"># b&#x27;NKCTF&#123;d15cr373_L0g_15_R3DuC710n_f0R_f4C70r1nG&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ez_polynomial">ez_polynomial</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bytearray</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br>p = getPrime(<span class="hljs-number">16</span>)<br>R.&lt;y&gt; = PolynomialRing(GF(p))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    P1 = R.random_element(degree=(ZZ.random_element(<span class="hljs-built_in">len</span>(flag), <span class="hljs-number">2</span>*<span class="hljs-built_in">len</span>(flag))))<br>    Q1 = R.random_element(degree=(ZZ.random_element(<span class="hljs-built_in">len</span>(flag), <span class="hljs-number">2</span>*<span class="hljs-built_in">len</span>(flag))))<br>    <span class="hljs-keyword">if</span> P1.is_irreducible() <span class="hljs-keyword">and</span> Q1.is_irreducible():<br>        P = P1<br>        Q = Q1<br>        <span class="hljs-keyword">break</span><br>e = <span class="hljs-number">65537</span><br>N = P*Q<br>S.&lt;x&gt; = R.quotient(N)<br>c = S(flag) ^ e<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P:&quot;</span> + <span class="hljs-built_in">str</span>(p) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;N:&quot;</span> + <span class="hljs-built_in">str</span>(N) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C:&quot;</span> + <span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-comment">#P:40031</span><br><span class="hljs-comment">#N:24096*y^93 + 38785*y^92 + 17489*y^91 + 9067*y^90 + 1034*y^89 + 6534*y^88 + 35818*y^87 + 22046*y^86 + 12887*y^85 + 445*y^84 + 26322*y^83 + 37045*y^82 + 4486*y^81 + 3503*y^80 + 1184*y^79 + 38471*y^78 + 8012*y^77 + 36561*y^76 + 19429*y^75 + 35227*y^74 + 10813*y^73 + 26341*y^72 + 29474*y^71 + 2059*y^70 + 16068*y^69 + 31597*y^68 + 14685*y^67 + 9266*y^66 + 31019*y^65 + 6171*y^64 + 385*y^63 + 28986*y^62 + 9912*y^61 + 10632*y^60 + 33741*y^59 + 12634*y^58 + 21179*y^57 + 35548*y^56 + 17894*y^55 + 7152*y^54 + 9440*y^53 + 4004*y^52 + 2600*y^51 + 12281*y^50 + 22*y^49 + 17314*y^48 + 32694*y^47 + 7693*y^46 + 6567*y^45 + 19897*y^44 + 27329*y^43 + 8799*y^42 + 36348*y^41 + 33963*y^40 + 23730*y^39 + 27685*y^38 + 29037*y^37 + 14622*y^36 + 29608*y^35 + 39588*y^34 + 23294*y^33 + 757*y^32 + 20140*y^31 + 19511*y^30 + 1469*y^29 + 3898*y^28 + 6630*y^27 + 19610*y^26 + 11631*y^25 + 7188*y^24 + 11683*y^23 + 35611*y^22 + 37286*y^21 + 32139*y^20 + 20296*y^19 + 36426*y^18 + 25340*y^17 + 36204*y^16 + 37787*y^15 + 31256*y^14 + 505*y^13 + 27508*y^12 + 20885*y^11 + 32037*y^10 + 31236*y^9 + 7929*y^8 + 27195*y^7 + 28980*y^6 + 11863*y^5 + 16025*y^4 + 16389*y^3 + 570*y^2 + 36547*y + 10451</span><br><span class="hljs-comment">#C:3552*x^92 + 6082*x^91 + 25295*x^90 + 35988*x^89 + 26052*x^88 + 16987*x^87 + 12854*x^86 + 25117*x^85 + 25800*x^84 + 30297*x^83 + 5589*x^82 + 23233*x^81 + 14449*x^80 + 4712*x^79 + 35719*x^78 + 1696*x^77 + 35653*x^76 + 13995*x^75 + 13715*x^74 + 4578*x^73 + 37366*x^72 + 25260*x^71 + 28865*x^70 + 36120*x^69 + 7047*x^68 + 10497*x^67 + 19160*x^66 + 17939*x^65 + 14850*x^64 + 6705*x^63 + 17805*x^62 + 30083*x^61 + 2400*x^60 + 10685*x^59 + 15272*x^58 + 2225*x^57 + 13194*x^56 + 14251*x^55 + 31016*x^54 + 10189*x^53 + 35040*x^52 + 7042*x^51 + 29206*x^50 + 39363*x^49 + 32608*x^48 + 38614*x^47 + 5528*x^46 + 20119*x^45 + 13439*x^44 + 25468*x^43 + 30056*x^42 + 19720*x^41 + 21808*x^40 + 3712*x^39 + 25243*x^38 + 10606*x^37 + 16247*x^36 + 36106*x^35 + 17287*x^34 + 36276*x^33 + 1407*x^32 + 28839*x^31 + 8459*x^30 + 38863*x^29 + 435*x^28 + 913*x^27 + 36619*x^26 + 15572*x^25 + 9363*x^24 + 36837*x^23 + 17925*x^22 + 38567*x^21 + 38709*x^20 + 13582*x^19 + 35038*x^18 + 31121*x^17 + 8933*x^16 + 1666*x^15 + 21940*x^14 + 25585*x^13 + 840*x^12 + 21938*x^11 + 20143*x^10 + 28507*x^9 + 5947*x^8 + 20289*x^7 + 32196*x^6 + 924*x^5 + 370*x^4 + 14849*x^3 + 10780*x^2 + 14035*x + 15327</span><br></code></pre></td></tr></table></figure><h3 id="题解">题解</h3><p>多项式 RSA，给定 n、e、c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>p=<span class="hljs-number">40031</span><br>P.&lt;y&gt;=PolynomialRing(Zmod(p))<br>x=y<br>N=<span class="hljs-number">24096</span>*y^<span class="hljs-number">93</span> + <span class="hljs-number">38785</span>*y^<span class="hljs-number">92</span> + <span class="hljs-number">17489</span>*y^<span class="hljs-number">91</span> + <span class="hljs-number">9067</span>*y^<span class="hljs-number">90</span> + <span class="hljs-number">1034</span>*y^<span class="hljs-number">89</span> + <span class="hljs-number">6534</span>*y^<span class="hljs-number">88</span> + <span class="hljs-number">35818</span>*y^<span class="hljs-number">87</span> + <span class="hljs-number">22046</span>*y^<span class="hljs-number">86</span> + <span class="hljs-number">12887</span>*y^<span class="hljs-number">85</span> + <span class="hljs-number">445</span>*y^<span class="hljs-number">84</span> + <span class="hljs-number">26322</span>*y^<span class="hljs-number">83</span> + <span class="hljs-number">37045</span>*y^<span class="hljs-number">82</span> + <span class="hljs-number">4486</span>*y^<span class="hljs-number">81</span> + <span class="hljs-number">3503</span>*y^<span class="hljs-number">80</span> + <span class="hljs-number">1184</span>*y^<span class="hljs-number">79</span> + <span class="hljs-number">38471</span>*y^<span class="hljs-number">78</span> + <span class="hljs-number">8012</span>*y^<span class="hljs-number">77</span> + <span class="hljs-number">36561</span>*y^<span class="hljs-number">76</span> + <span class="hljs-number">19429</span>*y^<span class="hljs-number">75</span> + <span class="hljs-number">35227</span>*y^<span class="hljs-number">74</span> + <span class="hljs-number">10813</span>*y^<span class="hljs-number">73</span> + <span class="hljs-number">26341</span>*y^<span class="hljs-number">72</span> + <span class="hljs-number">29474</span>*y^<span class="hljs-number">71</span> + <span class="hljs-number">2059</span>*y^<span class="hljs-number">70</span> + <span class="hljs-number">16068</span>*y^<span class="hljs-number">69</span> + <span class="hljs-number">31597</span>*y^<span class="hljs-number">68</span> + <span class="hljs-number">14685</span>*y^<span class="hljs-number">67</span> + <span class="hljs-number">9266</span>*y^<span class="hljs-number">66</span> + <span class="hljs-number">31019</span>*y^<span class="hljs-number">65</span> + <span class="hljs-number">6171</span>*y^<span class="hljs-number">64</span> + <span class="hljs-number">385</span>*y^<span class="hljs-number">63</span> + <span class="hljs-number">28986</span>*y^<span class="hljs-number">62</span> + <span class="hljs-number">9912</span>*y^<span class="hljs-number">61</span> + <span class="hljs-number">10632</span>*y^<span class="hljs-number">60</span> + <span class="hljs-number">33741</span>*y^<span class="hljs-number">59</span> + <span class="hljs-number">12634</span>*y^<span class="hljs-number">58</span> + <span class="hljs-number">21179</span>*y^<span class="hljs-number">57</span> + <span class="hljs-number">35548</span>*y^<span class="hljs-number">56</span> + <span class="hljs-number">17894</span>*y^<span class="hljs-number">55</span> + <span class="hljs-number">7152</span>*y^<span class="hljs-number">54</span> + <span class="hljs-number">9440</span>*y^<span class="hljs-number">53</span> + <span class="hljs-number">4004</span>*y^<span class="hljs-number">52</span> + <span class="hljs-number">2600</span>*y^<span class="hljs-number">51</span> + <span class="hljs-number">12281</span>*y^<span class="hljs-number">50</span> + <span class="hljs-number">22</span>*y^<span class="hljs-number">49</span> + <span class="hljs-number">17314</span>*y^<span class="hljs-number">48</span> + <span class="hljs-number">32694</span>*y^<span class="hljs-number">47</span> + <span class="hljs-number">7693</span>*y^<span class="hljs-number">46</span> + <span class="hljs-number">6567</span>*y^<span class="hljs-number">45</span> + <span class="hljs-number">19897</span>*y^<span class="hljs-number">44</span> + <span class="hljs-number">27329</span>*y^<span class="hljs-number">43</span> + <span class="hljs-number">8799</span>*y^<span class="hljs-number">42</span> + <span class="hljs-number">36348</span>*y^<span class="hljs-number">41</span> + <span class="hljs-number">33963</span>*y^<span class="hljs-number">40</span> + <span class="hljs-number">23730</span>*y^<span class="hljs-number">39</span> + <span class="hljs-number">27685</span>*y^<span class="hljs-number">38</span> + <span class="hljs-number">29037</span>*y^<span class="hljs-number">37</span> + <span class="hljs-number">14622</span>*y^<span class="hljs-number">36</span> + <span class="hljs-number">29608</span>*y^<span class="hljs-number">35</span> + <span class="hljs-number">39588</span>*y^<span class="hljs-number">34</span> + <span class="hljs-number">23294</span>*y^<span class="hljs-number">33</span> + <span class="hljs-number">757</span>*y^<span class="hljs-number">32</span> + <span class="hljs-number">20140</span>*y^<span class="hljs-number">31</span> + <span class="hljs-number">19511</span>*y^<span class="hljs-number">30</span> + <span class="hljs-number">1469</span>*y^<span class="hljs-number">29</span> + <span class="hljs-number">3898</span>*y^<span class="hljs-number">28</span> + <span class="hljs-number">6630</span>*y^<span class="hljs-number">27</span> + <span class="hljs-number">19610</span>*y^<span class="hljs-number">26</span> + <span class="hljs-number">11631</span>*y^<span class="hljs-number">25</span> + <span class="hljs-number">7188</span>*y^<span class="hljs-number">24</span> + <span class="hljs-number">11683</span>*y^<span class="hljs-number">23</span> + <span class="hljs-number">35611</span>*y^<span class="hljs-number">22</span> + <span class="hljs-number">37286</span>*y^<span class="hljs-number">21</span> + <span class="hljs-number">32139</span>*y^<span class="hljs-number">20</span> + <span class="hljs-number">20296</span>*y^<span class="hljs-number">19</span> + <span class="hljs-number">36426</span>*y^<span class="hljs-number">18</span> + <span class="hljs-number">25340</span>*y^<span class="hljs-number">17</span> + <span class="hljs-number">36204</span>*y^<span class="hljs-number">16</span> + <span class="hljs-number">37787</span>*y^<span class="hljs-number">15</span> + <span class="hljs-number">31256</span>*y^<span class="hljs-number">14</span> + <span class="hljs-number">505</span>*y^<span class="hljs-number">13</span> + <span class="hljs-number">27508</span>*y^<span class="hljs-number">12</span> + <span class="hljs-number">20885</span>*y^<span class="hljs-number">11</span> + <span class="hljs-number">32037</span>*y^<span class="hljs-number">10</span> + <span class="hljs-number">31236</span>*y^<span class="hljs-number">9</span> + <span class="hljs-number">7929</span>*y^<span class="hljs-number">8</span> + <span class="hljs-number">27195</span>*y^<span class="hljs-number">7</span> + <span class="hljs-number">28980</span>*y^<span class="hljs-number">6</span> + <span class="hljs-number">11863</span>*y^<span class="hljs-number">5</span> + <span class="hljs-number">16025</span>*y^<span class="hljs-number">4</span> + <span class="hljs-number">16389</span>*y^<span class="hljs-number">3</span> + <span class="hljs-number">570</span>*y^<span class="hljs-number">2</span> + <span class="hljs-number">36547</span>*y + <span class="hljs-number">10451</span><br>C=<span class="hljs-number">3552</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">6082</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">25295</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">35988</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">26052</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">16987</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">12854</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">25117</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">25800</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">30297</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">5589</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">23233</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">14449</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">4712</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">35719</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">1696</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">35653</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">13995</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">13715</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">4578</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">37366</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">25260</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">28865</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">36120</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">7047</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">10497</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">19160</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">17939</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">14850</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">6705</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">17805</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">30083</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">2400</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">10685</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">15272</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">2225</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">13194</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">14251</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">31016</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">10189</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">35040</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">7042</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">29206</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">39363</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">32608</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">38614</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">5528</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">20119</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">13439</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">25468</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">30056</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">19720</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">21808</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">3712</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">25243</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">10606</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">16247</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">36106</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">17287</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">36276</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">1407</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">28839</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">8459</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">38863</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">435</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">913</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">36619</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">15572</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">9363</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">36837</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">17925</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">38567</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">38709</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">13582</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">35038</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">31121</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">8933</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">1666</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">21940</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">25585</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">840</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">21938</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">20143</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">28507</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">5947</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">20289</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">32196</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">924</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">370</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">14849</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">10780</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">14035</span>*x + <span class="hljs-number">15327</span><br>e=<span class="hljs-number">65537</span><br><br>q1=N.factor()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>q2=N.factor()[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>phi = (p**q1.degree() - <span class="hljs-number">1</span>) * (p**q2.degree() - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">assert</span> gcd(e, phi) == <span class="hljs-number">1</span><br>d = gmpy2.invert(e, phi)<br><br>m=<span class="hljs-built_in">pow</span>(C,d,N)<br><span class="hljs-built_in">print</span>(m)<br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># NKCTF&#123;We_HaV3_n0th1ng_But_dr3amS&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数字中国-babysecret&quot;&gt;数字中国 Babysecret&lt;/h1&gt;
&lt;p&gt;题目&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>DUTCTF2023</title>
    <link href="https://sch01ar.github.io/2023/03/28/DUTCTF2023/"/>
    <id>https://sch01ar.github.io/2023/03/28/DUTCTF2023/</id>
    <published>2023-03-28T02:05:45.000Z</published>
    <updated>2023-03-28T09:29:06.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dutctf2023wp">DUTCTF2023wp</h1><h2 id="写在前面">写在前面</h2><p>仔细一想自己学 CTF 也一年了，纪念一下最后一次参加校赛🥹，明年可就是出题人了🤓。但是感觉一年以来荒废了很多时间，在很多方面对题目不熟悉，总跑偏，甚至是自己复现过的一些方法都没意识到（hint太到位了 😭）。</p><h2 id="crypto">Crypto</h2><p>第一次 ak，好爽 😭</p><h3 id="老滚五">*老滚五</h3><p>百度搜龙语，耐心对着找就出了<code>DUTCTF&#123;YOU_ARE_A_REAL_DRAGONBORN&#125;</code></p><h3 id="神奇的短信">*神奇的短信</h3><p>诺基亚手机，9键，第一位代表哪个键，第二个代表第几个字母，<code>DUTCTF&#123;SCREW&#125;</code></p><h3 id="随机数的力量">随机数的力量</h3><p>可先了解一下 MT19937 伪随机数原理，然后看一下<ahref="https://blog.csdn.net/qq_42557115/article/details/128228201?spm=1001.2014.3001.5506">破解方法</a>，对于梅森旋转算法之前<ahref="https://sch01ar.github.io/2022/10/16/2021ByteCTF-easyxor/">博客</a>也详细推导过。这里针对题目分析一下，首先ban 掉了 32位的预测方法，通过了解到，<code>randcrack</code>库实际上是通过收取特定位数来实现预测，例如32 位数，就需要 624 个，那么如果使用 64 位数，应该就需要 312个。后续只要对收取的数字进行一下处理，转成 624 个 32 位数即可。这里还有一个疑问就是，最大的 64 位数是<spanclass="math inline">\(2^{64}-1\)</span>，但是如果传<spanclass="math inline">\(name=2^{64}-1\)</span>就无法预测，而改成其余略小一点的64 位数即可。</p><h4 id="exp">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br>r=remote(<span class="hljs-string">&quot;210.30.97.133&quot;</span>,<span class="hljs-string">&#x27;28032&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>name=<span class="hljs-number">2</span>**<span class="hljs-number">64</span>-<span class="hljs-number">2</span><br>name=long_to_bytes(name)<br><span class="hljs-built_in">print</span>(name)<br>r.send(name)<br>r.recv()<br>count=<span class="hljs-number">0</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;random.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">while</span> count&lt;<span class="hljs-number">312</span>:<br>    r.send(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>    num=<span class="hljs-built_in">int</span>(r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>])<br>    count+=<span class="hljs-number">1</span><br>    file.write(<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&quot;\n&quot;</span>)<br>file.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;finish&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;random.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    l = f.readlines()<br>l = [<span class="hljs-built_in">int</span>(i.strip()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l]<br>t = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>    t.append(l[i] &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">32</span> - <span class="hljs-number">1</span>))<br>    t.append(l[i] &gt;&gt; <span class="hljs-number">32</span>)<br><br>rc = RandCrack()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>    rc.submit(i)<br>guess=rc.predict_getrandbits(<span class="hljs-number">64</span>)<br>r.send(<span class="hljs-built_in">str</span>(guess).encode())<br><span class="hljs-built_in">print</span>(r.recvline())<br><span class="hljs-comment"># DUTCTF&#123;61cdf3eb-e4d9-4613-b533-ff4f7fb6c80a&#125;</span><br></code></pre></td></tr></table></figure><h3 id="shamir">shamir</h3><p>直接找脚本跑，具体如何恢复 a0 系数就不细说了。之前 hitcon 有个也是shamir 的题，也挺有意思的。<ahref="https://sch01ar.github.io/2022/11/28/hitcon2022-BabySSS/">babysss</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>P = PolynomialRing(GF(p), <span class="hljs-string">&#x27;x&#x27;</span>)<br>ret = P(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> shares:<br>    r = P(<span class="hljs-number">1</span>) * y<br>    <span class="hljs-keyword">for</span> xx, yy <span class="hljs-keyword">in</span> shares:<br>        <span class="hljs-keyword">if</span> x != xx:<br>            r = r * P((<span class="hljs-number">0</span> - xx) / (x - xx))<br>    ret = ret + r<br><span class="hljs-built_in">print</span>(ret)<br><br>P = PolynomialRing(GF(p), <span class="hljs-string">&#x27;x&#x27;</span>)<br>ret = P(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> shares:<br>    r = P(<span class="hljs-number">1</span>) * y<br>    <span class="hljs-keyword">for</span> xx, yy <span class="hljs-keyword">in</span> shares:<br>        <span class="hljs-keyword">if</span> x != xx:<br>            r = r * P(<span class="hljs-string">&#x27;(x - %d) / (%d - %d)&#x27;</span> % (xx, x, xx))<br>    ret = ret + r<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(ret[<span class="hljs-number">0</span>])))<br><span class="hljs-comment"># b&#x27;DUTCTF&#123;23935a6d-a94d-4905-845a-aec9c8646e4d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="ecc1">ECC1</h3><p>发现是 ECDSA 类型，于是现学。。。下面写一下 ECDSA的签名与验证过程。</p><h4 id="场景">场景</h4><p>Alice 想要使用她的私钥<spanclass="math inline">\(d_A\)</span>来签名，Bob 想用 Alice 的公钥 <spanclass="math inline">\(H_A\)</span>要验证签名<spanclass="math inline">\(H_A=d_AG\)</span>。 只有 Alice才能提供正确的签名，而每个人都可以验证签名。</p><h4 id="签名">签名</h4><p>1.选定一条椭圆曲线<span class="math inline">\(E_p(a,b)\)</span>。</p><p>2.选取一个随机数<spanclass="math inline">\(k,1&lt;k&lt;n-1\)</span>，<spanclass="math inline">\(n\)</span>为椭圆曲线的阶。</p><p>3.选取椭圆曲线的基点<span class="math inline">\(G(a,b)\)</span>,计算<span class="math inline">\(K=k * G(a,b)\)</span>，令<spanclass="math inline">\(r=K[0]\mod n\)</span>，即 r 是 K 点的横坐标（若 r为 0，重新选 k 进行计算）。</p><p>4.计算明文 M 的哈希，令<spanclass="math inline">\(e=hash(M)\)</span>，计算<spanclass="math inline">\(s=k^{-1}(z+rd_A)\mod n\)</span>。</p><p>5.给出签名<span class="math inline">\((r,s)\)</span></p><h4 id="验证">验证</h4><p>1.计算 <span class="math inline">\(u_1=s^{-1}z\mod n\)</span></p><p>2.计算 <span class="math inline">\(u_2=s^{-1}r\mod n\)</span></p><p>3.计算点<span class="math inline">\(P=u_1G+u_2H_A\)</span></p><p>当<span class="math inline">\(r=x_P\modn\)</span>时，签名验证成功。</p><h4 id="解题过程">解题过程</h4><p>通过对题目的初步阅读，发现关键是求出私钥<code>d=privkey</code>，而想要求出<spanclass="math inline">\(d\)</span>就要求出<spanclass="math inline">\(k\)</span>，虽然<spanclass="math inline">\(k\)</span>是以随机数的形式出现，但发现本题中每次签名过程的 k并不是完全随机，而是线性伪随机<span class="math inline">\(k = (a * k +b)\mod n\)</span>。这里我很想把<spanclass="math inline">\(k\)</span>求出来，然后再去求私钥<spanclass="math inline">\(d\)</span>。所以有没有一种可能，不用求<spanclass="math inline">\(k\)</span>，如果把<spanclass="math inline">\(k\)</span>消掉，方程里只剩一个未知数<spanclass="math inline">\(d\)</span>，即可。细心一点进行数学推导，就会发现答案。<span class="math display">\[k_1s_1=e+r_1d\mod n\]</span> <spanclass="math display">\[k_2s_2=e+r_2d\mod n\]</span> <spanclass="math display">\[k_2=ak_1+b\mod n\]</span> <spanclass="math display">\[k_2=ak_1+b+xn\]</span> <spanclass="math display">\[s_1s_2k_2=s_1s_2ak_1+s_1s_2b+s_1s_2xn\]</span><span class="math display">\[s_1(e+r_2d)=s_2a(e+r_1d)+s_1s_2b \modn\]</span> <spanclass="math display">\[d=(s_1r_2-s_2ar_1)^{-1}(s_2ae-s_1e+s_1s_2b)\modn\]</span></p><p>这里两次的使用的<spanclass="math inline">\(e\)</span>一样，是因为传的明文一样，<spanclass="math inline">\(n\)</span>对应的是题目里给的<spanclass="math inline">\(order\)</span>。这里还想说一下自己因为不细致走过的弯路，题目里通过<spanclass="math inline">\(p\)</span>定义的曲线，所以误以为<spanclass="math inline">\(curve.order\)</span>是<spanclass="math inline">\(p\)</span>，这样就会导致前两个式子和第三个算式的模数不同。有趣的是，找到了一篇论文和文章进行了实现。<a href="https://cseweb.ucsd.edu/~mihir/papers/dss-lcg.pdf">论文</a>但其实<spanclass="math inline">\(curve.order=order\)</span>所以上述所有都是在模<spanclass="math inline">\(order的条件下\)</span>，所以进行一下推导就出了。</p><h4 id="exp-1">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha384, sha256<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> base64<br>r1=<span class="hljs-number">3279878223466283028618950233302638071226405889025719666069973709805626015547691183378582347284741486262757601498554</span><br>s1=<span class="hljs-number">17384499590667625694725422408289434727888355224304513038330377593191514147527427495591599008735913255202229321517643</span><br>r2=<span class="hljs-number">35791573017068929691265773591779771913506228775796561985255300322790112181066670265127516180574601131688667017030763</span><br>s2=<span class="hljs-number">10828760915074235995526547174613537265169576586247069263719047150071416454765113291660131007073071569964390274403778</span><br>order = <span class="hljs-number">0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973</span><br>a = -<span class="hljs-number">3</span><br>b = <span class="hljs-number">0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef</span><br><br>m=<span class="hljs-string">b&#x27;12&#x27;</span><br>e= <span class="hljs-built_in">int</span>(sha384(m).hexdigest(), <span class="hljs-number">16</span>)<br><br>d=((s2*a*e-s1*e+s1*s2*b)*gmpy2.invert(s1*r2-s2*a*r1,order))%order<br><br>privkey=d<br>ct=<span class="hljs-string">&quot;Iq2XtaYU4TrhdPN6Icyy4r5FQQRn4u/QY7Rv/GTMeo8mNESW7UMcHO969aP28owj&quot;</span><br>key = sha256(<span class="hljs-built_in">str</span>(privkey).encode()).digest()<br>aes = AES.new(key, AES.MODE_ECB)<br>flag = aes.decrypt(base64.b64decode(ct))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># b&#x27;DUTCTF&#123;03c77266-981a-49c7-985c-427dea8c3018&#125;\n\x03\x03\x03&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="ecc2">ECC2</h3><p>hint:二元 copper 看到 hint 瞬间知道怎么做了，前段时间刚学了一下多元copper，感慨一下还是运用不熟练，没有一眼发现。</p><h4 id="解题思路">解题思路</h4><p>同样是 ECDSA，相比于上题来说，k 是随机的，但是每次签名的时候会泄露 k的高位。此题另外一个关键是，<spanclass="math inline">\(r\)</span>是由私钥<spanclass="math inline">\(d\)</span>生成的，所以不管传什么明文，所得到的<spanclass="math inline">\(r\)</span>是一样的，利用这一点，我们可以构造一个二元方程。<span class="math display">\[s_1k_1=z_1+dr \mod n\]</span> <spanclass="math display">\[s_2k_2=z_2+dr \mod n\]</span> <spanclass="math display">\[k=kh+kl\]</span> <spanclass="math display">\[s_1(k_1h+k_1l)-z_1=s_2(k_2h+k_2l)-z_2 \modn\]</span> <spanclass="math display">\[f(k_1l,k_2l)=s_1(k_1h+k_1l)-z_1-s_2(k_2h+k_2l)+z_2\]</span>随后使用多元 copper 进行求解。具体可看上篇博客。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>    R = f.base_ring()<br>    N = R.cardinality()<br><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br><br>    <span class="hljs-keyword">return</span> []<br><br>p=<span class="hljs-number">0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973</span><br>z1=<span class="hljs-number">48635463943209834798109814161294753926839975257569795305637098542720658922315</span><br>s1=<span class="hljs-number">28960557153977955124105855928246892459194129539041010907864680412903817675556585052129118747753883286132889323816650</span><br>r1=<span class="hljs-number">10262329650789864528165246046678664604936098138502587549051188712903293032192883286179241289544424703403302125420513</span><br>kh1=<span class="hljs-number">30054462723734257949377771041701920514235184485792075736773676269952584122368</span><br><br>z2=<span class="hljs-number">96094161643976066833367867971426158458230048495430276217795328666133331159861</span><br>s2=<span class="hljs-number">32768223277193629352710157834142251230132284853883889815139295450898873765110205447982974111022207901310306828066654</span><br>kh2=<span class="hljs-number">72175458450676302934456504495778373001580390042980746283386923644015828008960</span><br>P.&lt;l1,l2&gt; = PolynomialRing(Zmod(p))<br>f = s1*(kh1+l1)-z1+z2-s2*(kh2+l2)<br>roots=small_roots(f,[<span class="hljs-number">2</span>^<span class="hljs-number">123</span>,<span class="hljs-number">2</span>^<span class="hljs-number">123</span>],m=<span class="hljs-number">4</span>,d=<span class="hljs-number">4</span>)<br><br>k1=kh1+roots[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(k1)<br>d=(s1*k1-z1)*gmpy2.invert(r1,p) %p<br><span class="hljs-built_in">print</span>(d)<br><br></code></pre></td></tr></table></figure><h3 id="ez_rsa">ez_RSA</h3><p>hint 1:<ahref="https://www.ijcsi.org/papers/IJCSI-9-2-1-311-314.pdf">论文</a></p><p>hint 2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_P = getPrime(<span class="hljs-number">512</span>)<br>_Q = getPrime(<span class="hljs-number">512</span>)<br>_E = getPrime(<span class="hljs-number">128</span>)<br></code></pre></td></tr></table></figure><h4 id="解题思路-1">解题思路</h4><p>通过论文，前半部分白给，按照论文造格，即可规约出<spanclass="math inline">\(_P\)</span>。 接下来的问题就是如何求<spanclass="math inline">\(_E\)</span> <span class="math display">\[c=rh+m\mod p\]</span> <span class="math display">\[h=f^{-1}g \mod p\]</span>将一式带入二式 <span class="math display">\[c=r(f^{-1}g)+m \modp\]</span> <span class="math display">\[cf=rg+mf \mod p\]</span> 因为 r是 1024 位，g 是 768 位，f 是 1024 位，m 是 128 位，p 是 2048 位，所以<span class="math display">\[rg+mf \mod p=rg+mf\]</span> <spanclass="math display">\[cf \mod p=rg+mf\]</span> 两边同时对<spanclass="math inline">\(g\)</span>取模，即可消去未知数<spanclass="math inline">\(r\)</span>，得到 <spanclass="math display">\[m=(f*c \mod p)*f^{-1} \mod g\]</span></p><h4 id="exp-2">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>N = [<span class="hljs-number">24488505552230772703898405057744092798020197662887100045928566607461798879415998969433911671592867423691193007893212171790448148496033832249754470467035859576039972852765027824033483902812925380301406741140813221150182954931965513380139064574526788102105668393014229432860117219535402978106934989998539012187109667064745849634399649647736413364618806713226228056106971513481416594701372170640645464293015870036724187258748076791656956875094445695553182473517994436554776090668857119474259698867998753960189992604478465847990459188823363076285013562416943842050784320042575258091833845135161380009815903587838764844701</span>, <span class="hljs-number">21942338208435084182385640211704681707801054068614769447992577290797559734360545040045515934790906815025864580810713391648536011436866691247019862082665443291278436035391244597094754164488282306715119916684441028200752060845757620891120126278315497677949907573669523197492597821720339218427123565023326747131520068041684678463047030113730829126604863370010551660281077018828022548643645226108297487424616446107497927195470395775786882432946367941603909313849788734757826143420030667354373800077810995031850751976273876305078673953634214542034076821701690757305733970718313282246021719246282428899044959387451493813721</span>, <span class="hljs-number">23497668455233023777086339110715316747963597549643382192342253292465976405928871970112373689839058903850148485020472785615984665835691940413204367982444656171214501783518611386935865837214185153287455312882873758597381603828243325547041133407750654379328638375958886679826484549746013150412316456105776249088635607093923492322952956766124054779608085768835524352691098655090967034048099181640575487096512809322011207592050807314037459121218823863349190706610153922549826130316241130228507499742267531513164868277365453995102439631325485240239658064278370772323955597197097645462559462696920075736717500412375072176467</span>, <span class="hljs-number">24602752336390525414690399431651054304570268658699514976379562458281671118195956305892712759109048179159883455858696847532969723511866788216663843505906403537667342180926673360088955074821393941870156428046985578754285100772721826939367053016610705219388473954106242835781778652607226825374256068393417345461655468867721352760378170127520095819323941371368236422448970366651248269187025683922130051664854342633071652748279316861774478515760339148013907026473066156906456471149913011825141372049833977982484234333570458678135686171332929999460166919896376717386857118613691507888393949301977627819777979592178896966623</span>, <span class="hljs-number">18953499185208189736030572848209776079906463657279533180726462147347299551041367061731767581264798291046925335336327748600462387056921448905471076513661226975709082926810559345546174299411679334921753473024289680372398629669189901701373013365576241051181536865537903618404021542712933154242921449622232452683929678888579145745315642541459705378712865701616368909067164933131032658834080355333776051792137130753989546439723368685913285626433094254606871447681788888268092549602747826573836417735293177348298419537651913321751942895245511550484631808345929882169885236619551016828298778897908525366562962685667912389997</span>, <span class="hljs-number">26058997074784206404795420975966370332956308684314157918342868748891408356160719486198464051733976893317939197082091977103538589213919661919071445422553112631329635223235217838410237178255375880503961177672498539855597740321555211143834639913980706595866117350864736716804583363460558182596815041999893879570562385793992073242663001875888252374638338786999498583269912809638941228890064879230976750529250265485928246165002061153079962922548580197649819298400367411220374463545622395097310522274479190791404838638086998257879095579646234740048206108128561416400963440017838636610491341835198236244222159900729586179917</span>, <span class="hljs-number">20129288490597244863994508524683286916543923374256909422701726115895380145135775471811451623704583730973416890276995662068307971557772661682030720361327963488534216410626882836351191572216702896255347307172468393873617456534444076131643183095198850704362841759392439604384236671314273401344802110069810756951497132798868529183844409689240676486910668076940982100512452093237882154916463456686838284295430539114311525041035893514486445447797574059480052756975515999613849122461978469862438350168200833428502345669466715840072957576654100577765563579448919948971960189182499058054213819157835509700663218459190524786481</span>, <span class="hljs-number">25772226888628216378889012105665796465806282302724456587869873910973423334812434127373733072599928022616753628676669330475503814215217145564188824369324420571202597054472716155179526532355187639821238629970447579319002750207485409261447903974934743921421644358692562332522542087034591326117205324672579857803562028718153429724027759486210144857662620406921986137992325725929734137942692560079628569267164743942853035640478323806095958927790086262013882385080985080476481526342090748836288133196655325636773255199453976910823102554721967925125346896277653138394770159352125883696418264884829676269343523006494765489493</span>, <span class="hljs-number">28180917678264096364213130554312518769321694756137354982942466799600070334989648086800577578199737775401103316802639534494851192425673873971245152762518574367704605203711578476934662035721848792226778740807648983742493303616228706844886115523257289936262329494196476301758716578131772761063410479805704963231509036888772912085068364409900628643478825960092268089737383336074494922924828657292311276635453573546156537729462748165148899289836500996916977979364330535388109166791384761518107152445520068189599143970118706438070727813977600299673995541318641712212956428068655583090081599129833822672148472274657395494311</span>, <span class="hljs-number">24096520981594733135540041445045293573841960767599910205052334165000928248824939510537161616790497646941116274229120870236655788506537976075387985908332620383393482411221069123523398118152293411915859727395926627459816089411701261045912226055104998834013378345004735522524517047738956815571358744380828133660488637141981661993087692525146337627421105058036188111847939723347406549254328070707781083013868559585263821261988100254326668273025331949480627178076069223680391626817412433551120273746233452706538363782378142581856137151539947066350167731639115192474458725211790700741814914076862192417315078235105797677087</span>]<br>e = [<span class="hljs-number">14990816743505654628622165338185393514788304851681933876648378016378133833004552588239572072513331166211546424386679543805403883223923897158291656742820659945559107645757683415181516223375888892537454654274671604670730747216886153077537316948532577370868893079392334339867710645123984583810773407647889550347449753485123831550537129872419324613572762662943117457398292227733753412373200584443331215704089181076331725835197653425535473266783470265927502335277809501441179341787793626320140280547900249747914540629687582748709954430668955769537357213201938032236484707582662514737019038265736833188979186130912521585863</span>, <span class="hljs-number">13980763827627068753802142437506147756961327147120384846585792065753477874831749262150192356232427534646403824833533108774540560060637613211774874146149413276494249299817871570564680188453788941137026336224153892313514846782554574856039742426326880334039809963027869250565380677631559930557470002669597495218354140744423266568608599391371104543521898824208746495592540223292285013253969918044073047052609539584913355840849256854717119937629706258126113370733925178495605830457126093047938416483351881694926018583377081560677662700573997147306413923358544678275002331286891558769920350415867546838176106256496063304591</span>, <span class="hljs-number">14780579063990891009355254665451991842503160008305503704320535457678300669711337036613671205753152064334928698447349080369975612980241221790534610771459317421130389318122536272425617948089698175341164528907013863717279614308846442304043798865582825561326523712699604113706443659794242165306104800524140375312705427738731082746546483455937494834598516633798602613773983973082013405488005834441952593810114149056842051193479897318422863626404580404473988124447913889995503058357464905293074956766641790136082627384940112558905750637675896060873962861100183982056080416496196938621664845449511253953693501170360085128903</span>, <span class="hljs-number">16711214191457281887756669342902780733937448803879374453283083153045867559930627177819085640533933761065820583745596344138637603092032409736562935244419493366400643159102093212367352079844413274114447848612728357893278528717959336656627368619208606671105396151558788997816807664937857266355753831602315622410363783260969617861338922264348857939060068689390352416811884902181820721198554329654234974727685100909871157125199506067300247610609375498829939581959252431781213219581899029244337677995603856416381628617372391009770342970567780661612096558829742694823690274654577788829371605600329173594776863959477520982103</span>, <span class="hljs-number">18594117439975066482790234032790248484174823520961644528083330915871018572967431566501699139228578176001011256220804587663135499149059407383901633734350030924262764120967872313971006208598335484653360543538290425602814914998281169215776238281191659744867774608489555339417931965559389905685260689276642846548237827078605788634420231309087514322505420366400886676286045230690585373663959941903912684043605972772430437021974723246305737570908098822722309519738296040046616628592027960453261069541838924103183139583780034839530714165332756110278585636399031079295623434558699098474195076126900986950380911451241239011623</span>, <span class="hljs-number">19559194708926966384760572911017873704390901879016615709461235634857479293981826218552827124678431912373841237544670086117088143163449428902590870488332804443126943800454719812933352578428975217906573009588458046733219592409163112257629384965561668227155289274870789279692570923323341070702638493390067659325308762774741975186341363197445143155212450927975486461028431348416961669886795040925540481784741277337652763782276077736249466953316651582151597935395446083479237519148263818662252163299112568786641111937462894974201544836218414635476953190320368111973284227681772063712004605784879340270632621230933987836403</span>, <span class="hljs-number">5824897109429461861038559948506819313355946138347155891819686064252333158962143819073087399430296860592162523314581575301694562287944866650117694395235555843552189332034264692080727548447621159473572891967606750661558342895087758387175261905746359083324985663989695094130538863365332293493187900142223849133010181832891103712795299278734353222329578233927239011173519663168582557337156776620015916288674042041517496559833923719141125286924436626406982998776488087846464518298748666520211469343659082499491328257233064132961965360640582912978294198510457897250297734712016272553820127075579291175789492076788909484903</span>, <span class="hljs-number">20093930684870093704403628731447520798260787667650361930073915794127380334852577783044260869395685576326078666945720832081037254077260101666695730827561930288288626012593987518548527306424423460475649408280260551546890648986667166140359311359169025356693571920643668500080642858683961398169608007993750190342851289303457474260980188486985907096713430933611341247919058812281901199513792393764217087020138671598226265365230063697174126442928938906561077393855304164795051437164668523033528227661541499372034727485518105697908307910643724070408695313764548498315363035914104961938999577929197200252814942475110976180871</span>, <span class="hljs-number">13869037204167094886192017467762072572783689922376209408114704992930196660451733740128770089390429756385424487822227154417591526218831614700313009517560442765341004656007062383066045588028985918307953894476640133705870038747226187376945281065288052642888278440278584213451675290377535235274143342509678251099489519546607275875817452579354452528872170870264159683907581449035523356408903151369434094661409904630205371744727229020444462773195914556915394012165505241756167908324547409015797008797997989972788159358702567092724994056441270029746996952711879409266397452428164494981358551995284408128900801847197898197703</span>, <span class="hljs-number">16428914441257851380586127106058764321964408189162357989041855273182059205104249998708456730725826756916884625752948925439260021807286451208792938938383227370712775700520945386124870496736574155128284017251496087747219850551258429445192925803640362009834613809916245072076167924064602020863892399904864291654032814159981274305358311150518930746678429624443100376055916453000181475668378167017592583982166064823738703442241236483326956657714675862739661758651886000087664689028808007926485550765412244122793538316265219584816933243708850098752213795555147857155308284006310944783836011777029728050734557927695090450463</span>]<br>h = <span class="hljs-number">17057560302480534379234311167711354032439973325482676122782839023838935814408613403284668375931576462858905421541683065236603421317254300086508655626651873266040666001440382609416143327328595694650892654181322169131419137499521806171136667190680286550054757614439176120722968245637537762536027151112462471175128228332115872386914009028917282712969864162014534349894097630435981616397927996659304774192119923204194457170407620951605854984132096323757248091094843032025335275329879498464954795905069479922445973408638012299137799439137333602346053104379692214857680138658746271359584207903024337671041791120368370062433</span><br>p = <span class="hljs-number">23179145952004786572757983799234920430633779535677420935312084200876619976669209523097965011942953301009181896712798356246795541216866485028100154585670368454638903095414689361363165856795506643767180784134469175448265110332780161626935638201727064861000660550974538859215360585812084437914540257823591140036538883159605868368631634046489596162666365138195416471349119538264390305637634631928131927917205635961354890675410476331906772088716752701051345455548022086136550213407689965095213596763864324407875037568058288772731307077778493908925797859779443512010698291195779124551476846827399730849219310626324177039013</span><br>c = <span class="hljs-number">15328778973393120290854691400883441405718565831853248832402785901824594060217263898505045095423915117607252735027062529235271181273369158106663012261516839968695274180392897131714116184427167484636074174222379080262947055141246928560805523812182030937490501937675882728123658706241797231583047415776685427205848679710458819937970889433693918217229443853850611378434132748815873718734347796950384002864988580300986131985895380275684001917985319042538513477446695790524025775222264595925792957208966818239868486709939779314546467392281422991680454815958889806132331710070011646205598326181711484973483426663596859525513</span><br>ct = <span class="hljs-number">92211459133895146158316008050625159602789832393085884570037939094818571988249290759248366005098334922507923902443804233324386547155962452204674766600765935956870916648760769384276856753284267120760668354671997896119514989451662121408491558308921051289732075282614190244970934960030795710538169872218350493341</span><br><span class="hljs-comment"># 求E</span><br>M = Matrix([[<span class="hljs-number">1</span>, h], [<span class="hljs-number">0</span>, p]])<br>fg = M.LLL()[<span class="hljs-number">0</span>]<br>f, g = <span class="hljs-built_in">abs</span>(fg[<span class="hljs-number">0</span>]), <span class="hljs-built_in">abs</span>(fg[<span class="hljs-number">1</span>])<br>a = f * c % p<br>E = a * gmpy2.invert(f, g)%g<br><span class="hljs-built_in">print</span>(E.bit_length())<br><span class="hljs-comment"># 求P</span><br>t=<span class="hljs-number">10</span><br>B=Matrix(ZZ,t+<span class="hljs-number">1</span>,t+<span class="hljs-number">1</span>)<br>M=gmpy2.iroot(<span class="hljs-built_in">int</span>(N[t-<span class="hljs-number">1</span>]),<span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>))[<span class="hljs-number">0</span>]<br>B[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]=M<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,t+<span class="hljs-number">1</span>):<br>    B[i,i]=-N[i-<span class="hljs-number">1</span>]<br>    B[<span class="hljs-number">0</span>,i]=e[i-<span class="hljs-number">1</span>]<br>Blll=B.LLL()<br>P=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">abs</span>(Blll[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]//M))<br><br>phi=P-<span class="hljs-number">1</span><br>D=gmpy2.invert(E,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes((<span class="hljs-built_in">pow</span>(ct,D,P))))<br><span class="hljs-comment"># DUTCTF&#123;RsA_1s_rS@_aNd_1att1ce&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="misc">misc</h2><h3 id="签到">*签到</h3><p>b 站 21 级 pwn 例会评论区</p><h3 id="我在哪">我在哪</h3><p>放大图片看到十八中，搜索临江十八中，发现是重庆十八中，地图上搜一下附近地铁站，挨着桥的就是，曾家岩。</p><h3 id="不要更新">不要更新</h3><p>流量分析题，wireshark 里过滤一下 http，找到 github 网页 <imgsrc="/img/web.png" /> 根据 hint 查看历史提交记录，发现假flag，对于密码手来说一眼凯撒，移位 13。 <img src="/img/kaisa.png" /></p><h2 id="web">web</h2><h3 id="trenja">*Trenja</h3><p>F12 打开开发者工具，搜索 flag 字段即可。</p><h2 id="pwn">pwn</h2><h3 id="中间人">*中间人</h3><p>太好玩了，原理是汽车滚动码。bob 来开车门，截断，开门失败。bob再开车门，截断，发送第一次截断信号，bob 开门成功。bob离开，我们发送第二次截断的信号，打开车门！</p><h2 id="reverse">reverse</h2><h3 id="贪吃蛇">*贪吃蛇</h3><p>拖入 IDA，alt+t 搜索 DUT 即可</p><h3 id="game">*GAME</h3><p>下棋赢了就出了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dutctf2023wp&quot;&gt;DUTCTF2023wp&lt;/h1&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;仔细一想自己学 CTF 也一年了，纪念一下最后一次参加校赛
🥹，明年可就是出题人了
🤓。但是感觉一年以来荒废了很多时间，在很多方面对题目不熟悉</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Coppersmith相关攻击</title>
    <link href="https://sch01ar.github.io/2023/03/07/Coppersmith%E6%94%BB%E5%87%BB/"/>
    <id>https://sch01ar.github.io/2023/03/07/Coppersmith%E6%94%BB%E5%87%BB/</id>
    <published>2023-03-07T02:05:45.000Z</published>
    <updated>2023-06-30T02:10:55.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理">原理</h1><p>Coppersmith 定理是在一个 e 阶模 n 的多项式<spanclass="math inline">\(f(x)\)</span>中，若有根小于<spanclass="math inline">\(n^{\frac{1}{e}}\)</span>，则可以用 O(logn)的算法求出根。</p><p>直接求解<spanclass="math inline">\(f(x)\)</span>的根可能比较困难，在此利用<code>LLL</code>算法求得多项式<spanclass="math inline">\(g(x)\)</span>，求得的多项式与<spanclass="math inline">\(f(x)\)</span>具有相同的根<spanclass="math inline">\(x_0\)</span>，<spanclass="math inline">\(g(x)\)</span>具有更小的系数，且定义域为整数域。</p><p>本质思想就是把有限域上的方程转化到整数域。</p><h1 id="理论基础">理论基础</h1><p><span class="math display">\[f(x,y) = \sum_{i=0}^{d}\sum_{j=0}^{e}a_{i,j}x^iy^j\]</span></p><h2 id="howgrave-graham">Howgrave-Graham</h2><p><img src="/img/Howgrave.png" /> 需要构造一个系数更小的多项式，<spanclass="math inline">\(||g(x)||\)</span>代表范数，即最大的系数。构造方法如下<img src="/img/构造方法.png" /></p><h2 id="lll-算法">LLL 算法</h2><p>格基约化算法，通过对构造出的格，从而约化产生符合约束的多项式。 <imgsrc="/img/LLL.png" /></p><h2 id="p-高位攻击">p 高位攻击</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>m=bytes_to_long(flag)<br>n = <span class="hljs-number">25348605574630284342864323710011622959543974652863854537355760576386763162531478272446867731299572532294812374775121121761898206639041068156270466457595336452690367719842145233764550634280981441631262047763246059814963741143303914063537003244814908763379320576260885158458898112416692583017869283284022878603506583499699525249773663841642694427307104140944360804367072787670581252816486834658346431010523135392357008103555699542414687172408709153334263858639251735462278292703380745537045458408951791720967957274781161667526873251066303708008043058246747534357368350540174588670636827470901518225473676343782182718627</span><br>e = <span class="hljs-number">65537</span><br><br>high_p = p&gt;&gt;<span class="hljs-number">462</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(high_p)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment">#c = 2838585968727601235811102000208810377763570403442263788723014651093563843294336508586280687833863346617299165812054489406097873361940320732653656106836742334351707641172590772691775696065643337783752853707871271348294775407491819788305857447836923575366699374649494685209530440846553788854498950165868767060103944397665695513568787251626526985821169261973233666633938348865538364532419767347878581021598781082997830762785442482278387265054844200419966175619215512361010529309496176507520460375493466772893213031156341155066854128910227539653777680017545678773463877481232404008355330164324877400343396249494527269803</span><br><span class="hljs-comment">#high_p = 14719840533805965441436310401180369285271789871612468412671201109363519708733266615333097147637913934699335461421648585440665652199846830713164628016025539243988107497052</span><br><br></code></pre></td></tr></table></figure><h3 id="exp">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">13139369168613206469808493070119137888363636548621629780897948879328793540933675072448361493321304924953815474270401406259487525517560528123707016104942485164559271692275987380567766009184969340122208041180122234792566147648471202470677782205185423853314467362074540818483729953544353584322270414479260852672948012862257167187569701381652931473637503302338392147780573148724508117699531886205586281824118899931516823621049590863613262210219765105389989391065557707559113268724368695051264276619633555407916385088611885715568165460641318205321508100969473959719364829756492542217470309748646183210141490634293731384313</span><br>p4=<span class="hljs-number">0xce2f93251a3a97404a11c1fe88cf15c7aaf26ffd508ff006933bff2e9ea0c6197a98f1188f03b74b16d564e958a84c877fc0e21faf00f0ae42f26bde226ebf7c9732f17d860b81d139799832d510b91001967fc33ff2d9fbd4c4767fa2438e48</span><br>e = <span class="hljs-number">0x10001</span><br>pbits = <span class="hljs-number">1024</span><br>kbits = pbits - p4.nbits()<br><span class="hljs-built_in">print</span>(p4.nbits())<br>p4 = p4 &lt;&lt; kbits<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x + p4<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)<br><span class="hljs-keyword">if</span> roots:<br>    p = p4+<span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;n: &quot;</span>, n)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;p: &quot;</span>, p)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;q: &quot;</span>, n/p)<br></code></pre></td></tr></table></figure><h2 id="p-高位部分泄露">p 高位部分泄露</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">25348605574630284342864323710011622959543974652863854537355760576386763162531478272446867731299572532294812374775121121761898206639041068156270466457595336452690367719842145233764550634280981441631262047763246059814963741143303914063537003244814908763379320576260885158458898112416692583017869283284022878603506583499699525249773663841642694427307104140944360804367072787670581252816486834658346431010523135392357008103555699542414687172408709153334263858639251735462278292703380745537045458408951791720967957274781161667526873251066303708008043058246747534357368350540174588670636827470901518225473676343782182718627</span><br>p4 =<span class="hljs-number">0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000</span><br>e = <span class="hljs-number">0x10001</span><br>pbits = <span class="hljs-number">1024</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4096</span>):<br>    p4=<span class="hljs-number">0x3e67e7cacd2584224fb2026b40afbcc4281bd59f72f7801239d95c61c48ded7649924f794592fce806e032f16c2f4a90466905fc30037317074a6424d8bf078e959a1ed2d8e5c000</span><br>    p4=p4+<span class="hljs-built_in">int</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-number">16</span>)<br>    kbits = pbits - p4.nbits()<br>    p4 = p4 &lt;&lt; kbits<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    f = x + p4<br>    f = f.monic()<br>    roots = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> roots:<br>        p = p4+<span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;n: &quot;</span>, n)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p: &quot;</span>, p)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;q: &quot;</span>, n//p)<br>        <span class="hljs-keyword">break</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n)))<br></code></pre></td></tr></table></figure><h2 id="q-低位和-p-高位">q 低位和 p 高位</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>p_high = <span class="hljs-number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span><br>q_low = <span class="hljs-number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span><br>n = <span class="hljs-number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span><br>enc = <span class="hljs-number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span><br>e = <span class="hljs-number">65537</span><br>mod = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">265</span>)<br>p0 = n * inverse_mod(q_low,mod) % mod<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">5</span>):<br>    f = p_high * (<span class="hljs-number">2</span>^<span class="hljs-number">724</span>) + p0 + (x * <span class="hljs-number">32</span> + i) * mod<br>    f = f.monic()<br>    out_p = f.small_roots(<span class="hljs-number">2</span>^<span class="hljs-number">454</span>,<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(out_p) != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(out_p[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">break</span><br>p = out_p[<span class="hljs-number">0</span>] * <span class="hljs-number">32</span> + i * mod + p_high * (<span class="hljs-number">2</span>^<span class="hljs-number">724</span>) + p0<br><span class="hljs-comment"># print(p)</span><br>p = <span class="hljs-number">133637329398256221348922087205912367118213472434713498908220867690672019569057789598459580146410501473689139466275052698529257254973211963162087316149628000798221014338373126500646873612341158676084318494058522014519669302359038980726479317742766438142835169562422371156257894374341629012755597863752154328407</span><br><span class="hljs-keyword">assert</span> n % p == <span class="hljs-number">0</span><br>q = n // p<br>fai_n = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = inverse_mod(e,fai_n)<br>m = <span class="hljs-built_in">pow</span>(enc,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.decode(long_to_bytes(m)))<br></code></pre></td></tr></table></figure><h2 id="dp-高位攻击">dp 高位攻击</h2><p>给定<spanclass="math inline">\(e,n,c,dp_0,k,\;dp_0=dp&gt;&gt;k\)</span></p><p><span class="math display">\[edp\equiv ed\equiv 1\;mod\;(p-1)\\edp=k(p-1)+1\\edp+k-1=kp\\edp+k-1 \equiv 0\; mod\; p\\\because dp&lt; p-1\\\because edp=k(p-1)+1\\\therefore e&gt;k\\\therefore e(dp_0 &lt;&lt; k+x)+k-1 \equiv 0\;mod\;p\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>p = getStrongPrime(<span class="hljs-number">512</span>)<br>q = getStrongPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>e = <span class="hljs-number">7621</span><br>d = gmpy2.invert(e, phi)<br><br>flag = <span class="hljs-string">b&quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><br>dp = d % (p - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(dp &gt;&gt; <span class="hljs-number">200</span>)<br><span class="hljs-built_in">print</span>(c, e, n)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">c = 46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616</span><br><span class="hljs-string">e = 7621</span><br><span class="hljs-string">n = 140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="exp-1">EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863</span><br>e = <span class="hljs-number">7621</span><br>c = <span class="hljs-number">46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616</span><br>s = <span class="hljs-number">1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coppersmith</span>(<span class="hljs-params">bits, k</span>):<br>    F.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    invE = inverse_mod(e, n)<br>    f = (s &lt;&lt; bits) + x + (k - <span class="hljs-number">1</span>) * invE<br>    x0 = f.small_roots(X=<span class="hljs-number">2</span> ** bits, beta=<span class="hljs-number">0.44</span>, epsilon=<span class="hljs-number">1</span>/<span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">return</span> x0<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e):<br>    bits = <span class="hljs-number">200</span><br>    x0 = coppersmith(bits,k)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x0) != <span class="hljs-number">0</span>:<br>        x = Integer(x0[<span class="hljs-number">0</span>])<br>        dp = x + (s &lt;&lt; bits)<br>        p = (e*dp - <span class="hljs-number">1</span>) // k+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> p != -<span class="hljs-number">1</span>:<br>            q = n // p<br>            <span class="hljs-keyword">assert</span> n == p * q<br>            phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>            d = inverse_mod(e,phi)<br>            m=<span class="hljs-built_in">pow</span>(c,d,n)<br><br></code></pre></td></tr></table></figure><h2 id="多元-coppersmith">多元 coppersmith</h2><p><ahref="https://lordriot.live/2021/01/06/Way-to-CopperSmith/">原理学习</a><ahref="https://www.researchgate.net/publication221010552_New_attacks_on_RSA_with_small_secret_CRT-exponents">论文学习1</a>、 <a href="https://eprint.iacr.org/2010/146.pdf">论文学习 2</a> <ahref="https://phot0n.com/2022/04/30/MRCTF2022/">脚本来源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br><br>    R = f.base_ring()<br>    N = R.cardinality() <span class="hljs-comment">#取得模数</span><br><br><br><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>) <span class="hljs-comment">#最高次项系数化为0，coefficients是多项式的降次幂排列系数</span><br>    f = f.change_ring(ZZ)<br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i <span class="hljs-comment">#收集基多项式</span><br><br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    <span class="hljs-built_in">print</span>(G)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p>具体参数说明，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">PR.&lt;r,s,t&gt; = PolynomialRing(Zmod(prime))<br>f = r*(s^<span class="hljs-number">2</span>+<span class="hljs-number">2</span>*s)-t<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理&quot;&gt;原理&lt;/h1&gt;
&lt;p&gt;Coppersmith 定理是在一个 e 阶模 n 的多项式&lt;span
class=&quot;math inline&quot;&gt;\(f(x)\)&lt;/span&gt;中，若有根小于&lt;span
class=&quot;math inline&quot;&gt;\(n^{\frac{1}</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>DLP中常用算法</title>
    <link href="https://sch01ar.github.io/2023/02/24/DLP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://sch01ar.github.io/2023/02/24/DLP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-24T10:05:45.000Z</published>
    <updated>2023-03-04T06:03:05.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pohlig-hellman-算法光滑阶">Pohlig-Hellman 算法（光滑阶）</h1><p>给定 a,b,p，p 是素数，求 x，<span class="math inline">\(a^x \equiv b(mod\;p)\)</span> 在模 p 下，设该群的生成元为 g，则有</p><p><span class="math display">\[a \equiv g^{a1} (mod\;p) \newlineb \equiv g^{b1} (mod\;p)\]</span></p><p>联立条件有</p><p><span class="math display">\[g^{a1x} \equiv g^{b1} (mod\;p)\]</span></p><p>由欧拉定理得<spanclass="math inline">\(\phi(p)\;=\;p-1\)</span>，则有<spanclass="math inline">\(a1x\;=b1\;(mod\;(p-1))\)</span></p><p>1.将 p-1 分解，即 <spanclass="math inline">\(p-1=p_1^{k_1}p_2^{k_2}\cdotsp_m^{k_m}\)</span></p><p>2.将 x 表示成<span class="math inline">\(p_i\)</span> 进制, 列出方程<span class="math display">\[x\;=p_i^0a_0 +p_i^1a_1+...+p_i^{k_i-1}a*{k_i-1}\]</span></p><p>3.令 r=1，求<span class="math inline">\((a^x)^{\frac{p-1}{p_i^r}}\;\equiv b^{\frac{p-1}{p_i^r}}(mod\; p)\)</span></p><p>4.将 2 中的公式代入到 3，展开得到 <spanclass="math display">\[a^{a0*\frac{p-1}{p_i}}* a^{(p-1)a1} *a^{(p-1)p_ia_2}...a^{(p-1)p_i^{k_i-2}a_{k_i-1}} \equivb^{\frac{p-1}{p_i}}(mod\;p)\]</span></p><p>5.从第二项开始，后面每项都是 1，欧拉定理:<spanclass="math inline">\(a^{(p-1)} \equiv1(mod\;p)\)</span>，化简得到的式子为 <spanclass="math display">\[\newline a^{a0*\frac{p-1}{p_i}} \equivb^{\frac{p-1}{p_i}}(mod \;p)\newline\]</span> 因为该方程只有 a0未知，所以可在[0,pi-1]范围内爆破出 a0</p><p>6.再令 r = 2,3,4...ki，重复步骤 3，即可求出所有的<spanclass="math inline">\(a_2,a_3....a_{k_i-1}\)</span>，从而得到 m 个关于 x的方程，最后使用 CRT 进行求解即可。</p><p>总结:将 p-1 的 m 个质因子，分别求出其方程内的所有系数 a，从而构造了 m个关于 x 的方程，最终利用 CRT 求解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pohlig-hellman-算法光滑阶&quot;&gt;Pohlig-Hellman 算法（光滑阶）&lt;/h1&gt;
&lt;p&gt;给定 a,b,p，p 是素数，求 x，&lt;span class=&quot;math inline&quot;&gt;\(a^x \equiv b
(mod\;p)\)&lt;/span&gt; 在</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2022DASCTF_NOV-lllcccggg-wp</title>
    <link href="https://sch01ar.github.io/2022/11/30/2022DASCTF_NOV-lllcccgggwp/"/>
    <id>https://sch01ar.github.io/2022/11/30/2022DASCTF_NOV-lllcccgggwp/</id>
    <published>2022-11-30T02:05:45.000Z</published>
    <updated>2022-12-01T09:42:22.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>如题目名字一样，有好多个lcg，<del>当时看晕了</del> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>key=<span class="hljs-string">b&#x27;*************&#x27;</span><br>key=bytes_to_long(key)<br>key=<span class="hljs-built_in">bin</span>(key)[<span class="hljs-number">2</span>:]<br><br>n=getPrime(<span class="hljs-number">256</span>)<br>a=[getPrime(<span class="hljs-number">256</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(key)):<br>    a.append(a[i-<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>)<br>b=getPrime(<span class="hljs-number">256</span>)<br>m=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    m.append((a[i]*b)%n)<br>s=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    s+=m[i]*<span class="hljs-built_in">int</span>(key[i])<br><br><br>seed=s<br>a = getPrime(<span class="hljs-number">300</span>)<br>b = getPrime(<span class="hljs-number">300</span>)<br>n = getPrime(<span class="hljs-number">300</span>)<br>output = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    seed = (a*seed+b)%n<br>    output.append(seed)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output = &quot;</span>,output)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m=&#x27;</span>,m)<br><br><br><br>state=<span class="hljs-built_in">int</span>(key,<span class="hljs-number">2</span>)<br>a=getPrime(<span class="hljs-number">256</span>)<br>b=getPrime(<span class="hljs-number">256</span>)<br>c=getPrime(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>**<span class="hljs-number">10000</span>):<br>    state = (a * state + b) % c<br>flag=<span class="hljs-string">b&#x27;****************************************&#x27;</span><br>state_md5=hashlib.md5(<span class="hljs-built_in">str</span>(state).encode()).hexdigest()<br>xorflag=xor(flag,state_md5).<span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a=&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b=&#x27;</span>,b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;xorflag=&#x27;</span>,xorflag)<br></code></pre></td></tr></table></figure></p><h1 id="题目分析">题目分析</h1><p>1.<code>key</code>是一个背包问题，已知公钥<code>m</code>，和的话目前不知道。</p><p>2.以1中的和为<code>seed</code>，通过LCG产生了一组序列<code>output</code>。</p><p>至此，已经可以根据<code>output</code>来求出LCG中的a、b、n，从而求出<code>seed</code>，从而通过背包可求得key。</p><p>3.以<code>key</code>为seed，称作<code>state</code>，再进行LCG，<code>state = (a * state + b) % c</code>，并且a，b，c已知。</p><p>但是想要直接正向求解出最后的state，十分困难，for循环了10^10000次，这里涉及到了<strong>矩阵快速幂</strong>的使用。</p><p>通过构造矩阵 <span class="math display">\[\mathbf{A} =\begin{bmatrix}state &amp; 1\end{bmatrix}\]</span> <span class="math display">\[\mathbf{C} =\begin{bmatrix}a &amp; 0\\b &amp; 1\\\end{bmatrix}\]</span> 通过计算<spanclass="math inline">\(A*C^{10*10000}\)</span>即可得到矩阵B，B = [ state,1]</p><p>4.求出state后进行异或解密即可。</p><h1 id="exp">EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_unknown_modulus</span>(<span class="hljs-params">states</span>):<br>    diffs = [s1 - s0 <span class="hljs-keyword">for</span> s0, s1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(states, states[<span class="hljs-number">1</span>:])]<br>    zeroes = [t2*t0 - t1*t1 <span class="hljs-keyword">for</span> t0, t1, t2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(diffs, diffs[<span class="hljs-number">1</span>:], diffs[<span class="hljs-number">2</span>:])]<br>    modulus = <span class="hljs-built_in">abs</span>(reduce(gcd, zeroes))<br>    <span class="hljs-keyword">return</span> modulus<br><br>output = [<span class="hljs-number">75581294523880849612962675076574164955427439308298754836702542570856707873339581806556114</span>, <span class="hljs-number">85105032146983524265511965363979041936757881362506442483720291395014453678757599185295866</span>, <span class="hljs-number">1135521205967352800446368309480529634045225881261100886117662161359310082444102071893527191</span>, <span class="hljs-number">668602662320826002160475166323016971968419541611162501120982012317608523771962990634779874</span>, <span class="hljs-number">649673553234341629614052928960182629959348742983379959653724041939165898600067312959677865</span>, <span class="hljs-number">785853955591839090537858092210736716046894245185520583713505441606094906159642640920286905</span>, <span class="hljs-number">937799570303158165818350743257433287791556030352377438071495081189542968310256239806349207</span>, <span class="hljs-number">734514754865608924980327625447363286114899547828404532253101460271494241963897226149955073</span>, <span class="hljs-number">1106313725444442262780946046218124519471559148520571880678416934586056489046936771811070897</span>, <span class="hljs-number">8768152099561586039808874499029856564696410477579827751292882367683300035228537162519939</span>]<br>m= [<span class="hljs-number">72110328606337761986452574632319920368225905906258123752738204764660440229296</span>, <span class="hljs-number">54011682421724526639264309053337133761455956763651742732220904522794415369243</span>, <span class="hljs-number">17814390052498055944887777895371560547916058478438980691186304039062365649137</span>, <span class="hljs-number">35628780104996111889775555790743121095832116956877961382372608078124731298274</span>, <span class="hljs-number">71257560209992223779551111581486242191664233913755922764745216156249462596548</span>, <span class="hljs-number">52306145629033450225461382951669777408332612778647340756234927305972460103747</span>, <span class="hljs-number">14403316467115903117281925692036847841669370508430176739214349605418455118145</span>, <span class="hljs-number">28806632934231806234563851384073695683338741016860353478428699210836910236290</span>, <span class="hljs-number">57613265868463612469127702768147391366677482033720706956857398421673820472580</span>, <span class="hljs-number">25017556945976227604614565324992075758359109018576909140459291836821175855811</span>, <span class="hljs-number">50035113891952455209229130649984151516718218037153818280918583673642351711622</span>, <span class="hljs-number">9861252992953913084817421088665596058440581025443131788581662340758238333895</span>, <span class="hljs-number">19722505985907826169634842177331192116881162050886263577163324681516476667790</span>, <span class="hljs-number">39445011971815652339269684354662384233762324101772527154326649363032953335580</span>, <span class="hljs-number">78890023943631304678539368709324768467524648203545054308653298726065906671160</span>, <span class="hljs-number">67571073096311612023437897207346829960053441358225603844051092445605348252971</span>, <span class="hljs-number">44933171401672226713234954203390952945111027667586702914846679884684231416593</span>, <span class="hljs-number">89866342803344453426469908406781905890222055335173405829693359769368462833186</span>, <span class="hljs-number">89523710815737909519298976602261104805448255621482306886131214532210460577023</span>, <span class="hljs-number">88838446840524821704957112993219502635900656194100108999006924057894456064697</span>, <span class="hljs-number">87467918890098646076273385775136298296805457339335713224758343109262447040045</span>, <span class="hljs-number">84726862989246294818905931338969889618615059629806921676261181211998428990741</span>, <span class="hljs-number">79244751187541592304171022466637072262234264210749338579266857417470392892133</span>, <span class="hljs-number">68280527584132187274701204721971437549472673372634172385278209828414320694917</span>, <span class="hljs-number">46352080377313377215761569232640168123949491696403839997300914650302176300485</span>, <span class="hljs-number">2495185963675757097882298253977629272903128343943175221346324294077887511621</span>, <span class="hljs-number">4990371927351514195764596507955258545806256687886350442692648588155775023242</span>, <span class="hljs-number">9980743854703028391529193015910517091612513375772700885385297176311550046484</span>, <span class="hljs-number">19961487709406056783058386031821034183225026751545401770770594352623100092968</span>, <span class="hljs-number">39922975418812113566116772063642068366450053503090803541541188705246200185936</span>, <span class="hljs-number">79845950837624227132233544127284136732900107006181607083082377410492400371872</span>, <span class="hljs-number">69482926884297456930826248043265566490804358963498709392909249814458335654395</span>, <span class="hljs-number">48756878977643916528011655875228426006612862878132914012562994622390206219441</span>, <span class="hljs-number">7304783164336835722382471539154145038229870707401323251870484238253947349533</span>, <span class="hljs-number">14609566328673671444764943078308290076459741414802646503740968476507894699066</span>, <span class="hljs-number">29219132657347342889529886156616580152919482829605293007481936953015789398132</span>, <span class="hljs-number">58438265314694685779059772313233160305838965659210586014963873906031578796264</span>, <span class="hljs-number">26667555838438374224478704415163613636682076269556667256672242805536692503179</span>, <span class="hljs-number">53335111676876748448957408830327227273364152539113334513344485611073385006358</span>, <span class="hljs-number">16461248562802499564273977449351747571732450029362164253433466215620304923367</span>, <span class="hljs-number">32922497125604999128547954898703495143464900058724328506866932431240609846734</span>, <span class="hljs-number">65844994251209998257095909797406990286929800117448657013733864862481219693468</span>, <span class="hljs-number">41481013711468999180550979383511273598863745186032809254212224718435974297587</span>, <span class="hljs-number">82962027422937998361101958767022547197727490372065618508424449436871948595174</span>, <span class="hljs-number">75715080054924999388563077322742387420459125695266732243593393867217432100999</span>, <span class="hljs-number">61221185318899001443485314434182067865922396341668959713931282727908399112649</span>, <span class="hljs-number">32233395846847005553329788657061428756848937634473414654607060449290333135949</span>, <span class="hljs-number">64466791693694011106659577314122857513697875268946829309214120898580666271898</span>, <span class="hljs-number">38724608596437024879678314416943008052399895489029153845172736790634867454447</span>, <span class="hljs-number">77449217192874049759356628833886016104799790978058307690345473581269734908894</span>, <span class="hljs-number">64689459594797102185072417456469325234603726907252110607435442156013004728439</span>, <span class="hljs-number">39169944398643207036503994701635943494211598765639716441615379305499544367529</span>, <span class="hljs-number">78339888797286414073007989403271886988423197531279432883230758610999088735058</span>, <span class="hljs-number">66470802803621830812375138595241067001850540013694360993206012215471712380767</span>, <span class="hljs-number">42732630816292664291109436979179427028705224978524217213156519424416959672185</span>, <span class="hljs-number">85465261632585328582218873958358854057410449957048434426313038848833919344370</span>, <span class="hljs-number">80721548474219659830796907705415001139825044865232364079370572691141373599391</span>, <span class="hljs-number">71234122157488322327952975199527295304654234681600223385485640375756282109433</span>, <span class="hljs-number">52259269524025647322265110187751883634312614314335941997715775744986099129517</span>, <span class="hljs-number">14309564257100297310889380164201060293629373579807379222176046483445733169685</span>, <span class="hljs-number">28619128514200594621778760328402120587258747159614758444352092966891466339370</span>, <span class="hljs-number">57238257028401189243557520656804241174517494319229516888704185933782932678740</span>, <span class="hljs-number">24267539265851381153474201102305775374039133589594529004152866861039400268131</span>, <span class="hljs-number">48535078531702762306948402204611550748078267179189058008305733722078800536262</span>, <span class="hljs-number">6861182272454527280255964197920394521160679309513611243355962437631135983175</span>, <span class="hljs-number">13722364544909054560511928395840789042321358619027222486711924875262271966350</span>, <span class="hljs-number">27444729089818109121023856791681578084642717238054444973423849750524543932700</span>, <span class="hljs-number">54889458179636218242047713583363156169285434476108889946847699501049087865400</span>, <span class="hljs-number">19569941568321439150454586955423605363575013903353275120439893995571710641451</span>, <span class="hljs-number">39139883136642878300909173910847210727150027806706550240879787991143421282902</span>, <span class="hljs-number">78279766273285756601818347821694421454300055613413100481759575982286842565804</span>, <span class="hljs-number">66350557755620515869995855432086135933604256177961696190263646958047220042259</span>, <span class="hljs-number">42492140720290034406350870652869564892212657307058887607271788909567974995169</span>, <span class="hljs-number">84984281440580068812701741305739129784425314614117775214543577819135949990338</span>, <span class="hljs-number">79759588090209140291762642400175552593854774179371045655831650631745434891327</span>, <span class="hljs-number">69310201389467283249884444589048398212713693309877586538407796256964404693305</span>, <span class="hljs-number">48411427987983569166128048966794089450431531570890668303560087507402344297261</span>, <span class="hljs-number">6613881185016140998615257722285471925867208092916831833864670008278223505173</span>, <span class="hljs-number">13227762370032281997230515444570943851734416185833663667729340016556447010346</span>, <span class="hljs-number">26455524740064563994461030889141887703468832371667327335458680033112894020692</span>, <span class="hljs-number">52911049480129127988922061778283775406937664743334654670917360066225788041384</span>, <span class="hljs-number">15613124169307258644203283345264843838879474437804804568579215125925110993419</span>, <span class="hljs-number">31226248338614517288406566690529687677758948875609609137158430251850221986838</span>, <span class="hljs-number">62452496677229034576813133381059375355517897751219218274316860503700443973676</span>, <span class="hljs-number">34696018563507071819985426550816043736039940453573931775378216000874422858003</span>, <span class="hljs-number">69392037127014143639970853101632087472079880907147863550756432001748845716006</span>, <span class="hljs-number">48575099463077289946300865991961467969163906765431222328257358996971226342663</span>, <span class="hljs-number">6941224135203582558960891772620228963331958481997939883259212987415987595977</span>, <span class="hljs-number">13882448270407165117921783545240457926663916963995879766518425974831975191954</span>, <span class="hljs-number">27764896540814330235843567090480915853327833927991759533036851949663950383908</span>, <span class="hljs-number">55529793081628660471687134180961831706655667855983519066073703899327900767816</span>, <span class="hljs-number">20850611372306323609733428150620956438315480663102533358891902792129336446283</span>, <span class="hljs-number">41701222744612647219466856301241912876630961326205066717783805584258672892566</span>, <span class="hljs-number">83402445489225294438933712602483825753261922652410133435567611168517345785132</span>, <span class="hljs-number">76595916187499591544226584993664944531527990255955762097879717330508226480915</span>, <span class="hljs-number">62982857584048185754812329776027182088060125463047019422503929654489987872481</span>, <span class="hljs-number">35756740377145374175983819340751657201124395877229534071752354302453510655613</span>, <span class="hljs-number">71513480754290748351967638681503314402248791754459068143504708604907021311226</span>, <span class="hljs-number">52817986717630499370294437151703921829501728460053631513753912203287577533103</span>, <span class="hljs-number">15426998644310001406948034092105136684007601871242758254252319400048689976857</span>, <span class="hljs-number">30853997288620002813896068184210273368015203742485516508504638800097379953714</span>, <span class="hljs-number">61707994577240005627792136368420546736030407484971033017009277600194759907428</span>, <span class="hljs-number">33207014363529013921943432525538386497064959921077561260763050193863054725507</span>, <span class="hljs-number">66414028727058027843886865051076772994129919842155122521526100387726109451014</span>, <span class="hljs-number">42619082663165058354132889890850839013263984635445740269796695768925753812679</span>, <span class="hljs-number">85238165326330116708265779781701678026527969270891480539593391537851507625358</span>, <span class="hljs-number">80267355861709236082890719352100649078060083492918456305931278069176550161367</span>, <span class="hljs-number">70325736932467474832140598492898591181124311936972407838607051131826635233385</span>, <span class="hljs-number">50442499073983952330640356774494475387252768825080310903958597257126805377421</span>, <span class="hljs-number">10676023357016907327639873337686243799509682601296117034661689507727145665493</span>, <span class="hljs-number">21352046714033814655279746675372487599019365202592234069323379015454291330986</span>, <span class="hljs-number">42704093428067629310559493350744975198038730405184468138646758030908582661972</span>, <span class="hljs-number">85408186856135258621118986701489950396077460810368936277293516061817165323944</span>, <span class="hljs-number">80607398921319519908597133191677193817159066571873367781331527117107865558539</span>, <span class="hljs-number">71005823051688042483553426172051680659322278094882230789407549227689266027729</span>, <span class="hljs-number">51802671312425087633466012132800654343648701140899956805559593448852066966109</span>, <span class="hljs-number">13396367833899177933291184054298601712301547232935408837863681891177668842869</span>, <span class="hljs-number">26792735667798355866582368108597203424603094465870817675727363782355337685738</span>, <span class="hljs-number">53585471335596711733164736217194406849206188931741635351454727564710675371476</span>, <span class="hljs-number">16961967880242426132688632223086106723416522814618765929653950122894885653603</span>, <span class="hljs-number">33923935760484852265377264446172213446833045629237531859307900245789771307206</span>, <span class="hljs-number">67847871520969704530754528892344426893666091258475063718615800491579542614412</span>, <span class="hljs-number">45486768250988411727868217573386146812336327468085622663976095976632620139475</span>, <span class="hljs-number">764561711025826122095594935469586649676799887306740554696686946738775189601</span>, <span class="hljs-number">1529123422051652244191189870939173299353599774613481109393373893477550379202</span>, <span class="hljs-number">3058246844103304488382379741878346598707199549226962218786747786955100758404</span>, <span class="hljs-number">6116493688206608976764759483756693197414399098453924437573495573910201516808</span>, <span class="hljs-number">12232987376413217953529518967513386394828798196907848875146991147820403033616</span>, <span class="hljs-number">24465974752826435907059037935026772789657596393815697750293982295640806067232</span>, <span class="hljs-number">48931949505652871814118075870053545579315192787631395500587964591281612134464</span>, <span class="hljs-number">7654924220354746294595311528804384183634530526398286227920424176036759179579</span>, <span class="hljs-number">15309848440709492589190623057608768367269061052796572455840848352073518359158</span>, <span class="hljs-number">30619696881418985178381246115217536734538122105593144911681696704147036718316</span>, <span class="hljs-number">61239393762837970356762492230435073469076244211186289823363393408294073436632</span>, <span class="hljs-number">32269812734724943379884144249567439963156633373508074873471281810061681783915</span>, <span class="hljs-number">64539625469449886759768288499134879926313266747016149746942563620123363567830</span>, <span class="hljs-number">38870276147948776185895736786967052877630678445167794720629622233720262046311</span>, <span class="hljs-number">77740552295897552371791473573934105755261356890335589441259244467440524092622</span>, <span class="hljs-number">65272129800844107409942106936565504535526858731806674109262983928354583095895</span>, <span class="hljs-number">40335284810737217486243373661828302096057862414748843445270462850182701102441</span>, <span class="hljs-number">80670569621474434972486747323656604192115724829497686890540925700365402204882</span>, <span class="hljs-number">71132164451997872611332654436010501409235594610130869007826346394204339320415</span>, <span class="hljs-number">52055354113044747889024468660718295843475334171397233242397187781882213551481</span>, <span class="hljs-number">13901733435138498444408097110133884711954813293929961711538870557237962013613</span>, <span class="hljs-number">27803466870276996888816194220267769423909626587859923423077741114475924027226</span>, <span class="hljs-number">55606933740553993777632388440535538847819253175719846846155482228951848054452</span>, <span class="hljs-number">21004892690156990221623936669768370720642651302575188919055459451377231019555</span>, <span class="hljs-number">42009785380313980443247873339536741441285302605150377838110918902754462039110</span>, <span class="hljs-number">84019570760627960886495746679073482882570605210300755676221837805508924078220</span>, <span class="hljs-number">77830166730304924439350653146844258790145355371737006579188170604491383067091</span>, <span class="hljs-number">65451358669658851545060466082385810605294855694609508385120836202456301044833</span>]<br>a2= <span class="hljs-number">102146678855348749881681741830301892566150942749854546938156269348575567682569</span><br>b2= <span class="hljs-number">57926598868103510549704115342815226386495366694945712679089221082045615713293</span><br>c= <span class="hljs-number">79112540456632613121737537841885533313599936328220061653608162113976717833173</span><br>xor = <span class="hljs-number">0x2079677330734e7d07116d73543d03316c6501555c02403b7201080612101049</span><br>n = crack_unknown_modulus(output)<br>a=(output[<span class="hljs-number">2</span>]-output[<span class="hljs-number">1</span>])*inverse((output[<span class="hljs-number">1</span>]-output[<span class="hljs-number">0</span>]),n)%n<br>b=(output[<span class="hljs-number">1</span>]-a*output[<span class="hljs-number">0</span>])%n<br>seed = (inverse(a,n)*(output[<span class="hljs-number">0</span>]-b))%n<br><br><br><span class="hljs-comment"># sage</span><br><span class="hljs-comment"># sum = seed</span><br><span class="hljs-comment"># nbits=len(m)</span><br><span class="hljs-comment"># A=Matrix(ZZ,nbits+1,nbits+1)</span><br><span class="hljs-comment"># for i in range(nbits):</span><br><span class="hljs-comment">#     A[i,i]=2</span><br><span class="hljs-comment">#     A[i,-1]=m[i]</span><br><span class="hljs-comment"># for i in range(nbits+1):</span><br><span class="hljs-comment">#     A[-1,i]=1</span><br><span class="hljs-comment"># A[-1,-1]=sum</span><br><span class="hljs-comment"># A[:,-1]=2**100</span><br><span class="hljs-comment"># r=A.LLL()</span><br><span class="hljs-comment"># for i in r:</span><br><span class="hljs-comment">#     if len(set(i[:-1])) == 2:</span><br><span class="hljs-comment">#         print(i)</span><br><br>key=[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>key0=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    <span class="hljs-keyword">if</span> key[i]==-<span class="hljs-number">1</span>:<br>        key0.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> key[i]==<span class="hljs-number">1</span>:<br>        key0.append(<span class="hljs-number">0</span>)<br>state = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key0]), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 矩阵快速幂</span><br><span class="hljs-comment"># a = 102146678855348749881681741830301892566150942749854546938156269348575567682569</span><br><span class="hljs-comment"># b = 57926598868103510549704115342815226386495366694945712679089221082045615713293</span><br><span class="hljs-comment"># c = 79112540456632613121737537841885533313599936328220061653608162113976717833173</span><br><span class="hljs-comment"># state = 1459518099080641908882248947391577149455413355</span><br><span class="hljs-comment"># A=[state,1]</span><br><span class="hljs-comment"># A = Matrix(Zmod(c),A)</span><br><span class="hljs-comment"># C = Matrix(Zmod(c),[[a, 0], [b, 1]])</span><br><span class="hljs-comment"># state=A*C^(10**10000)</span><br><span class="hljs-comment"># print(state)</span><br><br><br>state=<span class="hljs-number">5413978693489756582509930284917854732906886271552898511650182850401353715151</span><br>state_md5=hashlib.md5(<span class="hljs-built_in">str</span>(state).encode()).hexdigest()<br>state_md5=bytes_to_long(state_md5.encode())<br>flag=long_to_bytes(state_md5^xor)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># b&#x27;DASCTF&#123;D0u_Ge_1S_R4al1y_G00d!!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;题目描述&lt;/h1&gt;
&lt;p&gt;如题目名字一样，有好多个lcg，&lt;del&gt;当时看晕了&lt;/del&gt; &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>背包加密算法</title>
    <link href="https://sch01ar.github.io/2022/11/29/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95/"/>
    <id>https://sch01ar.github.io/2022/11/29/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95/</id>
    <published>2022-11-28T16:00:00.000Z</published>
    <updated>2022-12-01T09:50:05.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在一次CTF比赛中遇到了，写了10个for嵌套硬爆出来了，复现的时候发现是背包加密。</p><p><img src="/img/bag.png" /></p><h2 id="merklehellman-公钥加密算法">Merkle–Hellman 公钥加密算法</h2><p>整体加密流程 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br>x = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]<span class="hljs-comment">#明文对应的2进制数</span><br>a = [<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">16</span>,<span class="hljs-number">50</span>,<span class="hljs-number">120</span>]<span class="hljs-comment"># 产生一个超递增序列，称作私钥</span><br><span class="hljs-comment">#对私钥a进行加密，产生公钥b。</span><br>m = <span class="hljs-number">251</span><span class="hljs-comment">#选取一个模数</span><br>w = <span class="hljs-number">300</span><span class="hljs-comment">#选取一个乘数</span><br>b = [w * x % m <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a]<span class="hljs-comment">#产生公钥</span><br>S = numpy.dot(x,b)<span class="hljs-comment">#加密结果</span><br></code></pre></td></tr></table></figure>可以发现，加密十分容易，但解密十分困难，这也是非对称加密的特点。 ###加密</p><h4 id="生成私钥">生成私钥</h4><p>超递增序列，也就是a中每一位元素需要大于其之前所有元素的和。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a =[randint(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits - <span class="hljs-number">1</span>):<br>    a.append(randint(<span class="hljs-number">2</span> * a[-<span class="hljs-number">1</span>], <span class="hljs-number">3</span> * a[-<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure></p><h4 id="生成公钥">生成公钥</h4><p>模数m要求：<code>m &gt; sum(a)</code>乘数w要求：<code>gcd(w,m) == 1</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    m = randint(<span class="hljs-number">2</span> * a[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * a[-<span class="hljs-number">1</span>])<br>    w = randint(<span class="hljs-number">2</span> * a[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * a[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> gcd(w, m) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br>b = [w * x % m <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a]<br></code></pre></td></tr></table></figure> b和m作为公钥。加密：<code>S = numpy.dot(x,b)</code></p><h3 id="解密">解密</h3><p>拿到公钥<spanclass="math inline">\(M=(m_1,m_2,\ldots,m_n)\)</span>，构造如下矩阵<span class="math display">\[\begin{bmatrix}2 &amp; 0 &amp; \ldots &amp; 0 &amp; m_1 \\0 &amp; 2 &amp; \ldots &amp; 0 &amp; m_2 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \\0 &amp; 0 &amp; \ldots &amp; 2 &amp; m_n \\1 &amp; 1 &amp; \ldots &amp; 1 &amp; S \\\end{bmatrix}\]</span>这个矩阵的所有行向量的线性组合构成了一个格，接下来将通过明文的特点和格上的特殊解法来进行解密。</p><h4 id="lll">LLL</h4><p>对于明文<spanclass="math inline">\(X=(x_1,x_2,\ldots,x_n)\)</span>这一组数来说，构造一个向量<span class="math display">\[a=\sum_{i=1}^nx_iv_i-v_{n+1}=(2x_1-1,2x_2-1,\ldots,2x_n-1,0)\]</span>显然，a向量在格L上。因为X中的所有x只能取值0或1，因此a向量的长度很小，约为<spanclass="math inline">\(\sqrt{n}\)</span>，对于很大的格基来说，a向量无疑是格L上的最小向量，因此我们利用LLL算法即可求出a向量。</p><h4 id="例题">例题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span>=<span class="hljs-number">492226042629702</span><br>nbits=<span class="hljs-number">32</span><br>M=[<span class="hljs-number">19620578458228</span>, <span class="hljs-number">39616682530092</span>, <span class="hljs-number">3004204909088</span>, <span class="hljs-number">6231457508054</span>, <span class="hljs-number">3702963666023</span>, <span class="hljs-number">48859283851499</span>, <span class="hljs-number">4385984544187</span>, <span class="hljs-number">11027662187202</span>, <span class="hljs-number">18637179189873</span>, <span class="hljs-number">29985033726663</span>, <span class="hljs-number">20689315151593</span>, <span class="hljs-number">20060155940897</span>, <span class="hljs-number">46908062454518</span>, <span class="hljs-number">8848251127828</span>, <span class="hljs-number">28637097081675</span>, <span class="hljs-number">35930247189963</span>, <span class="hljs-number">20695167327567</span>, <span class="hljs-number">36659598017280</span>, <span class="hljs-number">10923228050453</span>, <span class="hljs-number">29810039803392</span>, <span class="hljs-number">4443991557077</span>, <span class="hljs-number">31801732862419</span>, <span class="hljs-number">23368424737916</span>, <span class="hljs-number">15178683835989</span>, <span class="hljs-number">34641771567914</span>, <span class="hljs-number">44824471397533</span>, <span class="hljs-number">31243260877608</span>, <span class="hljs-number">27158599500744</span>, <span class="hljs-number">2219939459559</span>, <span class="hljs-number">20255089091807</span>, <span class="hljs-number">24667494760808</span>, <span class="hljs-number">46915118179747</span>]<br>A=Matrix(ZZ,nbits+<span class="hljs-number">1</span>,nbits+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i,i]=<span class="hljs-number">2</span><br>    A[i,-<span class="hljs-number">1</span>]=M[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits+<span class="hljs-number">1</span>):<br>    A[-<span class="hljs-number">1</span>,i]=<span class="hljs-number">1</span><br>A[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]=<span class="hljs-built_in">sum</span><br>r=A.LLL()<br><span class="hljs-built_in">print</span>(r[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#(-1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 0)</span><br></code></pre></td></tr></table></figure><p>这里注意一下，第一行向量中是有+1与-1，需要进行取反，即-1代表1，1代表0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在一次CTF比赛中遇到了，写了10个for嵌套硬爆出来了，复现的时候发现是背包加密。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/bag.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;merklehellman-公钥加密算法&quot;&gt;Merkle</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="非对称加密" scheme="https://sch01ar.github.io/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon 2022-㊙️BabySSS</title>
    <link href="https://sch01ar.github.io/2022/11/28/hitcon2022-BabySSS/"/>
    <id>https://sch01ar.github.io/2022/11/28/hitcon2022-BabySSS/</id>
    <published>2022-11-27T16:00:00.000Z</published>
    <updated>2022-12-01T09:37:56.735Z</updated>
    
    <content type="html"><![CDATA[<p>I implemented a toy Shamir's Secret Sharing for fun. Can you help mecheck is there any issues with this?</p><h1 id="shamirs-secret-sharing密钥分享算法">Shamir's SecretSharing密钥分享算法</h1><p><span class="math display">\[f(x)=a_0 + a_1x + a_2x^2 + …… + a_{k-1}x^{k-1} mod p\]</span></p><h1 id="题目源码">题目源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> SystemRandom<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>rand = SystemRandom()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">polyeval</span>(<span class="hljs-params">poly, x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([a * x**i <span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(poly)])<br><br><br>DEGREE = <span class="hljs-number">128</span><br>SHARES_FOR_YOU = <span class="hljs-number">8</span>  <span class="hljs-comment"># I am really stingy :)</span><br><br>poly = [rand.getrandbits(<span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(DEGREE + <span class="hljs-number">1</span>)]<br>shares = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SHARES_FOR_YOU):<br>    x = rand.getrandbits(<span class="hljs-number">16</span>)<br>    y = polyeval(poly, x)<br>    shares.append((x, y))<br><span class="hljs-built_in">print</span>(shares)<br><br>secret = polyeval(poly, <span class="hljs-number">0x48763</span>)<br>key = sha256(<span class="hljs-built_in">str</span>(secret).encode()).digest()[:<span class="hljs-number">16</span>]<br>cipher = AES.new(key, AES.MODE_CTR)<br><span class="hljs-built_in">print</span>(cipher.encrypt(flag))<br><span class="hljs-built_in">print</span>(cipher.nonce)<br><span class="hljs-comment">#[(41458, 3015894889650529600470920314593280408459518223054415623846810748413393737686521849609926975694824777687791824408686652245102687392987299828716863372946074882798754477101786150262288970710451710086966378817944448615584285684364802621112755627795146504720812935041851556318832824799502759754100408717888912062197676588256634343721633045179136302533777168978134770315363985448879229514802330846792965525004570768212871252658334277172395338054448791891165981203069346039654617938169527772805687564575525262812469960675835101499054296722994451502140787064163668418661661374437567033971648550576296023422536253955229), (3389, 188433716494377932944071544153838579057591833387651830021721770473524507947811754295899393634645349682360212761145039355690817927625249659010181081209481357850193656763556243022791637306094953982811471415645267589939465925098159204147714779617946431727015863707468081949286110249296858079354949234074465541940264775783884708819566758872542606519408358277173683256608326688673226933790117016596834640875497643330432185114931410656582728964222203181026468387428893233826461), (20016, 100434774699078525844435127144579870564983915777345068724291926367405061427748836490810414860997895358378538088786283372231649911113841061354335739776409724471256377867811133591349442950556374825868587940833009529662869081130218551306459690738900795035660420986807973542512081415453215211908130387754214098414826747340962722685373241806099462750595976574593799013733614097923338311883793416643213898201680852118540438376386415411317989072583126108177482838299109479175882214603698768498421016054035672774286507312986602290254323930575001551875601243671354491241420409219), (50683, 444545881882748849210617532697661279371689521082184772844723908765173319859389018743414369945234307906596253496624659734919646710483514374218993496994560985318096082923429834553341897367168830049334302307406087637232329348570485341223211629167329394484624055745054495405880099706580380696671879365741197827080224977821589102425678989782880274304484630899425664722718972847034030888019348402685383311095030884356731112886316823960378572796288532824588478234949384868912708000223119984161992105752059185137674711077940232530298853451166664700609238496874366152042676602089571801873748042888046623717879084695143810047335029), (6445, 101461065764578261241074518788237888467081270902741849861528201922043223477790661159690684156056890167304291810116447916457265705130707166062372766839626095333813681671546097679623755546322833727082145873422243641505450049118758544298328784536759107951763715458884889255549767465897671061295486677353893450789955616926292534325337544782386120469581214993770910137353221116457111551538222138388416162630076391624447865248920466274175229034129561913505977209131490066291917549232913771218316393849495621818397), (1359, 301175604076484656987097022479686300460199620068959954988990822483114048418823291831080744590394713639405681060973359346474547015206086229256524657214311815578895906855833813636970640902962286472992468394831014254279137613828904924898823470285520515090889491445149243620044782726415898188702226878029241518020146726699446397961112596830223444821094650508662477147134721631935528182772284099429814417490160457082241680661), (45286, 244867719210730952183489456726726432791149629831242968845409984537752132549250274779516590253042559196452609852176114909791657154092483479876795482861784431886143414585698773882088948703730268947925790809436449512089696895048994874003651088538416399435467483409931121063976149037130454114161175715871108284419975118570732022104749321213013756795645219060997019373915339235627535694458093194617642834806820772479160496966470147893963746139947337914575231526069667124822677688977724313174612816604463495630041075005651663546036363128325535621487658461744362098985183050127661470315454320073092665472364666768205258769), (5649, 4766101906865350375503575239791521167258753430948472304582908507542293595346756303331383584550516424087839316050412570112796817549423179461056531056102741963677007097061600281918678364910813585444151640384802648969082273001142879806475184857246441212406056540028447374033197873299250076862108042582790928405869475508762352345569281589853917902601519294573327847401601789315980414998055948162169170771240383220643819333682845459742335249254576151835966500230706707674854493184181354958093926469960861)]</span><br><span class="hljs-comment">#b&#x27;G$\xf5\x9e\xa9\xb1e\xb5\x86w\xdfz\xbeP\xecJ\xb8wT&lt;&lt;\x84\xc5v\xb4\x02Z\xa4\xed\x8fB\x00[\xc0\x02\xf9\xc0x\x16\xf9\xa4\x02\xb8\xbb&#x27;</span><br><span class="hljs-comment">#b&#x27;\x8f\xa5z\xb4mZ\x97\xe9&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="题目分析">题目分析</h1><p>题目给了8组x，y的值，可通过CRT模x求出a_0 ，通过模x^2 可求出a_1，同理可求出所有系数，恢复出polyeval函数，从而得到正确的secret。</p><h1 id="exp">EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">polyeval</span>(<span class="hljs-params">poly, x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([a * x**i <span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(poly)])<br><br>shares = [(<span class="hljs-number">41458</span>, <span class="hljs-number">3015894889650529600470920314593280408459518223054415623846810748413393737686521849609926975694824777687791824408686652245102687392987299828716863372946074882798754477101786150262288970710451710086966378817944448615584285684364802621112755627795146504720812935041851556318832824799502759754100408717888912062197676588256634343721633045179136302533777168978134770315363985448879229514802330846792965525004570768212871252658334277172395338054448791891165981203069346039654617938169527772805687564575525262812469960675835101499054296722994451502140787064163668418661661374437567033971648550576296023422536253955229</span>), (<span class="hljs-number">3389</span>, <span class="hljs-number">188433716494377932944071544153838579057591833387651830021721770473524507947811754295899393634645349682360212761145039355690817927625249659010181081209481357850193656763556243022791637306094953982811471415645267589939465925098159204147714779617946431727015863707468081949286110249296858079354949234074465541940264775783884708819566758872542606519408358277173683256608326688673226933790117016596834640875497643330432185114931410656582728964222203181026468387428893233826461</span>), (<span class="hljs-number">20016</span>, <span class="hljs-number">100434774699078525844435127144579870564983915777345068724291926367405061427748836490810414860997895358378538088786283372231649911113841061354335739776409724471256377867811133591349442950556374825868587940833009529662869081130218551306459690738900795035660420986807973542512081415453215211908130387754214098414826747340962722685373241806099462750595976574593799013733614097923338311883793416643213898201680852118540438376386415411317989072583126108177482838299109479175882214603698768498421016054035672774286507312986602290254323930575001551875601243671354491241420409219</span>), (<span class="hljs-number">50683</span>, <span class="hljs-number">444545881882748849210617532697661279371689521082184772844723908765173319859389018743414369945234307906596253496624659734919646710483514374218993496994560985318096082923429834553341897367168830049334302307406087637232329348570485341223211629167329394484624055745054495405880099706580380696671879365741197827080224977821589102425678989782880274304484630899425664722718972847034030888019348402685383311095030884356731112886316823960378572796288532824588478234949384868912708000223119984161992105752059185137674711077940232530298853451166664700609238496874366152042676602089571801873748042888046623717879084695143810047335029</span>), (<span class="hljs-number">6445</span>, <span class="hljs-number">101461065764578261241074518788237888467081270902741849861528201922043223477790661159690684156056890167304291810116447916457265705130707166062372766839626095333813681671546097679623755546322833727082145873422243641505450049118758544298328784536759107951763715458884889255549767465897671061295486677353893450789955616926292534325337544782386120469581214993770910137353221116457111551538222138388416162630076391624447865248920466274175229034129561913505977209131490066291917549232913771218316393849495621818397</span>), (<span class="hljs-number">1359</span>, <span class="hljs-number">301175604076484656987097022479686300460199620068959954988990822483114048418823291831080744590394713639405681060973359346474547015206086229256524657214311815578895906855833813636970640902962286472992468394831014254279137613828904924898823470285520515090889491445149243620044782726415898188702226878029241518020146726699446397961112596830223444821094650508662477147134721631935528182772284099429814417490160457082241680661</span>), (<span class="hljs-number">45286</span>, <span class="hljs-number">244867719210730952183489456726726432791149629831242968845409984537752132549250274779516590253042559196452609852176114909791657154092483479876795482861784431886143414585698773882088948703730268947925790809436449512089696895048994874003651088538416399435467483409931121063976149037130454114161175715871108284419975118570732022104749321213013756795645219060997019373915339235627535694458093194617642834806820772479160496966470147893963746139947337914575231526069667124822677688977724313174612816604463495630041075005651663546036363128325535621487658461744362098985183050127661470315454320073092665472364666768205258769</span>), (<span class="hljs-number">5649</span>, <span class="hljs-number">4766101906865350375503575239791521167258753430948472304582908507542293595346756303331383584550516424087839316050412570112796817549423179461056531056102741963677007097061600281918678364910813585444151640384802648969082273001142879806475184857246441212406056540028447374033197873299250076862108042582790928405869475508762352345569281589853917902601519294573327847401601789315980414998055948162169170771240383220643819333682845459742335249254576151835966500230706707674854493184181354958093926469960861</span>)]<br>c = <span class="hljs-string">b&#x27;G$\xf5\x9e\xa9\xb1e\xb5\x86w\xdfz\xbeP\xecJ\xb8wT&lt;&lt;\x84\xc5v\xb4\x02Z\xa4\xed\x8fB\x00[\xc0\x02\xf9\xc0x\x16\xf9\xa4\x02\xb8\xbb&#x27;</span><br>cn = <span class="hljs-string">b&#x27;\x8f\xa5z\xb4mZ\x97\xe9&#x27;</span><br>poly=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">129</span>):<br>    x, y = <span class="hljs-built_in">zip</span>(*shares)<br>    tmp=crt(x,y)[<span class="hljs-number">0</span>]<br>    shares = [(x, (y - tmp) // x) <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> shares]<br>    poly.append(tmp)<br><br>secret = polyeval(poly, <span class="hljs-number">0x48763</span>)<br>key = sha256(<span class="hljs-built_in">str</span>(secret).encode()).digest()[:<span class="hljs-number">16</span>]<br>cipher = AES.new(key, AES.MODE_CTR,nonce=cn)<br><span class="hljs-built_in">print</span>(cipher.decrypt(c))<br><span class="hljs-comment">#hitcon&#123;doing_SSS_in_integers_is_not_good_:(&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I implemented a toy Shamir&#39;s Secret Sharing for fun. Can you help me
check is there any issues with this?&lt;/p&gt;
&lt;h1 id=&quot;shamirs-secret-shar</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Gauss格基约简算法</title>
    <link href="https://sch01ar.github.io/2022/11/24/Gauss%E6%A0%BC%E5%9F%BA%E7%BA%A6%E7%AE%80%E7%AE%97%E6%B3%95/"/>
    <id>https://sch01ar.github.io/2022/11/24/Gauss%E6%A0%BC%E5%9F%BA%E7%BA%A6%E7%AE%80%E7%AE%97%E6%B3%95/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-12-07T09:39:00.075Z</updated>
    
    <content type="html"><![CDATA[<p>由Gauss提出的二维格基约化算法</p><h1 id="算法伪代码">算法伪代码</h1><p>即对给定的两个基向量进行不断的相互约化，最终求得格上的最小向量</p><p>Loop</p><ol type="a"><li><p>If ||v2|| &lt; ||v1||, swap v1, v2</p></li><li><p>Compute m = ⌊ v1∙v2 / v1∙v1 ⌉</p></li><li><p>If m = 0, return v1, v2</p></li><li><p>v2 = v2 - m*v1</p></li></ol><p>Continue Loop</p><h1 id="代码实现">代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">e_norm</span>(<span class="hljs-params">a</span>):<br>    n = <span class="hljs-built_in">len</span>(a)<br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        res = a[i] * a[i]<br>        s += res<br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gauss_reduction</span>(<span class="hljs-params">v1, v2</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        v1_enorm = e_norm(v1)<br>        v2_enorm = e_norm(v2)<br>        <span class="hljs-keyword">if</span> v1_enorm &gt; v2_enorm:<br>            v1, v2 = v2, v1<br>            v1_enorm, v2_enorm = v2_enorm, v1_enorm<br>        m = np.dot(v1, v2) / v1_enorm<br>        m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(m))<br>        <span class="hljs-keyword">if</span> m == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v1:&quot;</span> + <span class="hljs-built_in">str</span>(v1))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v2:&quot;</span> + <span class="hljs-built_in">str</span>(v2))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            v2 = v2 - np.dot(m, v1)<br><span class="hljs-comment">#最后输出的两个向量，v1即为格上最短向量</span><br><br></code></pre></td></tr></table></figure><h1 id="例题">例题</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, inverse, bytes_to_long,long_to_bytes<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> math<br><br>FLAG = <span class="hljs-string">b&#x27;crypto&#123;?????????????????????&#125;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    upper_bound = <span class="hljs-built_in">int</span>(math.sqrt(q // <span class="hljs-number">2</span>))<br>    lower_bound = <span class="hljs-built_in">int</span>(math.sqrt(q // <span class="hljs-number">4</span>))<br>    f = random.randint(<span class="hljs-number">2</span>, upper_bound)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        g = random.randint(lower_bound, upper_bound)<br>        <span class="hljs-keyword">if</span> math.gcd(f, g) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    h = (inverse(f, q)*g) % q<br>    <span class="hljs-keyword">return</span> (q, h), (f, g)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">q, h, m</span>):<br>    <span class="hljs-keyword">assert</span> m &lt; <span class="hljs-built_in">int</span>(math.sqrt(q // <span class="hljs-number">2</span>))<br>    r = random.randint(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(math.sqrt(q // <span class="hljs-number">2</span>)))<br>    e = (r*h + m) % q<br>    <span class="hljs-keyword">return</span> e<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">q, h, f, g, e</span>):<br>    a = (f*e) % q<br>    m = (a*inverse(f, g)) % g<br>    <span class="hljs-keyword">return</span> m<br><br><br>public, private = gen_key()<br>q, h = public<br>f, g = private<br><br>m = bytes_to_long(FLAG)<br>e = encrypt(q, h, m)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Public key: <span class="hljs-subst">&#123;(q,h)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Encrypted Flag: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Public key: (7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257, 2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800)</span><br><span class="hljs-string">Encrypted Flag: 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>给定公钥q、h，以及明文e</p><p>要求私钥f、g</p><p>他们之间有如下关系：</p><p>fh ≡ g mod q</p><p>即 kq + g =fh</p><p>g = fh -kq根据这一特点即可构造格，也就是格密码中很经典的，遇到一个向量乘矩阵，即可进行构造</p><p>由于存在一组a、b，使得a（1，h）+ b（0，q）=（f，g）<spanclass="math inline">\(a(1,h) + b(0,q) = (f,g)\)</span></p><p>a = f，b = k</p><p>选取一组基底为（1，h）和（0，q），也就是上述高斯约简算法当中的v1与v2，求出v1与v2格上最小的向量，即为（f，g）</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">q = <span class="hljs-number">7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257</span><br>h = <span class="hljs-number">2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800</span><br>e = <span class="hljs-number">5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span><br>u = np.array([<span class="hljs-number">1</span>,h])<br>v = np.array([<span class="hljs-number">0</span>,q])<br>gauss_reduction(u,v)<br>f = <span class="hljs-number">47251817614431369468151088301948722761694622606220578981561236563325808178756</span><br>g = <span class="hljs-number">43997957885147078115851147456370880089696256470389782348293341937915504254589</span><br>m = decrypt(q,h,f,g,e)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#crypto&#123;Gauss_lattice_attack!&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由Gauss提出的二维格基约化算法&lt;/p&gt;
&lt;h1 id=&quot;算法伪代码&quot;&gt;算法伪代码&lt;/h1&gt;
&lt;p&gt;即对给定的两个基向量进行不断的相互约化，最终求得格上的最小向量&lt;/p&gt;
&lt;p&gt;Loop&lt;/p&gt;
&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;&lt;p&gt;If ||v2|| &amp;lt; ||</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="lattice" scheme="https://sch01ar.github.io/tags/lattice/"/>
    
  </entry>
  
  <entry>
    <title>二叉树建立与遍历</title>
    <link href="https://sch01ar.github.io/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <id>https://sch01ar.github.io/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/</id>
    <published>2022-11-09T16:00:00.000Z</published>
    <updated>2022-12-01T05:15:01.487Z</updated>
    
    <content type="html"><![CDATA[<p>网上很多算法通过直接将二叉树结点连接，从而构成二叉树，这里我构建了一个二叉树类，通过用户控制输入来建立二叉树。</p><p>有层序遍历，递归、非递归的前序遍历、中序遍历、后序遍历算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Binarytreenode</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> data;<br>        Binarytreenode *leftchild;<br>        Binarytreenode *rightchild;<br>        <span class="hljs-built_in">Binarytreenode</span>()&#123;&#125;;<br>        <span class="hljs-built_in">Binarytreenode</span>(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a,Binarytreenode *l=<span class="hljs-literal">NULL</span>,Binarytreenode*r=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">this</span>-&gt;data=a;<br>            <span class="hljs-keyword">this</span>-&gt;leftchild=l;<br>            <span class="hljs-keyword">this</span>-&gt;rightchild=r;<br>        &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span><br>&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <br>    <span class="hljs-keyword">public</span>:<br>        Binarytreenode *root;<br>        <span class="hljs-built_in">BinaryTree</span>()&#123;root =<span class="hljs-keyword">new</span>  Binarytreenode;&#125;;<br>        ~<span class="hljs-built_in">BinaryTree</span>()&#123;<span class="hljs-keyword">delete</span>[]root;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(Binarytreenode*t)</span></span><br><span class="hljs-function">        </span>&#123;<br>            cout&lt;&lt;t-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-function">Binarytreenode* <span class="hljs-title">creatTree</span><span class="hljs-params">(Binarytreenode* temp)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-type">int</span> n;<br>            cout&lt;&lt;<span class="hljs-string">&quot;请输入2叉树结点的值,输入-1以表示停止创建某子树&quot;</span>&lt;&lt;endl;<br>            cin&gt;&gt;n;<br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">-1</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                temp = <span class="hljs-keyword">new</span> Binarytreenode;<br>                temp-&gt;data=n;<br>                temp-&gt;leftchild=<span class="hljs-built_in">creatTree</span>(temp-&gt;leftchild);<br>                temp-&gt;rightchild=<span class="hljs-built_in">creatTree</span>(temp-&gt;rightchild);<br>                &#125;<br>            root=temp;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            queue &lt;Binarytreenode *&gt; nodeQueue;<br>            Binarytreenode *p=root;<br>            <span class="hljs-keyword">if</span> (p)<br>                nodeQueue.<span class="hljs-built_in">push</span>(p);<br>            <span class="hljs-keyword">while</span>(!nodeQueue.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                p=nodeQueue.<span class="hljs-built_in">front</span>();<br>                <span class="hljs-built_in">visit</span>(p);<br>                nodeQueue.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span> (p-&gt;leftchild)<br>                &#123;<br>                    nodeQueue.<span class="hljs-built_in">push</span>(p-&gt;leftchild);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (p-&gt;rightchild)<br>                &#123;<br>                    nodeQueue.<span class="hljs-built_in">push</span>(p-&gt;rightchild);<br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder0</span><span class="hljs-params">(Binarytreenode *root)</span><span class="hljs-comment">//先序递归</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (root!=<span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-built_in">visit</span>(root);<br>                <span class="hljs-built_in">preOrder0</span>(root-&gt;leftchild);<br>                <span class="hljs-built_in">preOrder0</span>(root-&gt;rightchild);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inOrder0</span><span class="hljs-params">(Binarytreenode *root)</span><span class="hljs-comment">//中序递归</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (root!=<span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-built_in">inOrder0</span>(root-&gt;leftchild);<br>                <span class="hljs-built_in">visit</span>(root);<br>                <span class="hljs-built_in">inOrder0</span>(root-&gt;rightchild);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder0</span><span class="hljs-params">(Binarytreenode *root)</span><span class="hljs-comment">//后序递归</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (root!=<span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-built_in">postOrder0</span>(root-&gt;leftchild);<br>                <span class="hljs-built_in">postOrder0</span>(root-&gt;rightchild);<br>                <span class="hljs-built_in">visit</span>(root);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder1</span><span class="hljs-params">(Binarytreenode *root)</span></span><br><span class="hljs-function">        </span>&#123;<br>            stack&lt;Binarytreenode *&gt;nodeStack;<br>            Binarytreenode *p=root;<br>            <span class="hljs-keyword">while</span> (!nodeStack.<span class="hljs-built_in">empty</span>()||p)<br>            &#123;<br>                <br>                <span class="hljs-keyword">if</span>(p)<br>                &#123;<br>                    <span class="hljs-built_in">visit</span>(p);<span class="hljs-comment">//先访问当前结点，也就是根</span><br>                    <span class="hljs-keyword">if</span> (p-&gt;rightchild!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//若右子树不空，则先存到栈中</span><br>                    &#123;<br>                        nodeStack.<span class="hljs-built_in">push</span>(p-&gt;rightchild);<br>                    &#125;<br>                    p=p-&gt;leftchild;<span class="hljs-comment">//p指向左子树，开始访问。</span><br>                &#125;<span class="hljs-keyword">else</span><span class="hljs-comment">//左子树遍历完毕后，进行弹栈，继续遍历</span><br>                &#123;<br>                    p=nodeStack.<span class="hljs-built_in">top</span>();<br>                    nodeStack.<span class="hljs-built_in">pop</span>();<br>                &#125;   <br>            &#125;   <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inOrder1</span><span class="hljs-params">(Binarytreenode *root)</span></span><br><span class="hljs-function">        </span>&#123;<br>            stack&lt;Binarytreenode *&gt;nodeStack;<br>            Binarytreenode *p=root;<br>            <span class="hljs-keyword">while</span> (!nodeStack.<span class="hljs-built_in">empty</span>()||p)<br>            &#123;<br>                <br>                <span class="hljs-keyword">if</span>(p)<br>                &#123;<br>                    nodeStack.<span class="hljs-built_in">push</span>(p);<span class="hljs-comment">//一路向左全压栈。</span><br>                    p=p-&gt;leftchild;<br>                &#125;<span class="hljs-keyword">else</span><br>                &#123;<br>                    p=nodeStack.<span class="hljs-built_in">top</span>();<br>                    <span class="hljs-built_in">visit</span>(p);<br>                    p=p-&gt;rightchild;<br>                    nodeStack.<span class="hljs-built_in">pop</span>();<br>                &#125;   <br>            &#125;   <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder1</span><span class="hljs-params">(Binarytreenode *root)</span></span><br><span class="hljs-function">        </span>&#123;<br>            stack&lt;Binarytreenode *&gt;nodeStack;<br>            Binarytreenode *p=root;<br>            Binarytreenode *pre=root;<br>            <span class="hljs-keyword">while</span> (p)<br>            &#123;<br>                <span class="hljs-keyword">while</span>(p-&gt;leftchild!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//向左搜索全压栈，直到没有左子树。</span><br>                &#123;<br>                    nodeStack.<span class="hljs-built_in">push</span>(p);<br>                    p=p-&gt;leftchild;<br>                &#125;<br>                <span class="hljs-comment">//读取栈顶，访问右子树</span><br>                <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>&amp;&amp; (p-&gt;rightchild==<span class="hljs-literal">NULL</span> || p-&gt;rightchild==pre))<br>                &#123;<br>                    <span class="hljs-built_in">visit</span>(p);<br>                    pre=p;<br>                    <span class="hljs-keyword">if</span> (nodeStack.<span class="hljs-built_in">empty</span>())<br>                    &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    p=nodeStack.<span class="hljs-built_in">top</span>();<br>                    nodeStack.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                nodeStack.<span class="hljs-built_in">push</span>(p);<br>                p=p-&gt;rightchild;<br>                <br>            &#125;<br>            <br><br>        &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinaryTree t1;<br>    t1.<span class="hljs-built_in">creatTree</span>(t1.root);<br>    cout&lt;&lt;<span class="hljs-string">&quot;层次遍历:&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">levelOrder</span>();<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;前序遍历(递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">preOrder0</span>(t1.root);<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;前序遍历(非递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">preOrder1</span>(t1.root);<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;中序遍历(递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">inOrder0</span>(t1.root);<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;中序遍历(非递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">inOrder0</span>(t1.root);<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;后序遍历(递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">postOrder0</span>(t1.root);<br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;后序遍历(非递归):&quot;</span>&lt;&lt;endl;<br>    t1.<span class="hljs-built_in">postOrder0</span>(t1.root);<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//      1</span><br><span class="hljs-comment">//   2     3</span><br><span class="hljs-comment">// 4  5       7</span><br><span class="hljs-comment">//输入1 2 4 -1 -1 5 -1 -1 3 -1 7 -1 -1</span><br><span class="hljs-comment">//层序: 1 2 3 4 5 7</span><br><span class="hljs-comment">//前序: 1 2 4 5 3 7</span><br><span class="hljs-comment">//中序: 4 2 5 1 3 7</span><br><span class="hljs-comment">//后序: 4 5 2 7 3 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网上很多算法通过直接将二叉树结点连接，从而构成二叉树，这里我构建了一个二叉树类，通过用户控制输入来建立二叉树。&lt;/p&gt;
&lt;p&gt;有层序遍历，递归、非递归的前序遍历、中序遍历、后序遍历算法。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://sch01ar.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二叉树" scheme="https://sch01ar.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2022祥云杯wp-crypto</title>
    <link href="https://sch01ar.github.io/2022/10/30/2022-10-30-2022%E7%A5%A5%E4%BA%91%E6%9D%AFwp-crypto/"/>
    <id>https://sch01ar.github.io/2022/10/30/2022-10-30-2022%E7%A5%A5%E4%BA%91%E6%9D%AFwp-crypto/</id>
    <published>2022-10-29T16:00:00.000Z</published>
    <updated>2022-12-07T09:43:16.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="little-little-fermat">little little fermat</h1><h2 id="题目源码">题目源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> x<br><br>flag = <span class="hljs-string">b&#x27;?????????&#x27;</span><br>m = bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">obfuscate</span>(<span class="hljs-params">p, k</span>):<br>    nbit = p.bit_length()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        l1 = [getRandomRange(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;_&#x27;</span> * k]<br>        l2 = [getRandomRange(<span class="hljs-number">100</span>, nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;_&#x27;</span> * k]<br>        l3 = [getRandomRange(<span class="hljs-number">10</span>, nbit//<span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;_&#x27;</span> * k]<br>        l4 = [getRandomRange(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;_&#x27;</span> *k]<br>        A = <span class="hljs-built_in">sum</span>([l1[_] * <span class="hljs-number">2</span> ** ((l2[_]+l3[_])//l4[_]) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k)])<br>        q = p + A<br>        <span class="hljs-keyword">if</span> isPrime(q) * A != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> q<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = obfuscate(p, <span class="hljs-number">5</span>)<br>e = <span class="hljs-number">65537</span><br>n = p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">assert</span> <span class="hljs-number">114514</span> ** x % p == <span class="hljs-number">1</span><br>m = m ^ (x**<span class="hljs-number">2</span>)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393</span><br><span class="hljs-string">c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>根据题目名字来看，此题和费马小定理的使用有关，题目中有一个<code>obfuscate</code>函数，进行了对q的生成，<code>q=p+A</code>，这里可以看一下A的范围，是在2<sup>[18,319]</sup>之间，因此p、q接近，尝试一下yafu分解。</p><p><img src="/img/20221030.jpg" />题目对m先进行了处理，再进行RSA加密，因此我们需要知道x。<code>assert 114514 ** x % p == 1</code>运用费马小定理，若114514与p互素，则x=p-1，即可求解m。</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> math<br>e=<span class="hljs-number">65537</span><br>n = <span class="hljs-number">141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393</span><br>c = <span class="hljs-number">81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883</span><br>p = <span class="hljs-number">11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734648016476153593841839977704512156756634066593725142934001</span><br>q = <span class="hljs-number">11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734646483980612727952939084061619889139517526028673988305393</span><br><span class="hljs-built_in">print</span>(math.gcd(p,<span class="hljs-number">114514</span>))<br><span class="hljs-comment">#1</span><br>x=p-<span class="hljs-number">1</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m0=<span class="hljs-built_in">pow</span>(c,d,n)<br>m=m0^(x**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#flag&#123;I~ju5t_w@nt_30_te11_y0u_how_I_@m_f3ll1ng~&#125;</span><br></code></pre></td></tr></table></figure><h1 id="fill">fill</h1><h2 id="题目源码-1">题目源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> dot<br><br>nbits = <span class="hljs-number">32</span><br>msg = getRandomNBitInteger(nbits)<br>flag = <span class="hljs-string">b&#x27;flag&#123;sha256(msg)&#125;&#x27;</span><br>tmp_m = <span class="hljs-built_in">bin</span>(msg)[<span class="hljs-number">2</span>:]<br>f_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp_m)):<br>    f_list.append(<span class="hljs-built_in">int</span>(tmp_m[i]))<br><br>r_list =[randint(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits - <span class="hljs-number">1</span>):<br>    r_list.append(randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>], <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    A = randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>])<br>    B = randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> gcd(A, B) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br>M = [A * x % B <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> r_list]<br><br>S = dot(f_list, M)<br><span class="hljs-built_in">print</span>(S)<br><br>seed = getRandomNBitInteger(<span class="hljs-number">30</span>)<br>s = [<span class="hljs-number">0</span>] * nbits<br>s[<span class="hljs-number">0</span>] = seed<br>m = getRandomNBitInteger(<span class="hljs-number">20</span>)<br>c = getPrime(<span class="hljs-number">24</span>)<br>n = <span class="hljs-number">991125622</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nbits):<br>    s[i] = (s[i-<span class="hljs-number">1</span>]*m+c)%n<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    M[t] = M[t] + s[t]<br><span class="hljs-built_in">print</span>(M)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">492226042629702</span><br><span class="hljs-string">562734112 859151551 741682801</span><br><span class="hljs-string">M = [19621141192340, 39617541681643, 3004946591889, 6231471734951, 3703341368174, 48859912097514, 4386411556216, 11028070476391, 18637548953150, 29985057892414, 20689980879644, 20060557946852, 46908191806199, 8849137870273, 28637782510640, 35930273563752, 20695924342882, 36660291028583, 10923264012354, 29810154308143, 4444597606142, 31802472725414, 23368528779283, 15179021971456, 34642073901253, 44824809996134, 31243873675161, 27159321498211, 2220647072602, 20255746235462, 24667528459211, 46916059974372]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="题目分析-1">题目分析</h2><p>随机产生32位的数，sha256()加密后作为flag，并将其2进制的每一位存到了<code>f_list</code>数组中。</p><p>又创建了一个<code>r_list</code>32位数组，里面存着随机数，先暂时不管。</p><p>双对<code>r_list</code>数组中的随机数做了加密，产生了<code>M</code>数组。</p><p>对<code>f_list</code>和<code>M</code>数组进行了<code>numpy.dot</code>运算，即向量乘法，得到和为S。</p><p>叒创建了一个<code>s</code>数组，这个很明显，用LCG线性同余算法进行了加密。</p><p>最后将<code>M</code>数组与<code>s</code>数组相加。</p><p>这就是这道题整体的流程，每一步并不难，只是步骤多，略显复杂。</p><h2 id="exp-1">EXP</h2><h3 id="x01">0x01</h3><p>可以先进行一下LCG的求解，把s数组求解出来，从而求出M数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">991125622</span><br>output =[<span class="hljs-number">562734112</span>,<span class="hljs-number">859151551</span>,<span class="hljs-number">741682801</span>]<br>MMI = <span class="hljs-keyword">lambda</span> A, n,s=<span class="hljs-number">1</span>,t=<span class="hljs-number">0</span>,N=<span class="hljs-number">0</span>: (n &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> t%N <span class="hljs-keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="hljs-keyword">or</span> n),-<span class="hljs-number">1</span>)[n&lt;<span class="hljs-number">1</span>] <span class="hljs-comment">#逆元计算</span><br>a=(output[<span class="hljs-number">2</span>]-output[<span class="hljs-number">1</span>])*MMI((output[<span class="hljs-number">1</span>]-output[<span class="hljs-number">0</span>]),n)%n<br>ani=MMI(a,n)<br>b=(output[<span class="hljs-number">1</span>]-a*output[<span class="hljs-number">0</span>])%n<br><br>seed = <span class="hljs-number">562734112</span><br>a=<span class="hljs-number">55365664</span><br>b= <span class="hljs-number">8712091</span><br>s = [<span class="hljs-number">0</span>] * nbits<br>s[<span class="hljs-number">0</span>] = seed<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nbits):<br>    s[i] = (s[i-<span class="hljs-number">1</span>]*a+b)%n<br>M = [<span class="hljs-number">19621141192340</span>, <span class="hljs-number">39617541681643</span>, <span class="hljs-number">3004946591889</span>, <span class="hljs-number">6231471734951</span>, <span class="hljs-number">3703341368174</span>, <span class="hljs-number">48859912097514</span>, <span class="hljs-number">4386411556216</span>, <span class="hljs-number">11028070476391</span>, <span class="hljs-number">18637548953150</span>, <span class="hljs-number">29985057892414</span>, <span class="hljs-number">20689980879644</span>, <span class="hljs-number">20060557946852</span>, <span class="hljs-number">46908191806199</span>, <span class="hljs-number">8849137870273</span>, <span class="hljs-number">28637782510640</span>, <span class="hljs-number">35930273563752</span>, <span class="hljs-number">20695924342882</span>, <span class="hljs-number">36660291028583</span>, <span class="hljs-number">10923264012354</span>, <span class="hljs-number">29810154308143</span>, <span class="hljs-number">4444597606142</span>, <span class="hljs-number">31802472725414</span>, <span class="hljs-number">23368528779283</span>, <span class="hljs-number">15179021971456</span>, <span class="hljs-number">34642073901253</span>, <span class="hljs-number">44824809996134</span>, <span class="hljs-number">31243873675161</span>, <span class="hljs-number">27159321498211</span>, <span class="hljs-number">2220647072602</span>, <span class="hljs-number">20255746235462</span>, <span class="hljs-number">24667528459211</span>, <span class="hljs-number">46916059974372</span>]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    M[t] = M[t] - s[t]<br></code></pre></td></tr></table></figure><h3 id="x02">0x02</h3><p>按理来说，感觉应该根据求出来的<code>M</code>数组进行逆运算，求出<code>r_list</code>数组，但是求出来<code>r_list</code>有什么用呢，所以直接尝试求<code>f_list</code>。因为<code>f_list</code>中不是0就是1，与<code>M</code>做向量乘法，即为<code>M</code>数组中若干元素的和。根据题目给定和S，先大概看一下需要<code>M</code>中多少个元素累加。发现在M前21位和&lt; S，前22位和 &gt;S，所以猜想应该是M当中，除10个左右元素之外的和。</p><p>这里就遍历了一下，复杂度实在太高了，也没想着能出，结果还真算出来了o.O</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>     <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a,nbits):<br>         <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b,nbits):<br>             <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c,nbits):<br>                 <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d,nbits):<br>                     <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e,nbits):<br>                         <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(f,nbits):<br>                             <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(g,nbits):<br>                                 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h,nbits):<br>                                     <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,nbits):<br>                                         <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j,nbits):<br>                                             <span class="hljs-keyword">if</span> M[a]+M[b]+M[c]+M[d]+M[e]+M[f]+M[g] +M[h] + M[i] +M[j] +M[k] == <span class="hljs-built_in">sum</span>-S:<br>                                                 <span class="hljs-built_in">print</span>(a,b,c,d,e,f,g,h,i,j,k)<br>                                                 <span class="hljs-keyword">break</span><br><span class="hljs-comment">#2 4 9 10 15 19 24 27 28 30 31</span><br></code></pre></td></tr></table></figure><p>也就说明，<code>f_list</code>中下标为这些的，对应值是0，其余为1，即可得到msg的2进制数，转为十进制后进行<code>sha256()</code>加密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = [<span class="hljs-string">&#x27;1&#x27;</span>] * nbits<br>f[<span class="hljs-number">2</span>]=f[<span class="hljs-number">4</span>]=f[<span class="hljs-number">9</span>]=f[<span class="hljs-number">10</span>]=f[<span class="hljs-number">15</span>]=f[<span class="hljs-number">19</span>]=f[<span class="hljs-number">24</span>]=f[<span class="hljs-number">27</span>]=f[<span class="hljs-number">28</span>]=f[<span class="hljs-number">30</span>]=f[<span class="hljs-number">31</span>]=<span class="hljs-string">&#x27;0&#x27;</span><br>a=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    a+=f[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">2</span>))<br><span class="hljs-comment">#3617517412</span><br><span class="hljs-comment">#sha256加密后：8f504aee71626212f275117326722b6c0ccc94f4039ed31fbcfde08e026352c4，套上flag&#123;&#125;提交即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;little-little-fermat&quot;&gt;little little fermat&lt;/h1&gt;
&lt;h2 id=&quot;题目源码&quot;&gt;题目源码&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2022NewStarCTF-flip_flop</title>
    <link href="https://sch01ar.github.io/2022/10/27/2022NewStarCTF-flip_flop/"/>
    <id>https://sch01ar.github.io/2022/10/27/2022NewStarCTF-flip_flop/</id>
    <published>2022-10-26T16:00:00.000Z</published>
    <updated>2022-12-07T09:41:52.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flip-flop">flip-flop</h1><p>AES-CBC加密模式</p><h2 id="题目">题目</h2><p>源码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG<br>auth_major_key = os.urandom(<span class="hljs-number">16</span>)<br><br>BANNER = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Login as admin to get the flag ! </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>MENU = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Enter your choice</span><br><span class="hljs-string">[1] Create NewStarCTF Account</span><br><span class="hljs-string">[2] Create Admin Account</span><br><span class="hljs-string">[3] Login</span><br><span class="hljs-string">[4] Exit</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(BANNER)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(MENU)<br><br>    option = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>))<br>    <span class="hljs-keyword">if</span> option == <span class="hljs-number">1</span>:<br>        auth_pt = <span class="hljs-string">b&#x27;NewStarCTFer____&#x27;</span><br>        user_key = os.urandom(<span class="hljs-number">16</span>)<br>        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)<br>        code = cipher.encrypt(auth_pt)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;here is your authcode: <span class="hljs-subst">&#123;user_key.<span class="hljs-built_in">hex</span>() + code.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;GET OUT !!!!!!&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">3</span>:<br>        authcode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your authcode &gt; &#x27;</span>)<br>        user_key = <span class="hljs-built_in">bytes</span>.fromhex(authcode)[:<span class="hljs-number">16</span>]<br>        code = <span class="hljs-built_in">bytes</span>.fromhex(authcode)[<span class="hljs-number">16</span>:]<br>        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)<br>        auth_pt = cipher.decrypt(code)<br>        <span class="hljs-keyword">if</span> auth_pt == <span class="hljs-string">b&#x27;AdminAdmin______&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(FLAG)<br>        <span class="hljs-keyword">elif</span> auth_pt == <span class="hljs-string">b&#x27;NewStarCTFer____&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Have fun!!&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Who are you?&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ByeBye&#x27;</span>)<br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;WTF&quot;</span>)<br></code></pre></td></tr></table></figure> ## 题目分析此题是通过注册得到的用户账户的密文，然后输入管理员账户对应的密文，才能得到flag。</p><p>对用户账户和管理员账户的加密解密均采用AES-CBC模式，但是本题仅有一组明文，iv仅作为偏移量，也就是本题中的user_key。</p><p>这里先来说一下我最一开始的思路，由于user_key每次是随机产生的，但是一次程序的运行当中是不变的。由于密文由两部分组成，前半部分为user_key.hex()，后半部分为code.hex()，所以只要构造出admin对应的code即可，那么就需要AES加密当中的key，所以就需要构造一个key来产生出admin对应的code。查询了很多资料发现都难以实现。于是……</p><p>那为什么不换一下思路？不能构造code，能不能构造iv？</p><p>先来看一下加密方式：</p><p>C = encrypt(M ^ iv)</p><p>M = decrypt(C)^iv</p><p>对应一下本题当中的NewStarCTFer和admin：<code>b'NewStarCTFer____' = decrypt(code) ^ iv1</code></p><p><code>b'AdminAdmin______' = decrypt(code) ^ iv2</code></p><p>因此可求出admin对应的iv2，随后拼接上普通用户的后半段code即可。</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>authcode= <span class="hljs-string">&quot;4f72b2079005a15e30efb3febea8cda266f4c3b47147e79167c3cde81ca84a4b&quot;</span><br>n=bytes_to_long(<span class="hljs-string">b&#x27;NewStarCTFer____&#x27;</span>)<br>a=bytes_to_long(<span class="hljs-string">b&#x27;AdminAdmin______&#x27;</span>)<br>iv1= <span class="hljs-built_in">int</span>(authcode[:<span class="hljs-built_in">len</span>(authcode)//<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br>code = authcode[<span class="hljs-built_in">len</span>(authcode)//<span class="hljs-number">2</span>:]<br>decode = iv1 ^ n<br>iv2 = a ^ decode<br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">hex</span>(iv2)+code)[<span class="hljs-number">2</span>:])<br><span class="hljs-comment">#flag&#123;filp_the_word!!!!!!!!&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flip-flop&quot;&gt;flip-flop&lt;/h1&gt;
&lt;p&gt;AES-CBC加密模式&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;源码如下： &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记20221026</title>
    <link href="https://sch01ar.github.io/2022/10/26/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221026/"/>
    <id>https://sch01ar.github.io/2022/10/26/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221026/</id>
    <published>2022-10-25T16:00:00.000Z</published>
    <updated>2022-12-07T09:39:19.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rsa5">RSA5</h1><h2 id="题目分析">题目分析</h2><p>给定e=65537</p><p>给了很多组n、c</p><p>由于e过大，所以不考虑使用CRT，由于m是同一个，因此遍历一下，求出两个n的最大公约数，即为p，后续就简单了。</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python">n1 = <span class="hljs-number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br>c1 = <span class="hljs-number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><br>n2 = <span class="hljs-number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br>c2 = <span class="hljs-number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><br>n3 = <span class="hljs-number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br>c3 = <span class="hljs-number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><br>n4 = <span class="hljs-number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br>c4 = <span class="hljs-number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><br>n5 = <span class="hljs-number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br>c5 = <span class="hljs-number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><br>n6 = <span class="hljs-number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br>c6 = <span class="hljs-number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><br>n7 = <span class="hljs-number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br>c7 = <span class="hljs-number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><br>n8 = <span class="hljs-number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br>c8 = <span class="hljs-number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><br>n9 = <span class="hljs-number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br>c9 = <span class="hljs-number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><br>n10 = <span class="hljs-number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br>c10 = <span class="hljs-number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><br>n11 = <span class="hljs-number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br>c11 = <span class="hljs-number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><br>n12 = <span class="hljs-number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br>c12 = <span class="hljs-number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><br>n13 = <span class="hljs-number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br>c13 = <span class="hljs-number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><br>n14 = <span class="hljs-number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br>c14 = <span class="hljs-number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><br>n15 = <span class="hljs-number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br>c15 = <span class="hljs-number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><br>n16 = <span class="hljs-number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br>c16 = <span class="hljs-number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><br>n17 = <span class="hljs-number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br>c17 = <span class="hljs-number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><br>n18 = <span class="hljs-number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br>c18= <span class="hljs-number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><br>n19 = <span class="hljs-number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br>c19 = <span class="hljs-number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><br>n20 = <span class="hljs-number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br>c20 = <span class="hljs-number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br>n=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>        <span class="hljs-keyword">if</span> math.gcd(n[i],n[j]) &gt; <span class="hljs-number">1</span>:<br>            p=math.gcd(n[i],n[j])<br>            <span class="hljs-built_in">print</span>(i,j,p)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#i=4,j=17</span><br>e=<span class="hljs-number">65537</span><br>q = n[<span class="hljs-number">4</span>]// p<br>phi4=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi4)<br>m=<span class="hljs-built_in">pow</span>(c5,d,n[<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># b&#x27;flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rsa5&quot;&gt;RSA5&lt;/h1&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;题目分析&lt;/h2&gt;
&lt;p&gt;给定e=65537&lt;/p&gt;
&lt;p&gt;给了很多组n、c&lt;/p&gt;
&lt;p&gt;由于e过大，所以不考虑使用CRT，由于m是同一个，因此遍历一下，求出两个n的最大公约数，即为p，后续就简单了。&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="diary" scheme="https://sch01ar.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2022 DASCTF 10月挑战赛wp</title>
    <link href="https://sch01ar.github.io/2022/10/23/2022DASCTF10%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bwp/"/>
    <id>https://sch01ar.github.io/2022/10/23/2022DASCTF10%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bwp/</id>
    <published>2022-10-22T16:00:00.000Z</published>
    <updated>2022-12-07T09:42:51.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rsa">RSA</h1><h2 id="题目如下">题目如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>n_2 = <span class="hljs-number">675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span><br>n_3 = <span class="hljs-number">91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span><br>e_1 = <span class="hljs-number">65537</span><br>e_2 = <span class="hljs-number">3</span><br>c_1 = <span class="hljs-number">47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span><br>c_2 = <span class="hljs-number">332431</span><br>c_3 = <span class="hljs-number">11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span><br>m = <span class="hljs-number">9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span><br>k = <span class="hljs-number">8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt1</span>(<span class="hljs-params">n</span>):<br>    n1 = <span class="hljs-built_in">hex</span>(n&gt;&gt;<span class="hljs-number">200</span>).encode()<br>    n2 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(n))[<span class="hljs-number">20</span>:].encode()<br>    <span class="hljs-keyword">return</span> n1,n2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt2</span>(<span class="hljs-params">m , n_1</span>):<br>    c_1 = <span class="hljs-built_in">pow</span>(m,e_1,n_1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_1 = &#x27;</span>+<span class="hljs-built_in">str</span>(c_1))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt3</span>(<span class="hljs-params">m , n_2</span>):<br>    c_2 = <span class="hljs-built_in">pow</span>( m , e_2 , n_2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_2 = &#x27;</span>+<span class="hljs-built_in">str</span>(c_2))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt4</span>(<span class="hljs-params">m</span>):<br>    k = getPrime(<span class="hljs-number">512</span>)<br>    m = m % k<br>    c_3 = <span class="hljs-built_in">pow</span>(m, e_2, n_3)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_3 = &#x27;</span> + <span class="hljs-built_in">str</span>(c_3))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#x27;</span> + <span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k = &#x27;</span> + <span class="hljs-built_in">str</span>(k))<br><br><br>m1,m2 = encrypt1(flag)<br>m1 = bytes_to_long(m1)<br>m2 = bytes_to_long(m2)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n_2 = &#x27;</span> + <span class="hljs-built_in">str</span>(n_2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n_3 = &#x27;</span> + <span class="hljs-built_in">str</span>(n_3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e_1 = &#x27;</span> + <span class="hljs-built_in">str</span>(e_1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e_2 = &#x27;</span> + <span class="hljs-built_in">str</span>(e_2))<br><br><br>encrypt2(m1,n_1)<br>encrypt3(n_1,n_2)<br>encrypt4(m2)<br></code></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>该题的加密顺序是：</p><p>1、加密flag，分为两部分m1、m2</p><p>2、加密m1</p><p>3、加密m2</p><p>同理我们解密的顺序应该也是</p><p>1、解出m1、m2</p><p>2、解出flag</p><h3 id="求m2">求m2</h3><p>先观察一下encrypt4函数</p><p>虽然说e_2=3，按理来说使用低加密指数攻击，但并不可行。</p><p>又因为m = m % k</p><p>可通过这点和<code>c_3 = pow(m, e_2, n_3)</code>做遍历求出m</p><p>最后发现m即为m2，m2 &lt; k</p><h3 id="求m1">求m1</h3><p>发现m1加密方式采用RSA，但是n_1未知</p><p>n_1又通过一次RSA加密，已知n_1对应的密文</p><p>利用低加密指数攻击解出n1</p><p>发现n1可分解为3个素数乘积</p><p>故phi可求，即求出m1</p><h3 id="求flag">求flag</h3><p>观察encryt1</p><p>m1是flag右移200位之后转为字节</p><p>m2是flag的20位之后转成字节</p><p>所以来说m2是没什么问题，主要找到flag的前20位，再把m2拼到后面即可。</p><p>由于m1是flag右移200位，因此flag的低位缺失，但高位还在，由于不知道flag总长度，抱着试一试的心态，猜测一下它的高位前20位没有缺失</p><p>我们将m1和m2转为字节发现</p><p>m1:b'0x666c61677b3230366538353964'</p><p>m2:b'383539643865383534633466363030636231323735376262663966357d'</p><p>发现m1和m2有重叠部分，即38353开始</p><p>可以证实m1前20位确实没有缺失</p><p>因此取m1前20位，加m2，即可解出flag</p><h2 id="exp">EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> ByteString<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n_2 = <span class="hljs-number">675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span><br>e_2=<span class="hljs-number">3</span><br>c_1 = <span class="hljs-number">47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span><br>c_2 = <span class="hljs-number">332431</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">c,e,n</span>):<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        m1=c+n*i<br>        result,flag=gmpy2.iroot(m1,e)<br>        <span class="hljs-keyword">if</span> flag==<span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">return</span> result<br>        i+=<span class="hljs-number">1</span><br><br><br>n_1=<span class="hljs-number">70406706457855863712635967741447303613971473150228480705119773604469794649140239446237334040048504811343327173817296308781190911727763110615393368497803655390445303946160971</span><br>p_1=<span class="hljs-number">2732337821</span><br>e_1 = <span class="hljs-number">65537</span><br>t_1=<span class="hljs-number">2224243981</span><br>q_1=<span class="hljs-number">11585031296201346891716939633970482508158508580350404805965250133832632323150440185890235814142601827544669601048550999405490149435265122374459158586377571</span><br>phi_1=(p_1-<span class="hljs-number">1</span>)*(q_1-<span class="hljs-number">1</span>)*(t_1-<span class="hljs-number">1</span>)<br>d_1=gmpy2.invert(e_1,phi_1)<br>m1=<span class="hljs-built_in">pow</span>(c_1,d_1,n_1)<br>c=<span class="hljs-built_in">pow</span>(m1,e_1,n_1)<br><br>n_3 = <span class="hljs-number">91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span><br>c_3 = <span class="hljs-number">11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span><br>m = <span class="hljs-number">9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span><br>k = <span class="hljs-number">8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span><br>m2=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(m2)<br><span class="hljs-built_in">print</span>(long_to_bytes(m1)[:<span class="hljs-number">20</span>])<br>m=<span class="hljs-number">0x666c61677b32303665383539643865383534633466363030636231323735376262663966357d</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># b&#x27;383539643865383534633466363030636231323735376262663966357d&#x27;</span><br><span class="hljs-comment"># b&#x27;0x666c61677b32303665&#x27;</span><br><span class="hljs-comment"># b&#x27;flag&#123;206e859d8e854c4f600cb12757bbf9f5&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rsa&quot;&gt;RSA&lt;/h1&gt;
&lt;h2 id=&quot;题目如下&quot;&gt;题目如下&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    <category term="CTF" scheme="https://sch01ar.github.io/categories/CTF/"/>
    
    
    <category term="wp" scheme="https://sch01ar.github.io/tags/wp/"/>
    
  </entry>
  
</feed>
