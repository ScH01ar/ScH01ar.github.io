{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2022-10-16T02:33:28.077Z","updated":"2022-10-16T01:15:58.120Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2022-10-16T02:33:21.117Z","updated":"2022-10-15T08:09:45.464Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-10-16T02:41:49.050Z","updated":"2022-10-15T08:09:45.464Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-10-16T02:30:27.247Z","updated":"2022-10-15T08:09:45.464Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-10-17T01:02:57.129Z","updated":"2022-10-15T08:09:45.464Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-10-16T03:25:28.438Z","updated":"2022-10-15T08:09:45.464Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"2022NewStarCTFweek5","slug":"2022NewStarCTF-flip_flop","date":"2022-10-25T16:00:00.000Z","updated":"2022-10-26T07:01:32.242Z","comments":true,"path":"2022/10/26/2022NewStarCTF-flip_flop/","link":"","permalink":"http://example.com/2022/10/26/2022NewStarCTF-flip_flop/","excerpt":"","text":"","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"2022 DASCTF 10月挑战赛wp","slug":"2022DASCTF10月挑战赛wp","date":"2022-10-22T16:00:00.000Z","updated":"2022-10-24T00:33:47.654Z","comments":true,"path":"2022/10/23/2022DASCTF10月挑战赛wp/","link":"","permalink":"http://example.com/2022/10/23/2022DASCTF10%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bwp/","excerpt":"","text":"RSA题目如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from Crypto.Util.number import *from secret import flagn_2 = 675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010n_3 = 91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567e_1 = 65537e_2 = 3c_1 = 47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533c_2 = 332431c_3 = 11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609m = 9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364k = 8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431def encrypt1(n): n1 = hex(n&gt;&gt;200).encode() n2 = str(hex(n))[20:].encode() return n1,n2def encrypt2(m , n_1): c_1 = pow(m,e_1,n_1) print(&#x27;c_1 = &#x27;+str(c_1))def encrypt3(m , n_2): c_2 = pow( m , e_2 , n_2) print(&#x27;c_2 = &#x27;+str(c_2))def encrypt4(m): k = getPrime(512) m = m % k c_3 = pow(m, e_2, n_3) print(&#x27;c_3 = &#x27; + str(c_3)) print(&#x27;m = &#x27; + str(m)) print(&#x27;k = &#x27; + str(k))m1,m2 = encrypt1(flag)m1 = bytes_to_long(m1)m2 = bytes_to_long(m2)print(&#x27;n_2 = &#x27; + str(n_2))print(&#x27;n_3 = &#x27; + str(n_3))print(&#x27;e_1 = &#x27; + str(e_1))print(&#x27;e_2 = &#x27; + str(e_2))encrypt2(m1,n_1)encrypt3(n_1,n_2)encrypt4(m2) 题目分析改题的加密顺序是：1、加密flag，分为两部分m1、m22、加密m13、加密m2同理我们解密的顺序应该也是1、解出m1、m22、解出flag 求m2先观察一下encrypt4函数虽然说e_2&#x3D;3，按理来说使用低加密指数攻击，但并不可行。又因为m &#x3D; m % k可通过这点和c_3 = pow(m, e_2, n_3)做遍历求出m最后发现m即为m2，m2 &lt; k 求m1发现m1加密方式采用RSA，但是n_1未知n_1又通过一次RSA加密，已知n_1对应的密文利用低加密指数攻击解出n1发现n1可分解为3个素数乘积故phi可求，即求出m1 求flag观察encryt1m1是flag右移200位之后转为字节m2是flag的20位之后转成字节所以来说m2是没什么问题，主要找到flag的前20位，再把m2拼到后面即可。由于m1是flag右移200位，因此flag的低位缺失，但高位还在，由于不知道flag总长度，抱着试一试的心态，猜测一下它的高位前20位没有缺失我们将m1和m2转为字节发现m1:b’0x666c61677b3230366538353964’m2:b’383539643865383534633466363030636231323735376262663966357d’发现m1和m2有重叠部分，即38353开始可以证实m1前20位确实没有缺失因此取m1前20位，加m2，即可解出flag EXP1234567891011121314151617181920212223242526272829303132333435363738394041import mathfrom typing import ByteStringimport gmpy2from Crypto.Util.number import *n_2 = 675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010e_2=3c_1 = 47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533c_2 = 332431def dec(c,e,n): i=0 while(1): m1=c+n*i result,flag=gmpy2.iroot(m1,e) if flag==True: return result i+=1n_1=70406706457855863712635967741447303613971473150228480705119773604469794649140239446237334040048504811343327173817296308781190911727763110615393368497803655390445303946160971p_1=2732337821e_1 = 65537t_1=2224243981q_1=11585031296201346891716939633970482508158508580350404805965250133832632323150440185890235814142601827544669601048550999405490149435265122374459158586377571phi_1=(p_1-1)*(q_1-1)*(t_1-1)d_1=gmpy2.invert(e_1,phi_1)m1=pow(c_1,d_1,n_1)c=pow(m1,e_1,n_1)n_3 = 91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567c_3 = 11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609m = 9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364k = 8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431m2=long_to_bytes(m)print(m2)print(long_to_bytes(m1)[:20])m=0x666c61677b32303665383539643865383534633466363030636231323735376262663966357dprint(long_to_bytes(m))# b&#x27;383539643865383534633466363030636231323735376262663966357d&#x27;# b&#x27;0x666c61677b32303665&#x27;# b&#x27;flag&#123;206e859d8e854c4f600cb12757bbf9f5&#125;&#x27;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"BUU刷题日记20221022","slug":"BUU刷题日记20221022","date":"2022-10-21T16:00:00.000Z","updated":"2022-10-22T12:47:51.674Z","comments":true,"path":"2022/10/22/BUU刷题日记20221022/","link":"","permalink":"http://example.com/2022/10/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221022/","excerpt":"","text":"(先表示一下对RNG3:0输掉t1的遗憾，另外，EDG加油) RSA4题目只给了三组n、c，采用中国剩余定理，具体推导如下 推导过程m^e ≡ c1 mod n1m^e ≡ c2 mod n2m^e ≡ c3 mod n3 中国剩余定理（CRT）中国剩余定理的内容是：针对上述方程组，若n1、n2、n3互质，对于任意的c1、c2、c3，方程组都有解，使用条件是m^e &lt; n1、n2、n3。通解形式如下： 令N &#x3D; n1 * n2 * n3，N1 &#x3D; N&#x2F;n1，N2、N3同理令t1 &#x3D; N1^(-1)，即其对应的模n1运算的逆元，t2，t3同理，可用t1=gmpy2.invert(N1,n1)表示。 有了Ni和ti的定义，我们就可以给出通解形式：x &#x3D; c1 * N1 * t1 ……有了通解公式我们就可以求出m^e，对e进行一下遍历即可，m开方成功即可。 EXP123456789101112131415161718192021222324252627import gmpy2from sympy.ntheory.modular import crtfrom Crypto.Util.number import long_to_bytese = 3n1 = &#x27;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&#x27;c1 = &#x27;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&#x27;n2 = &#x27;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&#x27;c2 = &#x27;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&#x27;n3 = &#x27;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&#x27;c3 = &#x27;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&#x27;c1=int(c1,5)n1=int(n1,5)c2=int(c2,5)n2=int(n2,5)c3=int(c3,5)n3=int(n3,5)e=3n=[n1,n2,n3]c=[c1,c2,c3]resultant,mod= crt(n, c)# 有现成的库函数可以调用print(gmpy2.iroot(resultant, e))m=259362307225540148883586283191025214233097658309244310540770399135748418469298031742173624766441014006294782333print(long_to_bytes(m))#noxCTF&#123;D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"diary","slug":"diary","permalink":"http://example.com/tags/diary/"}]},{"title":"BUU刷题日记20221021","slug":"BUU刷题日记20221021","date":"2022-10-20T16:00:00.000Z","updated":"2022-10-21T09:09:16.105Z","comments":true,"path":"2022/10/21/BUU刷题日记20221021/","link":"","permalink":"http://example.com/2022/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221021/","excerpt":"","text":"RSA2题目给定n、e、dp、c非预期解：直接分解n下面考虑n不能分解的情况 推导过程dp ≡ d mod (p-1)ed ≡ 1 mod (p-1) * (q-1)ed &#x3D; 1 + k2(p-1)(q-1)对1式两端同乘e，得e * dp ≡ ed mod (p-1)e * dp &#x3D; k1(p-1) + ed代入ed得e * dp &#x3D; k1(p-1) + 1 + k2(p-1)(q-1)由于两个未知数略显麻烦，发现公因子(p-1)，等式两边同时取余p-1，即可消掉ne * dp ≡ 1 mod (p-1)e * dp &#x3D;k(p-1) + 1得到这个式子后，其实真正意义上的未知数只有我们要求的p，但是还存在一个k。针对k，我们判断一下他的范围，看看能否采用爆破的方式。k &#x3D; (e * dp - 1)&#x2F;(p-1)因为dp &lt; p-1所以k &lt; e通过遍历k然后找到(e * dp - 1)可以整除k的情况即可。(跑了一下发现限制条件还不够)因此再加一个n能否整除p即可。 EXP1234567891011121314151617181920import gmpy2from Crypto.Util.number import long_to_bytese = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751# p = 13468634736343473907717969603434376212206335187555458742257940406618189481177835992217885676243155145465521141546915941147336786447889325606555333350540003# q = 18432009829596386103558375461387837845170621179295293289126504231317130550979989727125205467379713835047300158256398009229511746203459540859429194971855371for k in range(1,e): if (e*dp-1)%k == 0: p=(e*dp-1)//k + 1 if n%p == 0: print(p) breakq=n//pphi= (p-1)*(q-1)d= gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m))#flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125; RSA3给定n、e1、c1、e2、c2。m ≡ c1^e1 mod nm ≡ c2^e2 mod n这里采用共模攻击，详细原理如下： 扩展欧几里得算法：给定两个整数a、b，必定存在x、y，使得gcd(a,b)&#x3D;ax+by对应到本题当中，由于e1、e2互为素数，因此gcd(e1,e2)&#x3D;1，从而存在s1、s2使得:s1 * e1 + s2 * e2 &#x3D; 1 推导过程m &#x3D; m % nm &#x3D; m^(s1 * e1 + s2 * e2) % nm &#x3D; m^(e1 * s1) * m^(e2 * s2) % nm &#x3D; (m^(e1 * s1) % n) * (m^(e2 * s2) % n) % nm &#x3D; (c1^s1 % n) * (c2^s2 % n) % n EXP123456789101112import gmpy2from Crypto.Util.number import long_to_bytesc1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1=11187289c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2=9647291r,s1,s2=gmpy2.gcdext(e1,e2)m=(pow(c1,s1,n) * pow(c2,s2,n)) %nprint(long_to_bytes(m))#flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"diary","slug":"diary","permalink":"http://example.com/tags/diary/"}]},{"title":"BUU刷题日记20221020","slug":"BUU刷题日记20221020","date":"2022-10-19T16:00:00.000Z","updated":"2022-10-21T02:17:03.606Z","comments":true,"path":"2022/10/20/BUU刷题日记20221020/","link":"","permalink":"http://example.com/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221020/","excerpt":"","text":"RSA1给定dp、dq类型dp ≡ d mod (p-1)dq ≡ d mod (q-1)m ≡ c^d^ mod n $$ m &#x3D; c^d^ + k * n $$m &#x3D; c^d^ +k * p * q对上式两端同时对p、q分别取余，得：（中国剩余定理）m1 ≡ c^d^ mod pm2 ≡ c^d^ mod q同理，可得到c^d^ &#x3D; m1 +k * p代入到 m2 ≡ c^d^ mod q 中：m2 ≡ (m1 + k * p)mod q ，两端减去m1得m2 - m1 ≡ k * p mod q ，两端乘p的逆元得(m2 - m1)p^-1^ ≡ k mod q将k代入到 c^d^ &#x3D; m1 +k * p 中得：c^d^ &#x3D; m1 + ((m2 - m1)p^-1^ mod q) * pm&#x3D;c^d^ mod n得到m ≡ (((m2 - m1) * p^-1^ mod q) * p + m1) mod n接下来就是求解m1，m2m1 ≡ c^dp+k*(p-1)^ mod pm2 ≡ c^dq+k*(q-1)^ mod q根据费马小定理若p是素数，则a^(p-1)^ ≡ 1 mod p因此 m1 ≡ c^dp^ mod p，m2 ≡ c^dq^ mod q最终可求得m exp1234567891011121314import gmpy2from Crypto.Util.number import long_to_bytesp = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852m1=pow(c,dp,p)m2=pow(c,dq,q)n=p*qp0=gmpy2.invert(p,q)m=(((m2-m1)*p0 % q)* p +m1)%nprint(long_to_bytes(m))#noxCTF&#123;W31c0m3_70_Ch1n470wn&#125; RSAROLL1234RSA roll！roll！roll！Only number and a-z（don&#x27;t use editorwhich MS provide） 给了一个data.txt文件，打开盲猜一下第一行是n，e，后面是c 1234567891011121314151617import gmpy2from Crypto.Util.number import long_to_bytesn = 920139713e = 19p=18443q=49891phi =(p-1)*(q-1)d=gmpy2.invert(e,phi)c=[704796792,752211152,274704164,18414022,368270835,483295235,263072905,459788476,483295235,459788476,663551792,475206804,459788476,428313374,475206804,459788476,425392137,704796792,458265677,341524652,483295235,534149509,425392137,428313374,425392137,341524652,458265677,263072905,483295235,828509797,341524652,425392137,475206804,428313374,483295235,475206804,459788476,306220148,]m=[]flag=b&#x27;&#x27;for i in range (len(c)): m.append(pow(c[i],d,n)) flag+=long_to_bytes(m[i])print(flag)#flag&#123;13212je2ue28fy71w8u87y31r78eu1e2&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"diary","slug":"diary","permalink":"http://example.com/tags/diary/"}]},{"title":"BUU刷题日记20221020","slug":"BUU刷题日记20221026","date":"2022-10-19T16:00:00.000Z","updated":"2022-10-26T12:52:43.651Z","comments":true,"path":"2022/10/20/BUU刷题日记20221026/","link":"","permalink":"http://example.com/2022/10/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B020221026/","excerpt":"","text":"RSA5题目分析给定e&#x3D;65537给了很多组n、c由于e过大，所以不考虑使用CRT，由于m是同一个，因此遍历一下，求出两个n的最大公约数，即为p，后续就简单了。 EXP1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677n1 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207c1 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320n2 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759c2 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855n3 = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491c3 = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862n4 = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751c4 = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613n5 = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067c5 = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357n6 = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369c6 = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932n7 = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137c7 = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179n8 = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191c8 = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006n9 = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941c9 = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934n10 = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491c10 = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869n11 = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019c11 = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467n12 = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299c12 = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971n13 = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551c13 = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175n14 = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987c14 = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457n15 = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837c15 = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842n16 = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451c16 = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724n17 = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499c17 = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024n18 = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973c18= 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887n19 = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603c19 = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889n20 = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659c20 = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346n=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]import mathimport gmpy2from Crypto.Util.number import long_to_bytesfor i in range(20): for j in range(i+1,20): if math.gcd(n[i],n[j]) &gt; 1: p=math.gcd(n[i],n[j]) print(i,j,p) break#i=4,j=17e=65537q = n[4]// pphi4=(p-1)*(q-1)d=gmpy2.invert(e,phi4)m=pow(c5,d,n[4])print(long_to_bytes(m))# b&#x27;flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;&#x27;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"diary","slug":"diary","permalink":"http://example.com/tags/diary/"}]},{"title":"2021ByteCTF-easyxor","slug":"2021ByteCTF-easyxor","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-21T02:18:02.554Z","comments":true,"path":"2022/10/16/2021ByteCTF-easyxor/","link":"","permalink":"http://example.com/2022/10/16/2021ByteCTF-easyxor/","excerpt":"","text":"[TOC] 题目源码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#! /usr/bin/env pythonfrom Crypto.Util.number import bytes_to_long, long_to_bytesfrom random import randint, getrandbitsdef shift(m, k, c): if k &lt; 0: return m ^ m &gt;&gt; (-k) &amp; c return m ^ m &lt;&lt; k &amp; cdef convert(m, key): c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 0x964c5a89f6d3ae8c] for t in range(4): m = shift(m, key[t], c_list[t]) return mdef encrypt(m, k, iv, mode=&#x27;CBC&#x27;): assert len(m) % 8 == 0 num = len(m) // 8 groups = [] for i in range(num): groups.append(bytes_to_long(m[i * 8: (i + 1) * 8])) last = iv cipher = [] if mode == &#x27;CBC&#x27;: for eve in groups: cur = eve ^ last cur_c = convert(cur, k) cipher.append(cur_c) last = cur_c elif mode == &#x27;OFB&#x27;: for eve in groups: cur_c = convert(last, k) cipher.append(cur_c ^ eve) last = cur_c else: print &#x27;Not supported now!&#x27; return &#x27;&#x27;.join([hex(eve)[2:].strip(&#x27;L&#x27;).rjust(16, &#x27;0&#x27;) for eve in cipher])if __name__ == &#x27;__main__&#x27;: from secret import flag if len(flag) % 8 != 0: flag += &#x27;$&#x27; * (8 - len(flag) % 8) length = len(flag) num = length // 8 keys = [randint(-32, 32) for _ in range(4)] IV = getrandbits(64) front = flag[:length // 2] back = flag[length // 2:] cipher1 = encrypt(front, keys, IV, mode=&#x27;OFB&#x27;) cipher2 = encrypt(back, keys, IV) print cipher1 + cipher2#89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912 题目分析将flag分为两段，前半段采用OFB加密，后半段采用CBC加密 OFB解密将前半段flag又进行切分，将其8位分为一组，存到group数组中。 123456#主要加密代码elif mode == &#x27;OFB&#x27;: for eve in groups: cur_c = convert(last, k) cipher.append(cur_c ^ eve) last = cur_c 针对一个随机生成的64位的last，与keys进行convert加密，再与group中的数进行异或。keys是四个-32～32的数，可爆破。对于OFB解密十分简单，因为我们已知第一组明文，恰好是8位的’ByteCTF{‘，由于分组密码的性质，所以后面的也就迎刃而解，通过group[ 0]^cipher[ 0] 即可得到cur_c，从而求得下一次的cur_c，以此类推。 expOFB123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#OFB解密#! /usr/bin/env pythonfrom Crypto.Util.number import bytes_to_long, long_to_bytesfrom random import randint, getrandbitsdef shift(m, k, c): if k &lt; 0: return m ^ m &gt;&gt; (-k) &amp; c return m ^ m &lt;&lt; k &amp; cdef convert(m, key): c_list = [ 0x37386180AF9AE39E, 0xAF754E29895EE11A, 0x85E1A429A2B7030C, 0x964C5A89F6D3AE8C, ] for t in range(4): m = shift(m, key[t], c_list[t]) return mdef check(s): c=1 for i in s: if 32&lt;=i&lt;=127: continue else: c=0 break return cc = &quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;c=c[:len(c)//2]cipher = []for i in range(len(c)//16): cipher.append(int(c[i*16:(i+1)*16],16))flag = b&#x27;ByteCTF&#123;&#x27;m0 = bytes_to_long(flag)m_m = m0 ^ cipher[0]for a in range(-32,32): for b in range(-32,32): for c in range(-32,32): for d in range(-32,32): keys=[a,b,c,d] m_m1=convert(m_m,keys) m1=long_to_bytes((m_m1^cipher[1])) if check(m1): m_m2 = convert(m_m1, keys) m2 = long_to_bytes((m_m2 ^ cipher[2])) if check(m2): flag+=m1 flag+=m2 print(flag) print(a,b,c,d)#b&#x27;ByteCTF&#123;5831a241s-f30980&#x27;#keys：-12 26 -3 -31 CBC解密针对后半部分，我们需要逆向解出convert函数，因此就是对shift函数中的加密运算进行解密。之前上网搜的wp都一笔带过，没解释unshift逆函数怎么写的。“难道有什么定理？？”这里简单写一下我的理解。 分析shift1234def shift(m, k, c): if k &lt; 0: return m ^ m &gt;&gt; (-k) &amp; c return m ^ m &lt;&lt; k &amp; c 推理过程这里我们举例k&gt;0时的情况。（k&lt;0同理）m和c都是64位,k是-32～32的10进制数。1、m &lt;&lt; k相当于在m后补k位0，得到的新数我们称为a，a&#x3D;m &lt;&lt; k。2、令b &#x3D; a &amp; c，由于a是64+k位，c是64位，所以b是64位，并且b的后k位都是0。3、令x &#x3D; m ^ b，x则是shift加密之后的值，x也是64位，并且x的后k位是与m的后k位相同的，与0异或得本身。我们走完了一遍shift加密，得到的结论是，密文的位数同样是64，并且密文的后k位与明文相同。 分析unshift12345678910def unshift(m, k, c, bits=64): tmp = m if k &lt; 0: for i in range(bits // (-k)): tmp = m ^ tmp &gt;&gt; (-k) &amp; c else: for i in range(bits // k): tmp = m ^ tmp &lt;&lt; k &amp; c assert shift(tmp, k, c) == m return tmp 推理过程同样我们举例k&gt;0的情况。之前我们得到的密文x，相当于tmp。1、a’&#x3D;tmp &lt;&lt; k，tmp后k位为0，tmp后2k～k位等于m的后k位。2、b’&#x3D;a’ &amp; c，b’后k位为0，后2k～k位为m&amp;c。3、y&#x3D;x ^ b’，y的后k位，等于x的后k位，也就是m的后k位。4、y的后2k～k位，在shift加密当中，a &amp; c的后2k～k位等于m的后k位&amp;c，记作m1 &amp; c。shift中的x，也就是m ^ b，m ^(m1 &amp; c)，在unshift最后的一步操作中，y&#x3D; m ^(m1 &amp; c) ^ b’。这时我们只考虑y的后2k～k位，y&#x3D;m ^(m1 &amp; c)^(m1 &amp; c) &#x3D; m所以这时y的2k～k位也等于m了。 总结因此，我们发现每经过unshift一次，就有k位被还原，何时才能被完全还原？即循环bits&#x2F;&#x2F;k次。此推理正确，可以在unshift函数运行时输出每次的tmp观察即可。ps：自我感觉这种位运算应该是属于一种性质或者定理，网上大佬们都是说“简单写个逆”。。。 expCBC12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from Crypto.Util.number import bytes_to_long, long_to_bytesfrom random import randint, getrandbitsdef shift(m, k, c): if k &lt; 0: return m ^ m &gt;&gt; (-k) &amp; c return m ^ m &lt;&lt; k &amp; cdef unconvert(m, key): tmp = m c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 0x964c5a89f6d3ae8c] for t in range(3,-1,-1): m = unshift(m, key[t], c_list[t]) return mdef unshift(m, k, c, bits=64): tmp = m if k &lt; 0: for i in range(bits // (-k)): tmp = m ^ tmp &gt;&gt; (-k) &amp; c else: for i in range(bits // k): tmp = m ^ tmp &lt;&lt; k &amp; c assert shift(tmp, k, c) == m return tmpkeys=[-12,26,-3,-31]c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 0x964c5a89f6d3ae8c]flag=b&#x27;ByteCTF&#123;&#x27;flag=bytes_to_long(flag)iv=16476971533267772345c = &quot;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&quot;c=c[len(c)//2:]cipher = []for i in range(len(c)//16): cipher.append(int(c[i*16:(i+1)*16],16))group=[]curc1=unconvert(cipher[0],keys)group.append(long_to_bytes(curc1^iv))curc2=unconvert(cipher[1],keys)group.append(long_to_bytes(curc2^cipher[0]))curc3=unconvert(cipher[2],keys)group.append(long_to_bytes(curc3^cipher[1]))group[0]+=group[1]group[0]+=group[2]print(group[0])#b&#x27;q535af-2156547475u2t&#125;$$$&#x27;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"2022BUUCTF新生赛-RSA","slug":"2022BUUCTF新生赛-RSA","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-21T02:17:55.524Z","comments":true,"path":"2022/10/16/2022BUUCTF新生赛-RSA/","link":"","permalink":"http://example.com/2022/10/16/2022BUUCTF%E6%96%B0%E7%94%9F%E8%B5%9B-RSA/","excerpt":"","text":"题目源码123456789101112131415161718from Crypto.Util.number import *import gmpy2m = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)n = p * p * qe = 0x10001d = inverse(e, p * (p-1) * (q-1))assert m &lt; nc = pow(m, e, n)hint = pow(d, e, n)print(f&#x27;c = &#123;c&#125;&#x27;)print(f&#x27;hint = &#123;hint&#125;&#x27;)print(f&#x27;n = &#123;n&#125;&#x27;)#c = 295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342#hint = 381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077#n = 1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317 题目分析发现n和phin都不常规，没入手点，发现hint，hint&#x3D;pow(d,e,n)，有趣，用d做明文，尝试推理一下：d &#x3D; pow(hint,d,n)d &#x3D; pow((d ** e % n),d,n)d &#x3D; (d ** e % n) ** d % nd &#x3D; d ** (e*d) % nd &#x3D; pow(d ** e,d,n)把d ** e再次看做密文，可得d ** e &#x3D; pow(d,e,n)因为hint &#x3D; pow(d,e,n)可得hint &#x3D; d ** ed ** e * e ** e-&gt;(ed) ** e-&gt;(ed) ** e &#x3D;&#x3D; 1 mod phin因此根据e和hint即可求得phin从而得到phin和n的最大公约数p脚本如下 1234567891011121314from Crypto.Util.number import *import gmpy2import mathe = 0x10001c = 295390424904695335160238045484482823778874523176268561514416832384667341911461624807479360352155340771798064104910086195729675369023485015714514440154903376061747094964841316582559859939271083212458383263813162552258150862316694340739316654325015871916752667846321388549685578217102034863664378037876690856340358410405404601972377258035410485778168718251025950362254734939336524237028597772764421048442121802994478847811235518434239824115849516645106981074204342hint = 381689393821386814936953643422859595359427105930487728052490073810065861656721298489533943537291889430179955685768552743683931382858386278229412048061640902207419922278984960983464060741314251570306423515751064678573919676919458734440112312205062810416467534525851481716577433432802746104452081670842385746300503903217917867773267569384218933894515975838815295351900841003897643955266573211223356519224254883905741607839206824725522319870208594077622555096443077n = 1330047950007581682981905423145560321016033324862143764072994099149659943994269827526733343998097272206411640734177032076844564188190644548214106206913310385320478977860962140014336074250277764844699709526956803401392604949854612016074894825128737598849968249437120905834713554348840283463250157701334045079523107114507765969484185723955713386597151991074970735613177368468450679646585239506590480790958808030534070060413924423517044064816910208776798401702408317p=math.gcd((hint*pow(e,e) -1),n)q=n//(p**2)phi=p*(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m))#flag&#123;43075d24-77a7-4f57-ae89-54fe4f96db69&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"梦开始的地方","slug":"梦开始的地方","date":"2022-10-15T07:59:58.000Z","updated":"2022-10-16T05:22:27.882Z","comments":true,"path":"2022/10/15/梦开始的地方/","link":"","permalink":"http://example.com/2022/10/15/%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/","excerpt":"","text":"Mac下利用Hexo和github pages搭建个人博客环境配置1.Node.js安装下载地址：Node.js 2.淘宝镜像安装12//打开终端terminal$ npm install -g cnpm --registry=https://registry.npm.taobao.org 3.安装Hexo1234// 使用命令去安装Hexocnpm install -g hexo-cli//安装成功后查看版本hexo -v 初始化Hexo Blog1.初始化Hexo新建一个文件夹并进入，例如blog 12//初始化hexohexo init 2.本地启动Hexo1hexo s 浏览器打开网站，即可看到本地博客 创建博客文章1.创建文章1hexo n &quot;我的第一篇文章&quot; 在blog文件夹中的_post里即可看到新建的md文件 2.清理缓存项目在新建博客或修改博客时，需要进行该操作 1hexo clean 3.重新生成博客1hexo g 4.启动博客1hexo d","categories":[{"name":"建站","slug":"建站","permalink":"http://example.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-10-15T07:57:23.442Z","updated":"2022-10-15T07:57:23.442Z","comments":true,"path":"2022/10/15/hello-world/","link":"","permalink":"http://example.com/2022/10/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"},{"name":"建站","slug":"建站","permalink":"http://example.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"},{"name":"diary","slug":"diary","permalink":"http://example.com/tags/diary/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}